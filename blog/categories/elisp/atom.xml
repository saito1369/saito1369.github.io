<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elisp | easy cure]]></title>
  <link href="http://saito1369.github.io/blog/categories/elisp/atom.xml" rel="self"/>
  <link href="http://saito1369.github.io/"/>
  <updated>2025-01-29T16:44:35+09:00</updated>
  <id>http://saito1369.github.io/</id>
  <author>
    <name><![CDATA[saito1369]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成 (3)]]></title>
    <link href="http://saito1369.github.io/blog/2019-04-08-161532.html"/>
    <updated>2019-04-08T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/161532</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. これまでのあらすじ</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. 問題点</a></li>
<li><a href="#sec-4">4. 解決策</a></li>
<li><a href="#sec-5">5. 結果</a></li>
<li><a href="#sec-6">6. その他</a></li>
<li><a href="#sec-7">7. 参考URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-08 Mon 16:15&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-08 Mon 19:14&gt;</span></span><br />
</p>
<p>
このメモは, <a href="http://saito1369.github.io/blog/2019-03-22-141849.html">diary-float による org-mode の日付作成 (2)</a> の続きである.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> これまでのあらすじ</h2>
<div class="outline-text-2" id="text-1">
<p>
少々複雑な繰り返しタスクを org-mode 内でうまく処理したい.<br />
そのため, 繰り返しタスクの PROPERTIES の中に DIARYF という property を作り, そこに diary-float 形式で繰り返し日付のルールを elisp program として書くことにした.<br />
</p>

<p>
以下のような感じ<br />
</p>
<pre class="example">
:PROPERTIES:
:DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
:END:
</pre>

<p>
この状態で org-todo を実行すると, DIARYF にある elisp program に基づいて次の予定日が計算され更新される. また, この予定日の次の予定も計算されて日付の差分(+1d とか)として更新される.<br />
こうすることで, 複雑な繰り返し日付のルールを DIARYF に押し込めることができ, 実際のスケジュールは常に具体的な日付となって org-mode の他のいろんなツールの利用と矛盾しないようになった(ような気がする).<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
一応使えてはいるのだが&#x2026;<br />
予定日からずれた使い方をすると途端によくわからん状態になってしまうことが判明.<br />
</p>

<p>
例えば今日が <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> で, SCHEDULED された日付が例えば以下のように書かれているとする.<br />
</p>

<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-01 Mon +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> にやるつもりだったが出来てなくて, 今日 <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> にやろうかなーと思った, そんなよくある状況を想定している.<br />
</p>

<p>
ちなみに DIARYF の後ろの関数はこんなやつで,<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday</span>(stt <span style="color: #9370db;">&amp;rest</span> wds)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr"> 3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
<span class="linenr"> 4: </span>         (jst  nil)
<span class="linenr"> 5: </span>         (sttd  (calendar-absolute-from-gregorian stt ))
<span class="linenr"> 6: </span>         (today (calendar-absolute-from-gregorian date))
<span class="linenr"> 7: </span>         (diffd (- today sttd)))
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">(y-or-n-p (message "date=%s" date))</span>
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
<span class="linenr">10: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
<span class="linenr">11: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-habit-weekday-week date wds)))
<span class="linenr">12: </span>    jst
<span class="linenr">13: </span>    ))
<span class="linenr">14: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday-week</span>(date wds)
<span class="linenr">15: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">16: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((wd nil)
<span class="linenr">17: </span>        (jst nil))
<span class="linenr">18: </span>    (<span style="color: #20b2aa; font-weight: bold;">while</span> wds
<span class="linenr">19: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wd (car wds))
<span class="linenr">20: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= wd (calendar-day-of-week date)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
<span class="linenr">21: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wds (cdr wds))
<span class="linenr">22: </span>      )
<span class="linenr">23: </span>    jst))
</pre>
</div>
<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> 以降の月, 水, 金曜日にやるという意味である.<br />
</p>


<p>
このタスクを今日 <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> に行って DONE にする(org-todo) と&#x2026;<br />
何と以下のようになってしまうのであった.<br />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-03 Wed +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>

<p>
うーん違うだろって感じだ.<br />
繰り返し日付で今日は金曜日なんで,<br />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-08 Mon +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
こうなって欲しいことは明らかなのだが, どうすればいいんだろ？<br />
</p>

<p>
.+2d (DONE にした日付から 2 日後), ++2d (DONE した日付から直近の 2 日後) で行けるのかなと思ったが, それもなかなか難しいことが判明.<br />
</p>

<p>
例えばこうしておく.<br />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-01 Wed .+2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>

<p>
04/05 (金) に DONE にすると<br />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-07 Sun .+1d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
次の日付を作るときは .+2d しか見ないから, こうなってしまうのであった.<br />
うーんイマイチだなぁ. このタスクは日曜日にやる予定はないのだ.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 問題点</h2>
<div class="outline-text-2" id="text-3">
<p>
スケジュールされた日に実行すると仮定して日付差分(+2d など)が作成されているため, スケジュールされた日 + 差分 よりも今日の方が新しい場合には, DONE にした後の再スケジューリングが過去の日付になってしまう.<br />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 解決策</h2>
<div class="outline-text-2" id="text-4">
<p>
スケジュールされた日が今日よりも前の場合には, スケジュールを今日に変更し, DIARYF を見て次のスケジュールを差分で書くように変更する.<br />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 結果</h2>
<div class="outline-text-2" id="text-5">
<p>
いくつかの部品をまず作成する.<br />
日付の format が色々あってめんどくさい.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-get-sexp</span>()
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">"&#12459;&#12540;&#12477;&#12523;&#12364;&#12354;&#12427;&#22580;&#25152;&#12398; DIARYF &#12395;&#12354;&#12427; S &#24335;&#12434;&#21462;&#24471;&#12375;&#12390;&#36820;&#12377;"</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (elem sexp)
<span class="linenr">4: </span>    (end-of-line)
<span class="linenr">5: </span>    (org-back-to-heading)
<span class="linenr">6: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> elem (org-element-headline-parser (point-max) t))
<span class="linenr">7: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem))   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">PROPERTIES: &#12398;&#20013;&#36523;&#12398;&#12487;&#12540;&#12479;&#12434;&#21462;&#12426;&#20986;&#12377;&#26041;&#27861;</span>
<span class="linenr">8: </span>    sexp
<span class="linenr">9: </span>    ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-float-to-diff</span>(sexp day <span style="color: #9370db;">&amp;optional</span> pdays)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sexp: DIARYF &#12398; S &#24335;               %%(diary-lecture ......)</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">   day:  &#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;              '(50 7 20 4 5 2019 5 nil 32400)   =&gt; 2019/04/05</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">   pdays: &#20309;&#26085;&#24460;&#12398;&#20104;&#23450;&#12414;&#12391;&#32771;&#12360;&#12427;&#12363;.   60"</span>
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((ii       0)
<span class="linenr"> 6: </span>        (cdate  nil)
<span class="linenr"> 7: </span>        (result nil))
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">unless</span> pdays (<span style="color: #20b2aa; font-weight: bold;">setq</span> pdays 0))
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">"^%%"</span> sexp) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (substring-no-properties sexp 2)))
<span class="linenr">10: </span>    (<span style="color: #20b2aa; font-weight: bold;">catch</span> '<span style="color: #1e90ff;">break</span>
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">while</span> (&lt; ii (1+ pdays))
<span class="linenr">12: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> cdate  (my-calendar-format-nth-day-after day ii))
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> result (org-diary-sexp-entry sexp t cdate))
<span class="linenr">14: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> result (<span style="color: #20b2aa; font-weight: bold;">throw</span> '<span style="color: #1e90ff;">break</span> nil))
<span class="linenr">15: </span>        (<span style="color: #20b2aa; font-weight: bold;">incf</span> ii)
<span class="linenr">16: </span>        ))
<span class="linenr">17: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> result
<span class="linenr">18: </span>        ii <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#20104;&#23450;&#26085;&#12414;&#12391;&#20309;&#26085;&#20998;&#12354;&#12427;&#12363;&#65311;&#12434;&#36820;&#12377;.</span>
<span class="linenr">19: </span>        -1 <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12425;&#12394;&#12369;&#12428;&#12400; -1 &#12434;&#36820;&#12377;.</span>
<span class="linenr">20: </span>      )
<span class="linenr">21: </span>    ))
<span class="linenr">22: </span>
<span class="linenr">23: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format</span>(dayl)
<span class="linenr">24: </span>  <span style="color: #cd5c5c;">"dayl = '(50 7 20 12 5 2017 5 nil 32400) &#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;</span>
<span class="linenr">25: </span><span style="color: #cd5c5c;">&#12363;&#12425; calendar-format '(5 12 2017) &#12408;&#22793;&#26356;&#12377;&#12427;"</span>
<span class="linenr">26: </span>  (list (nth 4 dayl) (nth 3 dayl) (nth 5 dayl)))
<span class="linenr">27: </span>
<span class="linenr">28: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format-nth-day-after</span>(dayl n)
<span class="linenr">29: </span>  <span style="color: #cd5c5c;">"&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;&#12398;&#26085;&#20184; dayl &#12363;&#12425; n(=2) &#26085;&#30446;&#12398;&#26085;&#20184;&#12434; calendar-format &#12391;&#36820;&#12377;.</span>
<span class="linenr">30: </span><span style="color: #cd5c5c;">   dayl='(50 7 20 12 5 2017 5 nil 32400) n=2 &#12398;&#22580;&#21512;</span>
<span class="linenr">31: </span><span style="color: #cd5c5c;">  '(5 14 2017) &#12434;&#36820;&#12377;."</span>
<span class="linenr">32: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((unday (apply #'encode-time dayl)))
<span class="linenr">33: </span>    (my-calendar-format (decode-time (time-add unday (days-to-time n))))
<span class="linenr">34: </span>    ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-replace-scheduled-repeat</span>(sch-format next-diff)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sch-format= 2019-04-02 Tue</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">next-diff= 8</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#12398;&#12392;&#12365;, SCHEDULED: &#12398;&#25991;&#23383;&#21015;&#12434;&#19978;&#12398;&#20516;&#12395;&#32622;&#12365;&#25563;&#12360;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">SCHEDULED: &lt;2019-04-01 Mon&gt; =&gt; SCHEDULED: &lt;2019-04-02 Tue +8d&gt; &#12395;&#32622;&#12365;&#25563;&#12360;"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (sch-format-with-repeat)
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= next-diff 0) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s&gt;"</span> sch-format))
<span class="linenr"> 8: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s %s&gt;"</span> sch-format (concat <span style="color: #ffa07a;">"+"</span> (number-to-string next-diff) <span style="color: #ffa07a;">"d"</span>))))
<span class="linenr"> 9: </span>    (org-back-to-heading)
<span class="linenr">10: </span>    (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">11: </span>    (replace-match sch-format-with-repeat)
<span class="linenr">12: </span>    ))
</pre>
</div>

<p>
unix-sch-date (UNIX 形式日付)から数えた次のスケジュールについての情報を以下で計算.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-get-next-schedule</span>(unix-sch-date sexp)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"unix-date &#12434;&#24341;&#25968;&#12395;&#12375;&#12390;, &#12371;&#12398;&#26085;&#12363;&#12425;&#25968;&#12360;&#12383; (&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12398;&#26085;&#20184;, &#36861;&#21152;&#12377;&#12427;&#26085;&#25968;) &#12434;&#36820;&#12377;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#20363;: unix-sch-date = &lt;2019-04-01 Mon&gt; (&#12398; unix-date &#34920;&#35352;)</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">sexp = %%(diary-habit-weekday '(4 1 2019) 1)    ;; 2019/04/01 &#12363;&#12425;&#12398;&#27598;&#26376;&#26332;&#26085;</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">     =&gt; (list \"2019-04-08 Mon\" 7) &#12364;&#36820;&#12427;"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
<span class="linenr"> 7: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#26085;&#12395;&#12377;&#12427;.</span>
<span class="linenr"> 8: </span>         (unix-sch-next-date (time-add unix-sch-date (days-to-time 1)))
<span class="linenr"> 9: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335; (0 0 0 11 3 2019 0 nil 32400) &#12395;&#22793;&#25563;</span>
<span class="linenr">10: </span>         (lst-sch-next-date (decode-time unix-sch-next-date))
<span class="linenr">11: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12414;&#12391;&#12398;&#26085;&#20184;&#35336;&#31639;(&#27425;&#12398;&#26085;&#12363;&#12425;&#35336;&#31639;&#12375;&#12390;&#12427;&#12398;&#12391; + 1 &#12434;&#20837;&#12428;&#12390;&#12362;&#12367;)</span>
<span class="linenr">12: </span>         (next-diff (+ 1 (diary-float-to-diff sexp lst-sch-next-date org-gcal-down-days)))
<span class="linenr">13: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12398;&#26085;&#20184;</span>
<span class="linenr">14: </span>         (unix-sch-next-scheduled-date (time-add unix-sch-date (days-to-time next-diff)))
<span class="linenr">15: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12457;&#12540;&#12510;&#12483;&#12488;&#22793;&#26356;</span>
<span class="linenr">16: </span>         (sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-next-scheduled-date))
<span class="linenr">17: </span>         )
<span class="linenr">18: </span>    (list sch-format next-diff) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12522;&#12473;&#12488;&#12391;&#36820;&#12377;</span>
<span class="linenr">19: </span>    ))
</pre>
</div>
<p>
これらの部品を使って&#x2026;<br />
</p>

<p>
カーソル上にあるタスクの予定日付と DIARYF の elisp program を見て次の予定との差分を計算し書き出す.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff</span>()
<span class="linenr"> 2: </span>    <span style="color: #cd5c5c;">"DIARYF: &#12503;&#12525;&#12497;&#12486;&#12451;&#12398; diary-float &#24418;&#24335;&#26085;&#20184;(habit)&#12364;&#12354;&#12428;&#12400;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#35501;&#12415;&#36796;&#12435;&#12391;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#20855;&#20307;&#30340;&#12395;&#12399;, SCHUEDULED: &lt;&#26085;&#20184;&gt; =&gt; SCHEDULED: &lt;&#26085;&#20184; +8d&gt; &#12392;&#12363;&#12395;&#12377;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">(&#27425;&#12398;&#20104;&#23450;&#12364; 8 &#26085;&#24460;&#12395;&#12354;&#12427;&#12392; diary-float &#20869;&#12398;&#38306;&#25968;&#12391;&#35336;&#31639;&#12373;&#12428;&#12383;&#22580;&#21512;&#12398;&#20363;)"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 7: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (unix-sch-date lst next-diff sch-format sexp)
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr"> 9: </span>      (end-of-line)
<span class="linenr">10: </span>      (org-back-to-heading)
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (my-org-diary-float-get-sexp))
<span class="linenr">12: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> sexp
<span class="linenr">13: </span>          (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">14: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point))) <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">UNIX date</span>
<span class="linenr">15: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> lst (my-org-diary-float-get-next-schedule unix-sch-date sexp))
<span class="linenr">16: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-date))
<span class="linenr">17: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> next-diff  (nth 1 lst))
<span class="linenr">18: </span>            (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">" 00:00"</span> sch-format) (<span style="color: #20b2aa; font-weight: bold;">setf</span> (substring sch-format (match-beginning 0) (match-end 0)) <span style="color: #ffa07a;">""</span>))
<span class="linenr">19: </span>            (my-org-diary-float-replace-scheduled-repeat sch-format next-diff)
<span class="linenr">20: </span>            )
<span class="linenr">21: </span>        )
<span class="linenr">22: </span>      )
<span class="linenr">23: </span>    ))
</pre>
</div>

<p>
スケジュールされた日と今日を比較して今日の方が新しければスケジュールを今日に変更.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff-replace-today</span>()
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">":DIARYF: &#12398; diary-float &#24418;&#24335;&#26085;&#20184;&#12364;&#12354;&#12428;&#12400;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">SCHEDULE &#12364; &lt;2019-04-01 Mon&gt; &#12391;&#20170;&#26085;&#12364;&#20363;&#12360;&#12400; &lt;2019-04-03 Wed&gt; &#12398;&#22580;&#21512;,</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#12388;&#12414;&#12426;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12373;&#12428;&#12383;&#26085;&#20184;&#12364;&#36942;&#21435;&#12398;&#22580;&#21512;&#12395;&#12399;, &#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12434;&#20170;&#26085;&#12395;&#12377;&#12427;."</span>
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (unix-today unix-sch-date sch-format-today stime ext)
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr"> 8: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULE &#12373;&#12428;&#12383;&#26085;&#20184;&#12424;&#12426;&#20170;&#26085;&#12398;&#12411;&#12358;&#12364;&#26032;&#12375;&#12356;&#22580;&#21512;</span>
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-today (current-time))
<span class="linenr">10: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point)))
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> (&lt; (float-time unix-sch-date) (float-time unix-today))
<span class="linenr">12: </span>          (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">13: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> stime (format-time-string <span style="color: #ffa07a;">"%H:%M"</span> unix-sch-date))
<span class="linenr">14: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">org-extend-today-until &#12424;&#12426;&#12418;&#26178;&#21051;&#12364;&#21069;&#12394;&#12425;&#21069;&#26085;&#12395;&#12377;&#12427;</span>
<span class="linenr">15: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-today (my-org-diary-float-replace-date-extend-today unix-today))
<span class="linenr">16: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26178;&#21051;&#12399;&#20837;&#12428;&#26367;&#12360;&#12427;</span>
<span class="linenr">17: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-today (concat (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a"</span> unix-today) <span style="color: #ffa07a;">" "</span> stime))
<span class="linenr">18: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULED &#26085;&#20184;&#12434;&#20170;&#26085;&#12395;&#22793;&#26356;&#12377;&#12427;</span>
<span class="linenr">19: </span>            (my-org-diary-float-replace-scheduled-repeat sch-format-today 0)
<span class="linenr">20: </span>            )
<span class="linenr">21: </span>        )
<span class="linenr">22: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523; +nd &#12434;&#20316;&#25104;&#12375;&#30452;&#12375;</span>
<span class="linenr">23: </span>      (my-org-diary-float-next-schedule-diff)
<span class="linenr">24: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12371;&#12398;&#12354;&#12392; +nd &#12364;&#35336;&#31639;&#12373;&#12428;&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#26085;&#20184;&#12395;&#26360;&#12365;&#25563;&#12431;&#12427;</span>
<span class="linenr">25: </span>      )))
<span class="linenr">26: </span>
<span class="linenr">27: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-replace-date-extend-today</span>(unix-date)
<span class="linenr">28: </span>  <span style="color: #cd5c5c;">"unix-date &#12398;&#26178;&#21051;&#12364; 5:00(org-extend-today-until) &#12424;&#12426;&#12418;&#21069;&#12384;&#12387;&#12383;&#12425;, &#21069;&#12398;&#26085;&#12395;&#12420;&#12387;&#12383;&#12371;&#12392;&#12395;&#12377;&#12427;"</span>
<span class="linenr">29: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (ext)
<span class="linenr">30: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> org-extend-today-until
<span class="linenr">31: </span>        (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">32: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> ext (string-to-number (format-time-string <span style="color: #ffa07a;">"%H.%M"</span> unix-date)))
<span class="linenr">33: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "ext=%f" ext))</span>
<span class="linenr">34: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "extend=%d" org-extend-today-until))</span>
<span class="linenr">35: </span>          (<span style="color: #20b2aa; font-weight: bold;">if</span> (&gt; org-extend-today-until ext)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">5 &gt; 4.50 (unix-date &#12398;&#26085;&#26178;&#12364; 4:50 &#12398;&#22580;&#21512;)</span>
<span class="linenr">36: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#21069;&#12398;&#26085;&#12395;&#12377;&#12427;</span>
<span class="linenr">37: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-date (time-add unix-date (days-to-time -1)))
<span class="linenr">38: </span>            )))
<span class="linenr">39: </span>    unix-date
<span class="linenr">40: </span>    ))
</pre>
</div>

<p>
org-todo の後で計算するように設定.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">org-todo</span>(after my-org-next-todo-migration-automatic-hook)
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((end   (my-org-get-end-head))
<span class="linenr">4: </span>         (elem  (org-element-headline-parser end t))
<span class="linenr">5: </span>         (todo  (org-element-property <span style="color: #76ee00;">:todo-keyword</span> elem)))
<span class="linenr">6: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem) (my-org-diary-float-next-schedule-diff-replace-today)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">[2019-04-03 Wed]</span>
<span class="linenr">7: </span>      ))
<span class="linenr">8: </span>(ad-activate-regexp <span style="color: #ffa07a;">"my-org-next-todo-migration-automatic-hook"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> その他</h2>
<div class="outline-text-2" id="text-6">
<p>
この件で色々調べてるときに, 有用そうな変数を見つけた.<br />
一つはこれ.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> org-extend-today-until 5) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">05:00 &#12414;&#12391;&#12399;&#21069;&#12398;&#26085;&#25201;&#12356;</span>
</pre>
</div>
<p>
org-extend-today-until を 5 にしておくと, 05:00 までは前の日扱いで処理してくれるらしい.<br />
上のプログラムでもこの値が定義されてるときを考慮した.<br />
</p>

<p>
このパラメータを設定しとかないと, 夜更かしの人は結構めんどくさいことになる.<br />
例えば, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue +1d&gt;</span></span> のタスクを <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に実行した場合などである.<br />
ここで DONE とすると, 次のスケジュールは <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-04 Thu +1d&gt;</span></span> となるが, これはやっぱ違うだろーと思うわけである.<br />
こうなってると, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed&gt;</span></span>  中は org-agenda でこのタスクが見えてこない.<br />
今日の夜もやる筈なのでスケジュールとしては <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed +1d&gt;</span></span> になってて欲しいわけである.<br />
org-extend-today-until に値があれば, この時間までは前の日扱いとなるため, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に DONE とすると <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span> にやったこととなり次のスケジュールは <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed +1d&gt;</span></span> となってめでたしめでたしとなる.<br />
</p>


<p>
もう一つの変数はこれ.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> org-use-effective-time t) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">05:00 &#21069;&#12398; timestamp &#12434;&#21069;&#26085;&#12398; 25:59 &#12395;&#12377;&#12427;.</span>
</pre>
</div>
<p>
STYLE: habit でグラフを描いているときなどにいいのではないだろーか.<br />
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に実行し DONE にしたときに, State ログが前日のものになってくれる.<br />
</p>

<p>
これが設定されてない場合, 繰り返し日付で DONE とすると State ログが書き出されて,<br />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 01:00]
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>
<p>
とこんな感じになる.<br />
</p>

<p>
これを基にグラフが描かれるわけだが, 気持ち的には <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span>  の夜にやってるつもりなんだけどなーと思うわけである.<br />
次の日とかがこんな感じになってると, ほんとは毎日やってる筈なのにグラフ上では <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span> には何もやってない感じが出てしまう.<br />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 23:45]
- State "DONE"       from ""           [2019-04-03 Wed 01:00]
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>

<p>
一方, 上の変数 org-use-effective-time が t になってると, ログは以下のようになる.<br />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 23:45]
- State "DONE"       from ""           [2019-04-02 Tue 23:59]  ;; 変わったところ
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>
<p>
つまり, org-extend-today-until に指定された時刻の前までは前日の 23:59 にやったことにしてくれる.<br />
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考URL</h2>
<div class="outline-text-2" id="text-7">
<p>
<a href="http://shuzo-kino.hateblo.jp/entry/2016/06/24/231844">emacs lisp で日付を表示する</a><br />
<a href="https://qiita.com/yewton/items/5e134065a9d4478b27d2">人類滅亡までのカウントダウンを Emacs に表示する</a><br />
<a href="https://stackoverflow.com/questions/50186949/parse-a-unix-timestamp-to-date-in-emacs-elisp">parse a unix timestamp to date in emacs (elisp)</a><br />
<a href="http://ergoemacs.org/emacs/elisp_datetime.html">Elisp: Date Time</a><br />
<a href="https://www42.atwiki.jp/elisp/pages/17.html">逆引き Emacs Lisp 日付と時刻</a><br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#Time-Parsing">40.8 Parsing and Formatting Times</a><br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Conversion.html">40.7 Time Conversion</a><br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#Time-of-Day">40.5 Time of Day</a><br />
</p>

<p>
<a href="https://www42.atwiki.jp/elisp/pages/12.html#id_644a4277">部分文字列を置き換える</a><br />
<a href="http://bit.ly/2JfSAJ1">Replace string in buffer programatically</a><br />
</p>

<p>
<a href="http://bit.ly/2Ujsh9J">Make agenda clockreport respect org-extend-today-until</a><br />
<a href="https://github.com/Fuco1/org-timeline">org-timeline</a><br />
<a href="https://orgmode.org/worg/doc.html">Documentation for Org hooks, commands and options</a><br />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成 (2)]]></title>
    <link href="http://saito1369.github.io/blog/2019-03-22-141849.html"/>
    <updated>2019-03-22T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/141849</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. これまでのあらすじ</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. 問題点</a></li>
<li><a href="#sec-4">4. 解決策</a></li>
<li><a href="#sec-5">5. 結果</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri 14:18&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri 18:46&gt;</span></span><br />
</p>
<p>
このメモは, <a href="http://saito1369.github.io/blog/2017-05-18-diary_float.html">diary-float による org-mode の日付作成</a> の続きである.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> これまでのあらすじ</h2>
<div class="outline-text-2" id="text-1">
<p>
emacs org-mode でタスクを管理している.<br />
複雑な繰り返し日付をルールに基づき書いておきたい.<br />
いろいろ調べたら, diary-float 形式で日付を書くという方法があることを知った.<br />
今日がそのタスクを行う日であれば t, そうじゃなければ nil を返す関数を自分で作ることで,<br />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;%%(diary-lecture '(04 01 2019) 7 15 '(3 10))&gt;
</pre>
<p>
こんな感じで書いておくと, この関数が t を返す日付でこのタスクがスケジューリングされる.<br />
(一応 diary-lecture 関数の意味を書いとくと, 2019/04/01 から, 7 日おきに 15 回やる. ただし 3 回目と 10 回目は休み)<br />
これでいちいち具体的な日付を書く必要がなくなった.<br />
よかった.<br />
ここまでが以前のはなし.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
これはこれでまぁ使えるようにはなったのだが, org-mode のプログラムの中では日付が <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri&gt;</span></span> のような形式で書いてないとうまく動かないものがあることが判明した.<br />
例えば org-habit とか. このままでは agenda-view で STYLE: habit としたときのグラフが出てこない.<br />
あるいは <a href="https://qiita.com/clothoid/items/73a937a22eeeb82c3ee7">org-gcal</a> とか. 具体的日付じゃないと Google Calendar との連携ができない.<br />
これをなんとかするためには, かなり色んな関数を advice を使って書き換えたり直接上書きしたりしないといけないのであった.<br />
出来たことはできたのだが結構汚いプログラムになってしまい何か嫌になってきた.<br />
org-mode の version up についていくためにも, もう少し何かシンプルにならんもんか&#x2026;<br />
</p>

<p>
一応現在の環境を書いておく.<br />
emacs は 26.1, org-mode は 8.2.10 である.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 問題点</h2>
<div class="outline-text-2" id="text-3">
<p>
タスクスケジューリングの日付に diary-float 形式の関数を直接書かないで同様の機能を持たせることは出来ないか？<br />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 解決策</h2>
<div class="outline-text-2" id="text-4">
<p>
こんな感じで書くことが出来ないか考えてみた.<br />
</p>

<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-01 Mon 10:40 +7d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>

<p>
diary-float 形式の日付ルールは, DIARYF property の中に書いておくようにする.<br />
スケジュールの最初の日付は具体的な <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> 形式で書かれている.<br />
問題は次が何日後かってことなので, ここを diary-float 形式の式を評価することで計算し書き出し(直し)たい.<br />
</p>

<p>
例えばこのタスクを DONE したとき, +7d を見ることで次回の日付が書き出される.<br />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-08 Mon 10:40 +7d&gt;
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2019-04-01 Fri 12:20]
    :END:      
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>
<p>
普通はこんな感じだけど, DIARYF property がある場合にはこれを見て次のスケジュールがほんとは何日後かを再計算する.<br />
この例の場合, 3 回目は休講だから次は 14 日後になる.<br />
最終的には以下のようになる.<br />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-08 Mon 10:40 +14d&gt;
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2019-04-01 Fri 12:20]
    :END:      
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>

<p>
これがうまく出来ればなんとかなるんではないだろうか.<br />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 結果</h2>
<div class="outline-text-2" id="text-5">
<p>
まずは以下のような引数をもった簡単な関数をつくる.<br />
  sexp="%%(diary-lecture '(04 01 2019) 7 15 '(3 10))"<br />
  day ="'(4 7 2019)"<br />
  pdays=60<br />
</p>

<p>
day から pdays 日以内で sexp を満たすもっとも近い日付が今日から何日後かを計算する.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-float-to-diff</span>(sexp day <span style="color: #9370db;">&amp;optional</span> pdays)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sexp &#12434;&#28288;&#12383;&#12377;&#19968;&#30058;&#36817;&#12356;&#26085;&#20184;&#12364; day &#12363;&#12425;&#20309;&#26085;&#24460;&#12363;&#65311;"</span>
<span class="linenr"> 3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((ii       0)
<span class="linenr"> 4: </span>        (cdate  nil)
<span class="linenr"> 5: </span>        (result nil))
<span class="linenr"> 6: </span>    (<span style="color: #20b2aa; font-weight: bold;">unless</span> pdays (<span style="color: #20b2aa; font-weight: bold;">setq</span> pdays 0))
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">"^%%"</span> sexp) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (substring-no-properties sexp 2)))
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">catch</span> '<span style="color: #1e90ff;">break</span>
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">while</span> (&lt; ii (1+ pdays))
<span class="linenr">10: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> cdate  (my-calendar-format-nth-day-after day ii))
<span class="linenr">11: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> result (org-diary-sexp-entry sexp t cdate))
<span class="linenr">12: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> result (<span style="color: #20b2aa; font-weight: bold;">throw</span> '<span style="color: #1e90ff;">break</span> nil))
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">incf</span> ii)
<span class="linenr">14: </span>        ))
<span class="linenr">15: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> result
<span class="linenr">16: </span>        ii <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#20104;&#23450;&#26085;&#12414;&#12391;&#20309;&#26085;&#20998;&#12354;&#12427;&#12363;&#65311;&#12434;&#36820;&#12377;.</span>
<span class="linenr">17: </span>      -1   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12425;&#12394;&#12369;&#12428;&#12400; -1 &#12434;&#36820;&#12377;.</span>
<span class="linenr">18: </span>      )
<span class="linenr">19: </span>    ))
<span class="linenr">20: </span>
<span class="linenr">21: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format-nth-day-after</span>(dayl n)
<span class="linenr">22: </span>  <span style="color: #cd5c5c;">"dayl='(50 7 20 12 5 2017 5 nil 32400) n=2  =&gt; return '(5 14 2017)"</span>
<span class="linenr">23: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((unday (apply #'encode-time dayl)))
<span class="linenr">24: </span>    (my-calendar-format (decode-time (time-add unday (days-to-time n))))
<span class="linenr">25: </span>    ))
<span class="linenr">26: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format</span>(dayl)
<span class="linenr">27: </span>  <span style="color: #cd5c5c;">"dayl='(50 7 20 12 5 2017 5 nil 32400) =&gt; return '(5 12 2017)"</span>
<span class="linenr">28: </span>  (list (nth 4 dayl) (nth 3 dayl) (nth 5 dayl)))
</pre>
</div>

<p>
これを利用して,<br />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40&gt;
</pre>
<p>
とか<br />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40 +7d&gt;
</pre>
<p>
を DIARYF に基づき<br />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40 +14d&gt;
</pre>
<p>
に書き換えるプログラムとして以下を作成.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff</span>()
<span class="linenr"> 2: </span>    <span style="color: #cd5c5c;">"DIARYF: &#12503;&#12525;&#12497;&#12486;&#12451;&#12398; diary-float &#24418;&#24335;&#26085;&#20184;(habit)&#12364;&#12354;&#12428;&#12400;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#35501;&#12415;&#36796;&#12435;&#12391;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#20855;&#20307;&#30340;&#12395;&#12399;, SCHUEDULED: &lt;&#26085;&#20184;&gt; =&gt; SCHEDULED: &lt;&#26085;&#20184; +14d&gt; &#12392;&#12377;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">(&#27425;&#12398;&#20104;&#23450;&#12364; 14 &#26085;&#24460;&#12395;&#12354;&#12427;&#12392; diary-float &#20869;&#12398;&#38306;&#25968;&#12391;</span>
<span class="linenr"> 6: </span><span style="color: #cd5c5c;">&#35336;&#31639;&#12373;&#12428;&#12383;&#22580;&#21512;)"</span>
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">let</span> (elem sexp unix-sch-date unix-sch-next-date lst-sch-next-date
<span class="linenr"> 9: </span>               next-diff sch-format sch-format-with-repeat)
<span class="linenr">10: </span>      (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr">11: </span>        (end-of-line)
<span class="linenr">12: </span>        (org-back-to-heading)
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> elem (org-element-headline-parser (point-max) t))
<span class="linenr">14: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">PROPERTIES: &#12398;&#20013;&#36523;&#12398;&#12487;&#12540;&#12479;&#12434;&#21462;&#12426;&#20986;&#12377;&#26041;&#27861;</span>
<span class="linenr">15: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> sexp
<span class="linenr">16: </span>            (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">17: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULED &#12398;&#26085;&#20184;</span>
<span class="linenr">18: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point))) <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">UNIX date</span>
<span class="linenr">19: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#26085;&#12395;&#12377;&#12427;.</span>
<span class="linenr">20: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-next-date (time-add unix-sch-date (days-to-time 1)))
<span class="linenr">21: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335; (0 0 0 11 3 2019 0 nil 32400) &#12395;&#22793;&#25563;</span>
<span class="linenr">22: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> lst-sch-next-date (decode-time unix-sch-next-date))
<span class="linenr">23: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12414;&#12391;&#12398;&#26085;&#20184;&#35336;&#31639;(&#27425;&#12398;&#26085;&#12363;&#12425;&#35336;&#31639;&#12375;&#12390;&#12427;&#12398;&#12391; + 1 &#12434;&#20837;&#12428;&#12390;&#12362;&#12367;)</span>
<span class="linenr">24: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> next-diff (+ 1 (diary-float-to-diff sexp lst-sch-next-date org-gcal-down-days)))
<span class="linenr">25: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-date))
<span class="linenr">26: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26178;&#38291;&#12364;&#25351;&#23450;&#12373;&#12428;&#12390;&#12394;&#12356;&#12392;&#12365;&#12399; " 00:00" &#12434;&#21066;&#38500;&#12377;&#12427;.</span>
<span class="linenr">27: </span>              (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">" 00:00"</span> sch-format) (<span style="color: #20b2aa; font-weight: bold;">setf</span> (substring sch-format (match-beginning 0) (match-end 0)) <span style="color: #ffa07a;">""</span>))
<span class="linenr">28: </span>              (<span style="color: #20b2aa; font-weight: bold;">if</span> (= next-diff 0)
<span class="linenr">29: </span>                  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">diary-float &#12391;&#12398;&#27425;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#26085;&#20184;&#12364;&#35211;&#12388;&#12363;&#12425;&#12394;&#12356;&#12392;&#12365;.</span>
<span class="linenr">30: </span>                  (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">31: </span>                    (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s&gt;"</span> sch-format))
<span class="linenr">32: </span>                    (org-back-to-heading)
<span class="linenr">33: </span>                    (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">34: </span>                    (replace-match sch-format-with-repeat)
<span class="linenr">35: </span>                    )
<span class="linenr">36: </span>                <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12364;&#35211;&#12388;&#12363;&#12387;&#12383;&#12425; +nd &#12398;&#36861;&#21152;</span>
<span class="linenr">37: </span>                (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s %s&gt;"</span> sch-format (concat <span style="color: #ffa07a;">"+"</span> (number-to-string next-diff) <span style="color: #ffa07a;">"d"</span>)))
<span class="linenr">38: </span>                (org-back-to-heading)
<span class="linenr">39: </span>                (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">40: </span>                (replace-match sch-format-with-repeat)
<span class="linenr">41: </span>                )
<span class="linenr">42: </span>              )
<span class="linenr">43: </span>        ))
<span class="linenr">44: </span>      ))
</pre>
</div>

<p>
タスクを DONE にしたときに自動で呼ばれるようにする. advice を使った.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">org-todo</span>(after my-org-diary-float-property-hook)
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((end   (my-org-get-end-head))
<span class="linenr">4: </span>         (elem  (org-element-headline-parser end t)))
<span class="linenr">5: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem) (my-org-diary-float-next-schedule-diff))
<span class="linenr">6: </span>      ))
<span class="linenr">7: </span>(ad-activate-regexp <span style="color: #ffa07a;">"my-org-diary-float-property-hook"</span>)
</pre>
</div>

<p>
とりあえずこれで望みの動きになった.<br />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isearch の改良]]></title>
    <link href="http://saito1369.github.io/blog/2017-09-04-164431.html"/>
    <updated>2017-09-04T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/164431</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. elisp プログラムの作成</a>
<ul>
<li><a href="#sec-3-1">3.1. 作成ほうしん</a></li>
<li><a href="#sec-3-2">3.2. パラメータ</a></li>
<li><a href="#sec-3-3">3.3. isearch-mode-hook</a></li>
<li><a href="#sec-3-4">3.4. isearch-mode-end-hook</a></li>
<li><a href="#sec-3-5">3.5. defadvice</a></li>
<li><a href="#sec-3-6">3.6. idive&#x2013;get-dive-file</a></li>
<li><a href="#sec-3-7">3.7. プログラム全体</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 反省点</a></li>
<li><a href="#sec-5">5. 参考文献</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-09-04 Mon 16:44&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 20:12&gt;</span></span><br />
</p>
<p>
emacs でメモを検索する isearch (Ctrl-s/Ctrl-r) にちょっと機能をついかしてみた.<br />
elisp の書き方はよくわかってないけど, 不安定ながらも動くものができたのでその記録を書いておく.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はここ何年か, ChangeLog メモという形式でメモを残している.<br />
最初に書いた日付を見てみたら 2003 年 10 月であった. なんと, 気づかないうちに 10 年以上も続いてることになるのか&#x2026;<br />
</p>

<p>
ChangeLog 上でのメモは, 短いメモを書くぶんには問題ないのだが, 少し長めのまとめ文書とかを書こうとするといまいちであった.<br />
長い文書では, 階層的な構造とか, 図とかを適宜文書の中に入れていきたいことがあるからである.<br />
</p>

<p>
この問題を解決するために, 私は <a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html</a> で示されている quasi-howm という方法を使っている.<br />
これを使うと, ChangeLog メモの中に, howm ファイルへのリンクを自動で作ってくれるのだ.<br />
これを使って, 私は ChangeLog では書きにくい長いまとめ文書などをこの howm ファイルの中に書いている.<br />
ChangeLog 上に howm へのリンクが張られるので, とりあえずポケット一つの原則は守られている(はず)ので安心だ.<br />
ちなみに私は org-mode の形式で howm メモを書いている.<br />
howm の機能はほぼ使っていないので, 今から考えると, 一定の場所へのリンクを自動で作ってくれれば何でもよかった感じだが, 今までずっと使ってきて慣れてるのでこの形式で書き続けている.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
私は ChangeLog メモを検索する際に, インクリメンタルサーチ (isearch. Ctrl-s/Ctrl-r) での検索をよく使う.<br />
私は基本残しておきたいことは全て ChangeLog メモに書くので, キーワードを覚えてれば ChangeLog ファイル上で Ctrl-s を使ってメモの該当ぶぶんを探し出し, その部分メモを見て思い出したりそこに書いてある URL に行ったりする.<br />
しかし最近, ChangeLog メモのどっかに書いてた筈なのにインクリメンタルサーチで探し出せないことが頻発してきた.<br />
キーワードも覚えられない程記憶力が死んできたのかとも考えましたがそーでもなさそうだ.<br />
よくよく調べてみると, ChangeLog メモには直接書いてないけど, howm(org-mode)の文書中にキーワードが書いてあった場合があって, その場合は当然のことながら ChangeLog ファイルのインクリメンタルサーチでは検索出来ないことがわかった.<br />
メモとして ChangeLog に書いてたつもりだったけど, 実際は howm(org-mode)のメモに書いていた. そのときのキーワードが ChangeLog ファイル内にあるかと思って探したけどなかった. 理由は探す所を間違ってたから. ほんとは howm(org-mode)のファイルの中を探さないといけない.<br />
そんな感じである.<br />
この状況も記憶力的にあんまり良くないような気もするのだが&#x2026;<br />
</p>

<p>
というわけで, インクリメンタルサーチで以下のようなことが出来ればいいんだけどなぁ&#x2026;<br />
ChangeLog ファイルをインクリメンタルサーチしたときに,<br />
</p>
<ol class="org-ol">
<li>ChangeLog 内に howm ファイルへのリンクが書いてあれば途中でそのファイルに立ち寄ってインクリメンタルサーチをする.<br />
</li>
<li>howm ファイルを探し終わったら ChangeLog ファイルに戻ってきて ChangeLog のその場所からのインクリメンタルサーチを再開.<br />
</li>
<li>1. に戻る.<br />
</li>
</ol>

<p>
図で描くと, 以下のような感じになります.<br />
</p>


<div class="figure">
<p><img src="dat/img/2017-09-04-164431-2017-09-04-164431.jpg" alt="2017-09-04-164431-2017-09-04-164431.jpg" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> elisp プログラムの作成</h2>
<div class="outline-text-2" id="text-3">
<p>
この問題を解決するために, まずは同じようなことでめんどくさがってる人がいないかどうかを探した.<br />
誰かやってる人いないかと思って色々検索してみたが, うまく見つけられなかった.<br />
こういうことやりたい人いないのかなぁ. 普通は何かもっと効率の良い方法でやるんだろうか？<br />
やってる人がいなさそうだったので, elisp プログラミングの勉強も兼ねて自分で作ってみることにした.<br />
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 作成ほうしん</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Ctrl-s を二回以上押下すると isearch-repeat という命令が動くっぽい.<br />
これの直前で(次の検索ワードへ移動する前に) howm ファイルがあるかどうかを探し, あればその buffer へ移動して検索を続けるようにする.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (before hogehoge activate)
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">1. &#27425;&#12398;&#26908;&#32034;&#12527;&#12540;&#12489;&#12434;&#25506;&#12375;&#12390;&#20301;&#32622;&#12434;&#35519;&#12409;&#12390;&#12362;&#12367;.</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">2. &#27425;&#12398; howm &#12501;&#12449;&#12452;&#12523;&#12398;&#12354;&#12426;&#12363;&#12434;&#25506;&#12375;&#12390;&#20301;&#32622;&#12434;&#35519;&#12409;&#12390;&#12362;&#12367;.</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">3. &#27425;&#12398; howm &#12398;&#12354;&#12426;&#12363; &gt; &#27425;&#12398; hogehoge &#12398;&#12354;&#12426;&#12363; &#12391;&#12354;&#12428;&#12400; howm &#12501;&#12449;&#12452;&#12523;&#12398;&#20013;&#12408;&#20837;&#12426;&#12381;&#12398;&#20013;&#12434;&#26908;&#32034;.</span>
)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> パラメータ</h3>
<div class="outline-text-3" id="text-3-2">
<p>
ChangeLog メモファイル以外でも一応出来るように, パラメータを設定出来るようにする.<br />
主なパラメータは以下の 4 つ(1 つは toggle によって制御することにした).<br />
</p>

<ol class="org-ol">
<li>母艦ファイル名(このファイルを Ctrl-s で検索すると, 書いてあるファイル名が存在すればそのファイルを訪れて検索を続ける)<br />
テキストファイルであれば何でもいい.<br />
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">ChangeLog &#12501;&#12449;&#12452;&#12523;&#12434;&#26908;&#32034;&#12377;&#12427;&#38555;&#12399;, &#12381;&#12371;&#12395;&#26360;&#12356;&#12390;&#12354;&#12427;&#12501;&#12449;&#12452;&#12523;&#12398;&#20013;&#12418;&#26908;&#32034;&#12377;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-fpath <span style="color: #ffa07a;">"/home/hoge/Memo/ChangeLog"</span>)
</pre>
</div>
</li>
<li>母艦ファイルに書いてあるファイル名のぱたーん<br />
どのような文字列パターンを読み取って訪れるファイル名を抽出するか?<br />
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">".howm" &#12392;&#12356;&#12358;&#25991;&#23383;&#21015;&#12434;&#25345;&#12388;&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#25277;&#20986;&#12375;&#12383;&#12356;&#22580;&#21512;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-patterns '(<span style="color: #ffa07a;">".howm"</span>))
</pre>
</div>
<p>
上で得られたファイル名(fname)から実在のファイル名への変換関数<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname &#12434;&#12381;&#12398;&#12414;&#12414;&#23455;&#22312;&#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#21517;&#12392;&#12377;&#12427;&#22580;&#21512;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--expand-file-name</span>(fname)
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (expand-file-name fname))
  (<span style="color: #20b2aa; font-weight: bold;">if</span> (file-exists-p fname) fname nil)   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#23384;&#22312;&#12375;&#12394;&#12369;&#12428;&#12400; nil &#12434;&#36820;&#12377;</span>
)
</pre>
</div>
</li>
<li>ファイル検索の方法<br />
ChangeLog の中に, 何度か同じファイル名が書いてある場合.<br />
ファイル名があればそのファイルの中に入って検索したいとき<br />
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p t)
</pre>
</div>
<p>
一度検索したファイルは検索しないとき.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p nil)
</pre>
</div>
</li>
<li>そもそもこの方式で isearch の機能拡張を使うかどーか.<br />
普通に検索したいときもあると思うので toggle 出来るようにしたい.<br />
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defvar</span> <span style="color: #9acd32;">idive-toggle</span> t)
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--toggle</span>()
  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
  (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-toggle (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-toggle nil)
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-toggle t)
    )
  (message <span style="color: #ffa07a;">"idive-toggle=%s"</span> idive-toggle)
  )
</pre>
</div>
<p>
こんな風に global 変数を気軽に使っていいんだろーかとも思うが, いい方法がわかんないのでとりあえずこれで.<br />
</p>
</li>
</ol>

<p>
上記 1. のパラメータを変更すれば特別な isearch をするファイル(母艦ファイル)名を変更できる.<br />
私の場合はここは ChangeLog ファイルを指定している.<br />
上記 2. のパラメータを変更すれば検索するファイル名の文字列パターンを変更できます.<br />
idive&#x2013;expand-file-name(fname) は文字列 fname から実際のファイル名への変換を行う関数です.<br />
例:<br />
  fname から決まった dir を追加してファイル名が完成する場合,<br />
  fhame = '2017-09-04-111111.howm' =&gt; '/home/saito1369/howm/2017/09/2017-09-04-111111.howm'<br />
  の対応を return する関数を書くことになる.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> isearch-mode-hook</h3>
<div class="outline-text-3" id="text-3-3">
<p>
iserach 開始の際にやることを hook で指定.<br />
新しい関数をつくって add-hook とやればいいらしい.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(add-hook'isearch-mode-hook 'idive--init)

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#38283;&#12356;&#12390;&#12356;&#12427; buffer &#12364;&#27597;&#33382;&#12391;&#12354;&#12428;&#12400;&#12381;&#12398;&#24460;&#33394;&#12293;&#12420;&#12427;.</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ChangeLog)&#12376;&#12419;&#12394;&#12369;&#12428;&#12400;&#12405;&#12388;&#12540;&#12395;&#12420;&#12427;.</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--init</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((cbuf  (current-buffer)))
    (<span style="color: #20b2aa; font-weight: bold;">when</span> (idive--mother-buffer-p)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">is-dive-mother-fname (&#27597;&#33382;)&#12398; buffer &#12434;&#25345;&#12387;&#12390;&#12362;&#12367;</span>
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-buffer cbuf)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26082;&#12395;&#38283;&#12356;&#12390;&#12356;&#12427; buffer &#12398; list &#12434; hash &#12391;&#12392;&#12427;.</span>
      (idive--get-hash-already-exist-buffers)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35370;&#21839;&#12375;&#12383; buffer &#12434;&#35352;&#37682;&#12377;&#12427;&#22580;&#25152;&#12434;&#21021;&#26399;&#21270;</span>
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-dived-files-hash (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
      )
    )
  )

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#38283;&#12356;&#12390;&#12427;&#12398;&#12364; mother-buffer &#12363;&#12393;&#12358;&#12363;&#12434;&#30906;&#35469;&#12377;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--mother-buffer-p</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((fpath nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> buffer-file-name (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath (expand-file-name buffer-file-name)))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> fpath idive-mother-fpath (string= fpath idive-mother-fpath))
        t
      nil)
    )
  )
</pre>
</div>

<p>
既に開いている buffer のリストを hash でとるのは,<br />
検索中に訪問するファイルが既に開いているのであればその buffer を開く, 開いてなければ検索終了後に buffer を削除するため.<br />
</p>

<p>
訪問した buffer を記録するのは, 一度訪問した buffer は訪問しないようにするため.<br />
(パラメータの項でも書いたが, 以下のように設定すれば何度も同じ buffer を訪問しないようにできる. この動作が default)<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p nil)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> isearch-mode-end-hook</h3>
<div class="outline-text-3" id="text-3-4">
<p>
isearch 終了の際にやること.<br />
使っていた global な一時変数を全部解放する.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch &#32066;&#20102;</span>
(add-hook 'isearch-mode-end-hook 'idive--reset)

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20197;&#19979;&#12398;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#12522;&#12475;&#12483;&#12488;&#12377;&#12427;.</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--reset</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ex. ChangeLog)&#12398; buffer</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-buffer nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26082;&#12395;&#35370;&#21839;&#12375;&#12383; buffers &#12398;&#12522;&#12473;&#12488;(hash)</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-dived-files-hash nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12434;&#34892;&#12358;&#21069;&#12363;&#12425;&#20803;&#12293;&#38283;&#12356;&#12390;&#12383; buffers</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-already-exist-hash nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35370;&#21839;&#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#12398;&#21517;&#21069;(&#19968;&#30058;&#37325;&#35201;&#12394;&#19968;&#26178;&#22793;&#25968;)</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20803;&#12398;&#26908;&#32034;&#35486;(isearch-string) &#12364;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12391;&#27425;&#12393;&#12371;&#12395;&#12354;&#12427;&#12363;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-next-point nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch-repeat &#30452;&#21069;&#12395;&#12356;&#12383;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-present-point nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch-string(&#26908;&#32034;&#35486;)&#12398;&#36864;&#36991;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-isearch-string nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#12363;&#12425;&#35370;&#21839;&#12377;&#12427; file &#21517;&#12364;&#26360;&#12356;&#12390;&#12354;&#12427;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point nil)
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> defadvice</h3>
<div class="outline-text-3" id="text-3-5">
<p>
プログラムの本体部分.<br />
isearch-repeat を行うタイミングで, howm ファイルを探す.<br />
条件に合う howm ファイルがあればそのファイルを訪れ検索する.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (around is-dive-isearch-repeat activate)
  <span style="color: #cd5c5c;">"Dive another buffer."</span>
  (<span style="color: #20b2aa; font-weight: bold;">if</span> (idive--mother-buffer-p) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#20869;&#12434;&#26908;&#32034;&#12375;&#12390;&#12356;&#12427;&#22580;&#21512;</span>
      (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
          (idive--dive-another-buffer)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#12354;&#12428;&#12400;&#12381;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#31227;&#21205; (isearch &#12399;&#23455;&#34892;&#12375;&#12394;&#12356;)</span>
        (idive--search-idive-fname)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#28961;&#12369;&#12428;&#12400;&#25506;&#12375;&#12390;</span>
        ad-do-it                        <span style="color: #cd853f;">;;             </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
        )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12375;&#12390;&#12356;&#12427;&#12501;&#12449;&#12452;&#12523;&#12364;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12391;&#12394;&#12356;&#22580;&#21512;</span>
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12434;&#35370;&#21839;&#12375;&#12390;&#12356;&#12390; &#26908;&#32034;&#12364;&#32066;&#12431;&#12387;&#12383;&#22580;&#21512;&#12399;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12395;&#25147;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (idive--another-buffer-p) (not isearch-success))
        (idive--return-mother))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
    ad-do-it
    )
  )
</pre>
</div>

<p>
idive-toggle 変数を後で追加したので結局は以下のようになる.<br />
条件を色々考えるのが面倒なので上から被せている.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (around isearch-repeat-idive-ad activate)
  <span style="color: #cd5c5c;">"Dive another buffer."</span>
  (<span style="color: #20b2aa; font-weight: bold;">when</span> idive-toggle
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (idive--mother-buffer-p) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">mother file &#12398;&#26908;&#32034;&#12398;&#22580;&#21512;</span>
        (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
            (idive--dive-another-buffer)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#12354;&#12428;&#12400;&#12381;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#31227;&#21205; (isearch &#23455;&#34892;&#12375;&#12394;&#12356;)</span>
          (idive--search-idive-fname)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#28961;&#12369;&#12428;&#12400;&#25506;&#12375;&#12390;</span>
          ad-do-it                        <span style="color: #cd853f;">;;             </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
          )
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">mother file &#12391;&#12394;&#12356;&#22580;&#21512;</span>
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12434;&#35370;&#21839;&#12375;&#12390;&#12356;&#12390; &#26908;&#32034;&#12364;&#32066;&#12431;&#12387;&#12383;&#22580;&#21512;&#12399; mother &#12395;&#25147;&#12427;</span>
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (idive--another-buffer-p) (not isearch-success))
          (idive--return-mother)
        <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12381;&#12358;&#12391;&#12394;&#12369;&#12428;&#12400; isearch &#12434;&#23455;&#34892;(&#26222;&#36890;&#12399;&#12371;&#12371;&#12364;&#21205;&#12367;)</span>
        ad-do-it
        )
      )
    )
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12420;&#12425;&#12394;&#12356;&#12392;&#12365;</span>
  (<span style="color: #20b2aa; font-weight: bold;">unless</span> idive-toggle ad-do-it)
  )
</pre>
</div>

<p>
idive-fname は ChangeLog ファイル(母艦ファイル)上にある howm ファイル名を示す.<br />
ここに値が入ってなければ, あるかどうかを探す.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--search-idive-fname</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#12398;&#27597;&#33382;&#19978;&#12398;&#22580;&#25152;&#12434;&#20445;&#23384;&#12377;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-present-point (point))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015;&#12434;&#20803;&#12293;&#12398;&#12418;&#12398;&#12395;&#25147;&#12375;&#12390;&#12362;&#12367;(isearch-string)</span>
  (idive--return-isearch-string)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12375;&#12390;&#27425;&#12398;&#22580;&#25152;&#12434;&#20445;&#23384;&#12375;&#12390;&#12362;&#12367;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-next-point (idive--get-next-point isearch-string nil))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#19978;&#12398;&#22580;&#25152;&#12434;&#19968;&#26086;&#20803;&#12395;&#25147;&#12377;</span>
  (idive--goto-char)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#29694;&#22312;&#12398;&#22580;&#25152;(idive-present-point) - idive-next-point &#20869;&#12395; idive-fname(howm &#12501;&#12449;&#12452;&#12523;)&#12364;&#12354;&#12427;&#12363;&#12393;&#12358;&#12363;&#12434;&#35519;&#12409;&#12427;</span>
  (idive--get-dive-file)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12418;&#12375; idive-fname &#12364;&#12354;&#12428;&#12400;, &#19968;&#26178;&#30340;&#12395;&#26908;&#32034;&#25991;&#23383;&#21015;&#12434; idive-fname &#12395;&#22793;&#26356;&#12377;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">when</span> idive-fname
      (idive--change-isearch-string)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#20301;&#32622;&#12398;&#35519;&#25972;</span>
      (goto-char (<span style="color: #20b2aa; font-weight: bold;">if</span> isearch-forward (- idive-fname-point (length isearch-string))
                   (+ idive-fname-point (length isearch-string))))
    )
  )
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--get-next-point</span>(str end)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((pnt nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> migemo-isearch-enable-p
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> pnt (migemo-forward str end t (idive--isdir)))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> (search-forward str end t (idive--isdir)))
      )
    png
    )
  )
</pre>
</div>

<p>
idive-fname があればそのファイルを訪問する.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--dive-another-buffer</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ex. ChangeLog &#12501;&#12449;&#12452;&#12523;)&#20869;&#12434;&#31227;&#21205;&#12377;&#12427;</span>
  (idive--get-next-point idive-fname idive-next-point)
  <span style="color: #cd853f;">;;</span>
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dive into the file (idive-fname)</span>
  <span style="color: #cd853f;">;;</span>
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12434;&#38283;&#12367;</span>
  (find-file (idive--expand-file-name idive-fname))
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015;&#12434;&#20803;&#12395;&#25147;&#12377;</span>
  (idive--return-isearch-string)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">isearch-forward &#12398;&#20516;&#12395;&#24540;&#12376;&#12390;&#12501;&#12449;&#12452;&#12523;&#12398;&#20808;&#38957;&#12354;&#12427;&#12356;&#12399;&#26368;&#24460;&#12395;&#31227;&#21205;&#12377;&#12427;</span>
  (goto-char (<span style="color: #20b2aa; font-weight: bold;">if</span> isearch-forward (point-min) (point-max)))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19968;&#12388;&#12418;&#35211;&#12388;&#12363;&#12425;&#12394;&#12356;&#12456;&#12521;&#12540;&#12364;&#20986;&#12427;&#12398;&#12391;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> isearch-case-fold-search t)
  )
</pre>
</div>

<p>
idive-fname を訪問し終わったら母艦ファイルに戻る<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--return-mother</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#38283;&#12356;&#12390;&#12427; buffer &#12434;&#38281;&#12376;&#12427;(&#12418;&#12375;&#20803;&#12363;&#12425;&#38283;&#12356;&#12390;&#12394;&#12369;&#12428;&#12400;)</span>
  (idive--kill-buffer-not-already-exist)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015; isearch-string &#12434; idive-fname &#12395;&#12375;&#12390;</span>
  (idive--change-isearch-string)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">idive-fname &#12399;&#26410;&#23450;&#32681;&#12395;&#12375;&#12390;&#12362;&#12367;.</span>
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#12371;&#12428;&#12391;&#12371;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#38306;&#12375;&#12390;&#12398;&#25506;&#32034;&#12434;&#32066;&#20102;&#12373;&#12379;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12395;&#25147;&#12427;</span>
  (switch-to-buffer idive-mother-buffer)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#24565;&#12398;&#12383;&#12417;</span>
  (goto-char idive-fname-point)
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point nil)
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> idive&#x2013;get-dive-file</h3>
<div class="outline-text-3" id="text-3-6">
<p>
現在の場所から次にキーワードが見つかった場所の間に idive-fname (howm ファイル名) があるかどうかを調べる.<br />
一番めんどくさい部分.<br />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--get-dive-file</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((suffs       idive-fname-patterns)
        (sff         nil)
        (dpoint      nil)
        (fname       nil)
        (fpath       nil)
        (dive-points (list)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#37197;&#21015;&#12398;&#23450;&#32681;</span>
        (fhash       (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
        (dhash       (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
        (dp          nil)
        (fnames      (list))
        (rep         nil)
        )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#21021;&#26399;&#21270;</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
      (<span style="color: #20b2aa; font-weight: bold;">while</span> suffs
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> sff (car suffs))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> rep t)
        (<span style="color: #20b2aa; font-weight: bold;">while</span> rep
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> dpoint (idive--get-next-point sff idive-next-point))
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath nil)
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname nil)
          (<span style="color: #20b2aa; font-weight: bold;">when</span> dpoint <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12387;&#12383;&#12425;</span>
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file &#21517;&#12398;&#21462;&#12426;&#20986;&#12375;</span>
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (thing-at-point 'filename))
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fpath (&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12394;&#12369;&#12428;&#12400; nil &#12364;&#36820;&#12427;)</span>
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath (idive--expand-file-name fname))
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file &#12364;&#23384;&#22312;&#12375;&#12390;, &#12414;&#12384;&#38283;&#12356;&#12390;&#12356;&#12394;&#12356;&#12392;&#12365;</span>
            (<span style="color: #20b2aa; font-weight: bold;">when</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> fpath (not (gethash fpath idive-dived-files-hash)))
              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dpoint &#12434; push &#12377;&#12427;</span>
              (<span style="color: #20b2aa; font-weight: bold;">push</span> dpoint dive-points)
              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dpoint =&gt; fname</span>
              (puthash dpoint fname  fhash)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fhash[dpoint] =fname</span>
              (<span style="color: #20b2aa; font-weight: bold;">unless</span> (gethash fname dhash)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26368;&#21021;&#12395;&#20986;&#12390;&#12365;&#12383; fname &#12398;&#22580;&#25152;&#12434;&#35352;&#37682;&#12375;&#12390;&#12362;&#12367;</span>
                (puthash fname  dpoint dhash))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dhash[fname]  =dpoint</span>
              )
            )
          (<span style="color: #20b2aa; font-weight: bold;">unless</span> dpoint (<span style="color: #20b2aa; font-weight: bold;">setq</span> rep nil))
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#31777;&#26131;&#29256;: &#12501;&#12449;&#12452;&#12523;&#12398;&#25506;&#32034;&#12434;&#26368;&#12418; idive--isdir &#26041;&#21521;&#12391;&#26368;&#12418;&#36817;&#12356;&#19968;&#22238;&#12391;&#32066;&#12431;&#12425;&#12379;&#12427;</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(==&gt; &#12381;&#12398;&#20195;&#12431;&#12426; idive--filtered &#12434;&#12363;&#12369;&#12394;&#12356;)</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20197;&#19979;&#12434;&#12467;&#12513;&#12531;&#12488;&#12450;&#12454;&#12488;&#12377;&#12428;&#12400;  idive-present-point &#12363;&#12425; idive-next-point</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12414;&#12391;&#12395;&#12354;&#12427;&#20840;&#12390;&#12398;&#12501;&#12449;&#12452;&#12523;&#12398;&#26908;&#32034;&#12434;&#34892;&#12358; =&gt; &#31684;&#22258;&#12364;&#24195;&#12369;&#12428;&#12400;&#32080;&#27083;&#26178;&#38291;&#12364;&#12363;&#12363;&#12427;&#12371;&#12392;&#12418;&#12354;&#12427;.</span>
          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq rep nil)</span>
          )
        (idive--goto-char)
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> suffs (cdr suffs))
        )
      )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= (idive--isdir)  1) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (sort dive-points '&lt;)))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= (idive--isdir) -1) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (sort dive-points '&gt;)))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#21517;&#12398;&#12522;&#12473;&#12488;&#12434;&#12388;&#12367;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">while</span> dive-points
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> dp          (car dive-points))
      (<span style="color: #20b2aa; font-weight: bold;">push</span> (gethash dp fhash) fnames)
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (cdr dive-points))
      )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">filter &#12434;&#12363;&#12369;&#12427;&#22580;&#21512;(&#26908;&#32034;&#25991;&#23383;&#21015;&#12364;&#28961;&#12356;&#12501;&#12449;&#12452;&#12523;&#12399;&#38283;&#12363;&#12394;&#12356;)</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname (idive--filtered fnames))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12418;&#12375; idive-fname &#12364;&#12354;&#12428;&#12400;, fname &#12398;&#22580;&#25152;&#12434;&#30906;&#20445;&#12375;&#12390;&#12362;&#12367;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point (gethash idive-fname dhash)))
    <span style="color: #cd853f;">; </span><span style="color: #cd853f;">filter &#12434;&#12363;&#12369;&#12394;&#12356;&#22580;&#21512;&#12399;&#20197;&#19979;</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq idive-fname (car fnames))</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12371;&#12371;&#12391; dive &#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#12434;&#30331;&#37682;&#12377;&#12427;</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(idive-visit-dived-file-p &#12364; t &#12394;&#12425;&#12400;&#30331;&#37682;&#12375;&#12394;&#12356;)</span>
    (<span style="color: #20b2aa; font-weight: bold;">unless</span> idive-visit-dived-file-p
      (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
          (puthash (idive--expand-file-name idive-fname) t idive-dived-files-hash)))
    )
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> プログラム全体</h3>
<div class="outline-text-3" id="text-3-7">
<p>
いちおう以下に置いておく.<br />
<a href="https://github.com/saito1369/isearch-dive">https://github.com/saito1369/isearch-dive</a><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 反省点</h2>
<div class="outline-text-2" id="text-4">
<p>
自分で使ってる分には今のところ問題なさそうだが, エラーが出る度に勉強しながら継ぎ足しつぎたしで書いてきたので, もうなんか最初から書き直した方がいいような.<br />
そんな気分.<br />
限定された使い方ではうまく動いてるように見えるけど, 色々と危ういことをやってそうな雰囲気でいきなり動かなくなりそう.<br />
isearch の仕組みがよくわかってないまま作ってるので, もう少しきちんと調べてからやればよかったかもしれない.<br />
特に isearch-なんとか という変数の使い方とか.<br />
  isearch-string<br />
  isearch-success<br />
  isearch-forward<br />
  isearch-case-fold-search<br />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考文献</h2>
<div class="outline-text-2" id="text-5">
<p>
Unix のメモ技術<br />
<a href="http://0xcc.net/unimag/1/">http://0xcc.net/unimag/1/</a><br />
</p>

<p>
ChangeLog メモを試してみよう<br />
<a href="https://at-aka.blogspot.jp/p/change-log.html">https://at-aka.blogspot.jp/p/change-log.html</a><br />
</p>

<p>
私の ChangeLog メモ活用法<br />
<a href="http://ta2o.net/doc/zb/0016.html">http://ta2o.net/doc/zb/0016.html</a><br />
</p>

<p>
ChangeLog メモで Howm を使う quasi-howm<br />
<a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html</a><br />
</p>

<p>
Automatically wrapping I-search?<br />
<a href="https://stackoverflow.com/questions/285660/automatically-wrapping-i-search">https://stackoverflow.com/questions/285660/automatically-wrapping-i-search</a><br />
</p>

<p>
"1 of n" result for Emacs search - Stack Overflow<br />
<a href="https://stackoverflow.com/questions/14764130/1-of-n-result-for-emacs-search">https://stackoverflow.com/questions/14764130/1-of-n-result-for-emacs-search</a><br />
</p>

<p>
ace-isearch : isearch、ace-jump-mode、avy、helm-swoopを滑らかに統合 - Qiita<br />
<a href="http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c">http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c</a><br />
</p>

<p>
emacs: interactively search open buffers<br />
<a href="https://stackoverflow.com/questions/2641211/emacs-interactively-search-open-buffers">https://stackoverflow.com/questions/2641211/emacs-interactively-search-open-buffers</a><br />
</p>

<p>
ace-jump-modeの紹介 - syohex’s diary<br />
<a href="http://syohex.hatenablog.com/entry/20120304/1330822993">http://syohex.hatenablog.com/entry/20120304/1330822993</a><br />
</p>

<p>
画面内を素早くカーソル移動する方法のまとめ - Qiita<br />
<a href="http://qiita.com/ballforest/items/834c92bf5bf262c37973">http://qiita.com/ballforest/items/834c92bf5bf262c37973</a><br />
</p>

<p>
Emacs Lisp 関数のアドバイス<br />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_17.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_17.html</a><br />
<a href="http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_17.html">http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_17.html</a><br />
</p>

<p>
Emacs Lisp 基礎文法最速マスター<br />
<a href="http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax">http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax</a><br />
</p>

<p>
Emacs Lisp でスクリプト処理<br />
<a href="http://dev.ariel-networks.com/articles/software-design-200802/elisp-scripting/">http://dev.ariel-networks.com/articles/software-design-200802/elisp-scripting/</a><br />
</p>

<p>
正規表現の検索<br />
<a href="http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html">http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html</a><br />
</p>

<p>
バッファファイル名<br />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html</a><br />
</p>

<p>
リストと連想配列 - 環境設定のための Emacs Lisp 入門 | プログラマーズ雑記帳<br />
<a href="http://yohshiy.blog.fc2.com/blog-entry-269.html">http://yohshiy.blog.fc2.com/blog-entry-269.html</a><br />
</p>

<p>
7.1. Creating Hash Tables<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#Creating-Hash">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#Creating-Hash</a><br />
</p>

<p>
re-search-forward<br />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/re_002dsearch_002dforward.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/re_002dsearch_002dforward.html</a><br />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_34.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_34.html</a><br />
<a href="http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html">http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html</a><br />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_552.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_552.html</a><br />
</p>

<p>
2.4. ファイル<br />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html</a><br />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html</a><br />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_27.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_27.html</a><br />
</p>

<p>
エラー(制御構造)<br />
<a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_104.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_104.html</a><br />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thing-at-point を応用したファイルの検索]]></title>
    <link href="http://saito1369.github.io/blog/2017-06-01-134010.html"/>
    <updated>2017-06-01T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/134010</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. 解決策</a></li>
<li><a href="#sec-4">4. elisp プログラム</a></li>
<li><a href="#sec-5">5. 使い方例</a></li>
<li><a href="#sec-6">6. elisp 書き方めも</a></li>
<li><a href="#sec-7">7. 参照 URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2016-06-28 Tue 13:40&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-21 Wed 20:51&gt;</span></span><br />
</p>
<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はここ 10 年ほど, 普段の業務日誌を ChangeLog メモで書いている.<br />
シンプルな形式なので自分で色々加工が出来るし, 1 ファイルなので管理も楽で気にいっている.<br />
一時期 org-mode でメモをとろうかなと思って色々やってみたこともあったが, 結局続かなかった.<br />
自分にとって, やっぱり母艦となるメモは 1 つのファイルにしておくのが性にあってると思った.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
メモは 1 つのファイルが良いとは言え, 作業自身はいろんなところでやるわけで, その場所を忘れないように書いておくことがある.<br />
あるいは「メモ」では書ききれない「文書」を org-mode 等で書いてその場所を書いておくこともある.<br />
以下のような感じである.<br />
</p>

<div class="org-src-container">
<label class="org-src-name">ある日の ChangeLog めも</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * 設定 elisp の変更 [elisp][setup]: find-file
   (file: ~/.emacs.d/inits/51-file.el)
   上記ファイルを変更して fugafuga 出来るようにした.

   * hogehoge 開発 [log]: 進捗確認
   (file: /work/foo/bar/hogehoge.py)

   * ○○の改善案 [foo][log]: 文書下書きの作成
   (file: /work/doc/2016/foo.org)
   あす 4 章目の修正を行う.
   文字数のチェック.
</pre>
</div>

<p>
作成したファイルのある場所を書いておくことで, 作業場所を確認すると共に必要なファイルをさっさと取り出すことが出来る.<br />
ここから M-x find-file-at-point で直接ファイルが開ける.<br />
</p>

<p>
例えば hogehoge.pl というプログラムを書いたらその場所をメモしておく.<br />
</p>
<label class="org-src-name">ファイルのありかを確認する筆者</label><pre class="example">
$: pwd
   /work/theme/
$: ls
   hogehoge.pl
</pre>

<div class="org-src-container">
<label class="org-src-name">hogehoge.pl の場所を ChangeLog に抜かりなくメモる筆者</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * theme 開発 [log]: 一応完成
   (file: /work/theme/hogehoge.pl)
</pre>
</div>

<p>
しかし私の場合, ファイルのパスは結構変わることも多いのだ.<br />
例えば, 最初は場所として /work/theme で問題なかったものの,<br />
後日 version2 のデータがやってきたので<br />
最初のやつは version1 以下に置いておきたい, ということがあったり.<br />
</p>

<p>
version1 のデータ用プログラム hogehoge.pl は version1 という directory を作ってそこに入れとこう.<br />
</p>
<label class="org-src-name">version01 ディレクトリを作ってそこにプログラムを移動する筆者</label><pre class="example">
$: pwd
   /work/theme/
$: mkdir version01
$: mv hogehoge.pl version01/
</pre>

<p>
パスが変わってしまうと, ChangeLog との整合性が保てなくなってしまう！！<br />
directory の構成を変える度に一々 ChangeLog の該当部分を探して修正をするのはめんどくさすぎるし.<br />
</p>
<div class="org-src-container">
<label class="org-src-name">ファイルのあるパスが変わってしまい整合性がとれなくなってしまったメモファイル</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * theme 開発 [log]: 一応完成
   (file: /work/theme/hogehoge.pl)
</pre>
</div>

<p>
どーしたらいいんだろう&#x2026;<br />
と思って色々探してみましたが問題を解決してくれそーなプログラムは落ちてないようだった.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 解決策</h2>
<div class="outline-text-2" id="text-3">
<p>
ファイルを移動したらそれに連動して ChangeLog のリンクの内容を変える.<br />
そんな魔法のようなことが出来れば超ナイスなのだが,<br />
やっぱ無理っぽいんじゃないかなぁと思ったので,<br />
以下のように動くプログラムを作ることでお茶を濁すことにする.<br />
</p>

<ol class="org-ol">
<li>ChangeLog のリンク部分からパスを抽出し, その存在をチェックする.<br />
</li>
<li>抽出したパスにファイルが存在すればファイルの存在を示して終了する.<br />
</li>
<li>無ければその近辺のディレクトリを探して同名のファイルがあるかどうか検索.<br />
</li>
<li>同名のファイルがあればそのパスに ChangeLog を書き換える.<br />
</li>
</ol>
<p>
注: ChangeLog めも上じゃなくても使えるようにしたい.<br />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> elisp プログラム</h2>
<div class="outline-text-2" id="text-4">
<p>
ChangeLog 上に書いてあるファイルが無ければその近辺の dir を探して,<br />
同名のファイルを探してくれる elisp プログラムを色々調べながらつくってみた.<br />
以下の 3 つの関数を導入する.<br />
ChangeLog 上じゃなくても動くかと思う.<br />
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span>(ffap-bindings)
<span class="linenr"> 2: </span><span style="color: #cd853f;">; </span><span style="color: #cd853f;">main function</span>
<span class="linenr"> 3: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">search-file-at-point-with-dir-search</span>()
<span class="linenr"> 4: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
<span class="linenr"> 6: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#19978;&#12398;&#12501;&#12449;&#12452;&#12523;&#21517;&#12425;&#12375;&#12365;&#25991;&#23383;&#21015;&#12434;&#12392;&#12427;</span>
<span class="linenr"> 7: </span>         (my-path  (thing-at-point 'filename))           <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname with dir</span>
<span class="linenr"> 8: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(&#26368;&#21021;&#12398;&#20301;&#32622;, &#26368;&#24460;&#12398;&#20301;&#32622;)&#12434;&#12522;&#12473;&#12488;&#12391;&#21462;&#24471;</span>
<span class="linenr"> 9: </span>         (bounds   (bounds-of-thing-at-point 'filename))
<span class="linenr">10: </span>         (my-dir   nil)
<span class="linenr">11: </span>         (my-pdir  nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; directory</span>
<span class="linenr">12: </span>         (my-fname nil)
<span class="linenr">13: </span>         (stt      nil)
<span class="linenr">14: </span>         (end      nil)
<span class="linenr">15: </span>         )
<span class="linenr">16: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> stt      (car bounds))
<span class="linenr">17: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> end      (cdr bounds))
<span class="linenr">18: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-dir   (file-name-directory    my-path)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dir name</span>
<span class="linenr">19: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-fname (file-name-nondirectory my-path)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file name</span>
<span class="linenr">20: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "my-path =%s" my-path))</span>
<span class="linenr">21: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; dir &#12391;&#12418;&#26908;&#32034;(dir &#12364;&#20108;&#12388;&#12378;&#12428;&#12390;&#12427;&#12392;&#12365;&#12418;&#23550;&#20966;&#12377;&#12427;&#12424;&#12358;&#12395;</span>
<span class="linenr">22: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-pdir  (file-name-directory    (directory-file-name my-dir)))
<span class="linenr">23: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "my-path =%s" my-path))</span>
<span class="linenr">24: </span>    (<span style="color: #20b2aa; font-weight: bold;">cond</span>
<span class="linenr">25: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12390;&#12428;&#12400;&#38283;&#12367;</span>
<span class="linenr">26: </span>     <span style="color: #cd853f;">;</span><span style="color: #cd853f;">((file-exists-p    my-path) (find-file my-path))</span>
<span class="linenr">27: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12420;&#12387;&#12401;&#38283;&#12367;&#12398;&#12399;&#12420;&#12417;&#12390;&#23384;&#22312;&#12434;&#20027;&#24373;&#12375;&#12390;&#32066;&#20102;</span>
<span class="linenr">28: </span>     ((file-exists-p    my-path) (message <span style="color: #ffa07a;">"file %s exists"</span> my-path))
<span class="linenr">29: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12390;&#12394;&#12367;&#12390; dir &#12364;&#12354;&#12428;&#12400;&#26908;&#32034;</span>
<span class="linenr">30: </span>     ((file-directory-p my-dir)  (my-search-path-file my-dir  my-fname stt end))
<span class="linenr">31: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">my-dir &#12364;&#23384;&#22312;&#12375;&#12390;&#12394;&#12367;&#12390;&#12418;&#12418;&#12358;&#23569;&#12375;&#38929;&#24373;&#12427;. &#35242; dir &#12364;&#12354;&#12428;&#12400;&#26908;&#32034;&#12434;&#12377;&#12427;.</span>
<span class="linenr">32: </span>     ((file-directory-p my-pdir) (my-search-path-file my-pdir my-fname stt end))
<span class="linenr">33: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; dir &#12418;&#23384;&#22312;&#12375;&#12390;&#12394;&#12369;&#12428;&#12400;&#35558;&#12417;&#12390;&#35430;&#21512;&#32066;&#20102;</span>
<span class="linenr">34: </span>     (t (message <span style="color: #ffa07a;">"dir %s is not found"</span> my-dir))
<span class="linenr">35: </span>     )
<span class="linenr">36: </span>    )
<span class="linenr">37: </span>  )
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-search-path-file</span>(my-dir my-fname stt end)
<span class="linenr"> 2: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((files    nil)
<span class="linenr"> 3: </span>        (fpath    nil)
<span class="linenr"> 4: </span>        (maxdepth nil)
<span class="linenr"> 5: </span>        (home-dir (substitute-in-file-name <span style="color: #ffa07a;">"$HOME"</span>)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">see clmemo.el</span>
<span class="linenr"> 6: </span>        )
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35519;&#26619;&#12377;&#12427; dir &#12398;&#28145;&#12373;&#12434; minifuffer &#12363;&#12425;&#20837;&#12428;&#12383;&#12369;&#12428;&#12400;</span>
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq maxdepth (string-to-number (read-string "depth:" "3" nil "3")))</span>
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> maxdepth 3)
<span class="linenr">10: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26465;&#20214;&#12395;&#12354;&#12358;&#12501;&#12449;&#12452;&#12523;&#12434;&#12522;&#12473;&#12488;&#12391;&#21462;&#12426;&#20986;&#12377;</span>
<span class="linenr">11: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> files    (directory-files-recursive my-dir my-fname maxdepth nil))
<span class="linenr">12: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26368;&#21021;&#12398;&#12501;&#12449;&#12452;&#12523;&#12434;&#21462;&#12426;&#20986;&#12375;&#12390;, $HOME -&gt; "~" &#12395;&#22793;&#26356;</span>
<span class="linenr">13: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath    (replace-regexp-in-string home-dir <span style="color: #ffa07a;">"~"</span> (car files)))
<span class="linenr">14: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26360;&#12365;&#30452;&#12375;</span>
<span class="linenr">15: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr">16: </span>      (delete-region stt end)
<span class="linenr">17: </span>      (goto-char stt)
<span class="linenr">18: </span>      (insert fpath)
<span class="linenr">19: </span>      )
<span class="linenr">20: </span>    )
<span class="linenr">21: </span>  )
</pre>
</div>

<p>
directory-files-recursive は以下の URL から拾ってきた.<br />
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">Recursively listing directories in elisp - turingMachine</span>
<span class="linenr"> 2: </span><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html</span>
<span class="linenr"> 3: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">directory-files-recursive</span>(directory match maxdepth ignore)
<span class="linenr"> 4: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((files-list '())
<span class="linenr"> 5: </span>         (current-directory-list (directory-files directory t))
<span class="linenr"> 6: </span>         )
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">while we are in the current directory</span>
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">while</span> current-directory-list
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">let</span> ((f (car current-directory-list)))
<span class="linenr">10: </span>        (<span style="color: #20b2aa; font-weight: bold;">cond</span>
<span class="linenr">11: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">12: </span>           ignore <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">make sure it is not nil</span>
<span class="linenr">13: </span>           (string-match ignore f))
<span class="linenr">14: </span>           <span style="color: #cd853f;">; </span><span style="color: #cd853f;">ignore</span>
<span class="linenr">15: </span>          nil
<span class="linenr">16: </span>          )
<span class="linenr">17: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">18: </span>           (file-regular-p f)
<span class="linenr">19: </span>           (file-readable-p f)
<span class="linenr">20: </span>           (string-match match f))
<span class="linenr">21: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> files-list (cons f files-list))
<span class="linenr">22: </span>          )
<span class="linenr">23: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">24: </span>           (file-directory-p f)
<span class="linenr">25: </span>           (file-readable-p f)
<span class="linenr">26: </span>           (not (string-equal <span style="color: #ffa07a;">".."</span> (substring f -2)))
<span class="linenr">27: </span>           (not (string-equal <span style="color: #ffa07a;">"."</span> (substring f -1)))
<span class="linenr">28: </span>           (&gt; maxdepth 0))
<span class="linenr">29: </span>          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">recurse only if necessary</span>
<span class="linenr">30: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> files-list (append files-list (directory-files-recursive f match (- maxdepth -1) ignore)))
<span class="linenr">31: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq files-list (cons f files-list))</span>
<span class="linenr">32: </span>          )
<span class="linenr">33: </span>         (t)
<span class="linenr">34: </span>         )
<span class="linenr">35: </span>        )
<span class="linenr">36: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> current-directory-list (cdr current-directory-list))
<span class="linenr">37: </span>      )
<span class="linenr">38: </span>    files-list
<span class="linenr">39: </span>    )
<span class="linenr">40: </span>  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 使い方例</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<label class="org-src-name">ChangeLog メモに書いてある file のありか(既にここにはないんだけど)</label>
<pre class="src src-mac">(file: /work/theme/hogehoge.pl)
</pre>
</div>
<p>
パス名がある場所にカーソルがある状態で M-x search-file-at-point-with-dir-search<br />
もしファイルがあれば "/work/theme/hogehoge.el exists." というメッセージを書いて終わる.<br />
無ければ周辺の dir を探して hogehoge.pl が存在すれば<br />
</p>
<div class="org-src-container">
<label class="org-src-name">修正後</label>
<pre class="src src-mac">(file: /work/theme/version1/hogehoge.pl)
</pre>
</div>
<p>
のようにメモを書き換えてくれます.<br />
探しても無ければ "not found" と書いて何もしません(のでその場合は手動で何とかするしかない&#x2026;).<br />
</p>

<p>
注意点: dir を探して最初に見つかった hogehoge.pl の場所を返す仕様になっている.<br />
/work/theme/version0/hogehoge.pl とか /work/theme/version1/hogehoge.pl とかがある場合は, 実際には一意に特定出来ていない.<br />
先に見つかった方を書き出す.<br />
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> elisp 書き方めも</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">
<label class="org-src-name">親 dir を取得</label>
<pre class="src src-emacs-lisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> pdir (file-name-directory (directory-file-name dir)))
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dir                   = /foo/bar/hoge/</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/hoge         = (directory-file-name dir)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/             = (file-name-directory "/foo/bar/hoge")</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">minibuffer から入れた文字列を数値へ変更する</label>
<pre class="src src-emacs-lisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> hoge (read-string <span style="color: #ffa07a;">"prompt:"</span> default&#20516; nil &#20309;&#12418;&#20837;&#12428;&#12394;&#12363;&#12383;&#12392;&#12365;&#12398;&#20516;))
(<span style="color: #20b2aa; font-weight: bold;">setq</span> num  (string-to-number hoge)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25968;&#20516;&#12395;&#12377;&#12427;</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">カーソルにある文字列を取得</label>
<pre class="src src-emacs-lisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(file: /work/theme/hogehoge.pl)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">'filename &#12395;&#12377;&#12427;&#12392;, &#26368;&#24460;&#12398; ")" &#12399;&#12392;&#12387;&#12390;&#12356;&#12356;&#24863;&#12376;&#12391;&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#21462;&#12426;&#20986;&#12379;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span>    st  (thing-at-point           'filename))
(<span style="color: #20b2aa; font-weight: bold;">setq</span> bounds (bounds-of-thing-at-point 'filename))
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">ffap-file-at-point で文字列を取得する際には, ファイルの存在を確認している.</label>
<pre class="src src-emacs-lisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#12399; /foo/bar/hoge/file.pptm &#12398;&#19978;&#12395;&#12354;&#12387;&#12390;,</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/hoge &#20197;&#19979;&#12395;&#12399;&#23455;&#38555;&#12399; file.pptm &#12392;&#12356;&#12358;&#12501;&#12449;&#12452;&#12523;&#12364;&#28961;&#12356;&#22580;&#21512;&#12395;&#12399;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (ffap-file-at-point))
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname="/foo/bar/hoge/" &#12392;&#12394;&#12427;.</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">リスト dir-list を書き出したいときは, そのまま書き出せばよい.</label>
<pre class="src src-emacs-lisp">(message <span style="color: #ffa07a;">"%s"</span> dir-list)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参照 URL</h2>
<div class="outline-text-2" id="text-7">
<p>
ChangeLog memo<br />
<a href="http://0xcc.net/unimag/1/">横着プログラミング 第1回: Unixのメモ技術</a><br />
<a href="http://masui.org.s3.amazonaws.com/6/4/64dbe7ef223e73dc9eec1805dd514353.pdf">ChangeLogメモによる自分データベースの構築</a><br />
clmemo<br />
<a href="https://at-aka.blogspot.jp/p/change-log.html">clmemo@aka: Change Log メモを試してみよう</a><br />
chalow<br />
<a href="http://chalow.org/">chalow - CHAngeLog On the Web</a><br />
<a href="http://chalow.net/">たつをの ChangeLog</a><br />
quasi-howm<br />
<a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">clmemo@aka: ChangeLog メモで Howm を使う quasi-howm |ChangeLogメモ|Howm|Emacs|</a><br />
私は大きなメモは quasi-howm を利用して書いてます<br />
(howm の中で org-mode 形式でかいています. howm の機能はほとんど使ってません).<br />
</p>

<p>
emacs-lisp 関連<br />
ディレクトリ上位方向へ進む際のイディオム - syohex’s diary<br />
(url: <a href="http://syohex.hatenablog.com/entry/20121008/1349681293">http://syohex.hatenablog.com/entry/20121008/1349681293</a>)<br />
GNU Emacs Lispリファレンスマニュアル: String Conversion<br />
(url: <a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_76.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_76.html</a>)<br />
GNU Emacs Lispリファレンス・マニュアル: 27. 位置<br />
(url: <a href="http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_29.html">http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_29.html</a>)<br />
GNU Emacs Lisp Reference Manual - ファイルに関する情報<br />
(url: <a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html</a>)<br />
再帰的に file を探す elisp プログラム<br />
Recursively listing directories in elisp - turingMachine<br />
(url: <a href="http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html">http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html</a>)<br />
cond の使い方<br />
GNU Emacs Lispリファレンスマニュアル: 9. 制御構造<br />
(url: <a href="http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_10.html">http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_10.html</a>)<br />
その他参考 URL:<br />
Emacs Lisp デバッグ — ありえるえりあ<br />
(url: <a href="http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/">http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/</a>)<br />
カーソル位置の情報で遊ぼう。 - 日々、とんは語る。<br />
(url: <a href="http://d.hatena.ne.jp/tomoya/20101213/1292166026">http://d.hatena.ne.jp/tomoya/20101213/1292166026</a>)<br />
[Home] Thing At Point<br />
(url: <a href="https://www.emacswiki.org/emacs/ThingAtPoint">https://www.emacswiki.org/emacs/ThingAtPoint</a>)<br />
GNU Emacs Lisp Reference Manual - ファイルに関する情報<br />
(url: <a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html</a>)<br />
GNU Emacs Lispリファレンスマニュアル: ファイル<br />
(url: <a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html#SEC385">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html#SEC385</a>)<br />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成]]></title>
    <link href="http://saito1369.github.io/blog/2017-05-18-diary_float.html"/>
    <updated>2017-05-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/diary_float</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. 解決策</a></li>
<li><a href="#sec-4">4. 結果</a>
<ul>
<li><a href="#sec-4-1">4.1. 毎月月末の特定曜日を指定</a></li>
<li><a href="#sec-4-2">4.2. 毎週特定曜日(複数)を指定</a></li>
<li><a href="#sec-4-3">4.3. 毎週特定曜日にやることがある(始まり, 終わりなどその他複雑な条件あり)</a></li>
<li><a href="#sec-4-4">4.4. その他いくつか作ったプログラム</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 感想</a></li>
<li><a href="#sec-6">6. 参考 URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2015-05-24 Sun 16:31&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 19:38&gt;</span></span><br />
</p>

<p>
概要:<br />
emacs/org-mode での予定の作成方法について,<br />
特に繰り返して起こるタスクや予定のスケジュール(日時)作成についてのはなし.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はエディタとして emacs を使っており, 予定やタスクを org-mode のファイルで管理している.<br />
日時が定まっている予定は<br />
</p>
<pre class="example">
SCHEDULED: &lt;2015-05-24 Sun 19:00&gt;
</pre>

<p>
のような感じで書いておけばよい.<br />
しかし, 一回やればそれで終わりではないことや,<br />
定期的に繰り返して起こるような予定やタスクに関して,<br />
日付をどのように書けばいいのかよくわからなかったのでしらべてみた.<br />
</p>

<p>
org-mode の version は 8.2.10, emacs の version は 24.5.4 です.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
週単位で動いたり月単位で動くような仕事をしている場合,<br />
それらを周期とした少し複雑な予定を書く必要に迫られることがあったりする.<br />
例えば,<br />
</p>
<ul class="org-ul">
<li>毎月月末の木曜日には定例会議がある.<br />
</li>
<li>毎週月, 水, 金にやることがある.<br />
</li>
<li>4/11  から 15 週に渡って毎週水曜日にやることがあるが,<br />
3 週目と 4 週目はやらない.<br />
その代わり 7/3 と 7/4 にちにその代わりをやる.<br />
</li>
</ul>
<p>
とか.<br />
私の場合, 週及び月単位, 四半期単位での繰り返しがあり,<br />
上のような結構めんどくさい条件もあったりすることがわかった.<br />
最初は手で予定を書き換えてたのだが, 一応ルールがあるのに手で修正するのはめんどくさいし, 何とか自動で出来ないかなぁと思っていた.<br />
いくつか調べたが, こういうのはもしかして org-mode のカレンダー日付で書くやりかたではちょっと表現しにくい, というか出来ないんじゃないかなーと思ったのであった.<br />
例えば<br />
</p>
<pre class="example">
&lt;2015-05-24 Sun +1w&gt;
</pre>
<p>
とかは +1w で毎週を示せますが週一回やることしか表現できないし,<br />
月末の最後の金曜日のつもりで<br />
</p>
<pre class="example">
&lt;2015-05-29 Fri +1m&gt;
</pre>
<p>
のように書いても, これが終わった後の次の月の予定は<br />
</p>
<pre class="example">
&lt;2015-06-29 Mon +1m&gt;
</pre>
<p>
に書き換えられてしまいます.<br />
+1m はひと月後という意味なので間違ってはないんだけど&#x2026;<br />
曜日を揃えるにはどーすればいいんだろう.<br />
こっちの方が何かと使うと思うんだけど. 外人は毎月末の金曜日に会議, とかいう予定は無いんかなぁ.<br />
それとも自分が知らない何かワザがあるんだろうか&#x2026;<br />
この辺何とかならないかなぁというのがここでの問題点である.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 解決策</h2>
<div class="outline-text-2" id="text-3">
<p>
色々調べたけど日付の後ろに +1w とかで修飾していくようなやり方では出来ないみたい？<br />
探してたら出てきたのが diary-float (diary-lib.el) というやつである.<br />
</p>

<p>
以下のようにかく. diary パッケージの S 式というらしい.<br />
</p>
<pre class="example">
&lt;%%(diary-float t 4 2)&gt;
</pre>
<p>
何これ.<br />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 結果</h2>
<div class="outline-text-2" id="text-4">
<p>
調べてみた結果を以下にまとめた.<br />
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 毎月月末の特定曜日を指定</h3>
<div class="outline-text-3" id="text-4-1">
<p>
毎月第二木曜日 の場合は以下のように書く.<br />
</p>
<pre class="example">
&lt;%%(diary-float t 4 2)&gt;
</pre>
<p>
パラメータの意味は<br />
毎月:   t<br />
木曜日: 4 (0:日 1:月 2:火 3:水 4:木 5:金 6:土)<br />
第二:   2<br />
</p>

<p>
10 月の第二木曜日は,<br />
</p>
<pre class="example">
&lt;%%(diary-float 10 4 2)&gt;
</pre>

<p>
10,11,12 月の第二木曜日は<br />
</p>
<pre class="example">
&lt;%%(diary-float '(10 11 12) 4 2)&gt;
</pre>

<p>
更にしらべたら, 毎月月末の週の木曜日の会議は以下のように書けることが判明した.<br />
-1 で月末になるっぽい. ナイスな感じ.<br />
</p>
<pre class="example">
&lt;%%(diary-float t 4 -1)&gt;
</pre>
<p>
何と, 結構わかりやすいかも.<br />
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> 毎週特定曜日(複数)を指定</h3>
<div class="outline-text-3" id="text-4-2">
<pre class="example">
&lt;%%(memq (calendar-day-of-week date) '(1 3 5))&gt;
</pre>
<p>
date というのは何なのか&#x2026;<br />
書かせてみたりして調べてみると,<br />
どうやらこの行を評価した日付が '(12 13 2015) みたいな形式で date の中に入るっぽい.<br />
</p>

<p>
ちなみに date の書かせ方は<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(y-or-n-p (message <span style="color: #ffa07a;">"date=%s"</span> date))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> 毎週特定曜日にやることがある(始まり, 終わりなどその他複雑な条件あり)</h3>
<div class="outline-text-3" id="text-4-3">
<p>
<a href="http://orgmode.org/worg/org-faq.html#Appointments/Diary">http://orgmode.org/worg/org-faq.html#Appointments/Diary</a><br />
に例となる関数(diary-limited-cyclic)があったので,<br />
これを参考に見よう見まねで自分でも作ってみよう！！<br />
</p>

<p>
要は今日(date)が条件を満たしてれば t を返し, 満たしてなければ nil を返す,<br />
そんなプログラムを作ればいいんじゃないでしょうか.<br />
私は断固そー思うわけです.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture</span>(stt ival recc <span style="color: #9370db;">&amp;optional</span> exs <span style="color: #9370db;">&amp;rest</span> sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (sttd  (calendar-absolute-from-gregorian stt ))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (today (calendar-absolute-from-gregorian date))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26085;&#20184;</span>
         (diffd (- today sttd)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12392;&#20170;&#26085;&#12398;&#24046;&#20998;. stt &#12424;&#12426;&#20170;&#26085;&#12398;&#26041;&#12364;&#24460;&#12391;&#12354;&#12428;&#12400; &gt;0</span>
         (nths   nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12399;&#20309;&#21608;&#30446;&#12363;&#12434;&#24471;&#12427;</span>
         (jst    nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">diary-limited-cyclic &#12434;&#21442;&#29031;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffd))
             (zerop (% diffd ival))
             (&lt; (floor diffd ival) recc))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> nths (+ (/ diffd ival) 1)))

    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19978;&#12398;&#26465;&#20214;&#12434;&#28288;&#12383;&#12375;&#12390;&#12356;&#12428;&#12400; nths &#12395;&#20309;&#12363;&#20516;&#12364;&#20837;&#12387;&#12390;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> nths
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-exception nths exs))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbs))
      )
    jst))

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20363;&#22806;&#36913;(exs) &#12391;&#12354;&#12428;&#12400; nil &#12434;&#36820;&#12377;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture-exception</span>(nths exs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((jst t)
        (ex  nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> exs
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> ex (car exs))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= nths ex) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst nil))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> exs (cdr exs)))
    jst))

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20195;&#12431;&#12426;&#12398;&#26085;&#20184;&#12391;&#12354;&#12428;&#12400; t &#12434;&#36820;&#12377;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture-substitution</span>(today sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((jst nil)
        (sb  nil)
        (sbg nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> sbs
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sb (car sbs))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sbg (calendar-absolute-from-gregorian sb))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= today sbg) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sbs (cdr sbs)))
    jst))
</pre>
</div>

<pre class="example">
(diary-lecture stt ival recc &amp;optional exs &amp;rest sbs)
</pre>
<p>
引数の意味は以下です:<br />
</p>
<ul class="org-ul">
<li>stt:  始まりの日    '(4 11 2017)<br />
</li>
<li>ival: 何日おき      7<br />
</li>
<li>recc: 繰り返し回数  16<br />
</li>
<li>exs:  除外週        '(3 4 6)<br />
</li>
<li>sbs:  代わりの日付(配列) '(5 11 2017) '(3 11 2017)<br />
</li>
</ul>

<p>
&amp;optional 以降の引数(exs, sbs) は無くてもいい<br />
&amp;rest 右隣の引数(sbs) は, これ以降の変数のリストは全て sbs に入るという意味<br />
</p>

<p>
例:<br />
2017/04/14 から毎週, 17 回やる. 4 回目と 10 回目は休み. その代わり 2018/08/08 2018/08/09にやる<br />
</p>
<pre class="example">
SCHEDULED: &lt;%%(diary-lecture '(4 14 2017) 7 17 '(4 10) '(8 8 2018) '(8 9 2018))&gt;
</pre>

<p>
追記:<br />
diary-lecture を半年程使ってましたが, 繰り返し回数, 除外週のような, 始まりの週を 1 週目として何周目をというのを数えるのは超めんどくさいことが判明した.<br />
いちいちカレンダーを見て指折り数えないといけない. やってられないので diary-lecture2 を作った.<br />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#32368;&#12426;&#36820;&#12375;&#22238;&#25968;&#12399;&#20351;&#12356;&#12395;&#12367;&#12356;&#12398;&#12391;&#26085;&#20184;&#12391;&#25351;&#23450;&#12377;&#12427;</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt:    &#22987;&#12414;&#12426;&#12398;&#26085; '(4 11 2018)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">ival:   &#20309;&#26085;&#12362;&#12365;   7</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">end:    &#32066;&#20102;&#26085;     '(8 10 2018)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">exdays: &#38500;&#22806;&#26085;     '((5 11 2018) (3 11 2018))</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">sbdays: &#20195;&#12431;&#12426;&#26085;   '((5 12 2018) (3 12 2018))</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture2</span>(stt ival end <span style="color: #9370db;">&amp;optional</span> exdays sbdays)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (sttd  (calendar-absolute-from-gregorian stt ))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (today (calendar-absolute-from-gregorian date))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26085;&#20184;</span>
         (endd  (calendar-absolute-from-gregorian end))   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">end &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (diffd (- today sttd))
         (diffe (- endd  today))
         (nths   nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12399;&#20309;&#21608;&#30446;&#12363;&#12434;&#24471;&#12427;</span>
         (jst    nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffd))
             (not (minusp diffe))
             (zerop (% diffd ival)))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> nths (+ (/ diffd ival) 1)))

    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19978;&#12398;&#26465;&#20214;&#12434;&#28288;&#12383;&#12375;&#12390;&#12356;&#12428;&#12400;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> nths
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (not (diary-lecture-substitution today exdays)))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbdays)))
    jst))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> その他いくつか作ったプログラム</h3>
<div class="outline-text-3" id="text-4-4">
<p>
いちおう何となく作り方がわかったんで, 必要に応じていくつか書いてみた.<br />
基本すべて同じぱたーんで書ける筈！！<br />
</p>

<p>
月末にやることを指定.<br />
月の締めの作業とか.<br />
2015/03/07 以降の月末日にやることを指定.<br />
</p>
<pre class="example">
&lt;%%(diary-habit-last-day-of-month '(3 7 2015)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-last-day-of-month</span>(stt)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
         (jst  nil)
         (sttd  (calendar-absolute-from-gregorian stt ))
         (today (calendar-absolute-from-gregorian date))
         (diffd (- today sttd))
         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(calendar-last-day-of-month 3&#26376; 2017&#24180;) ;=&gt; 31 &#26085;</span>
         (lday (calendar-last-day-of-month (nth 0 date) (nth 2 date)))
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (= (nth 1 date) lday)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
    jst
    ))
</pre>
</div>

<p>
2015/03/07 以降の月水金だけやることを指定.<br />
</p>
<pre class="example">
&lt;%%(diary-habit-weekday '(3 7 2015) 1 3 5)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday</span>(stt <span style="color: #9370db;">&amp;rest</span> wds)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
         (jst  nil)
         (sttd  (calendar-absolute-from-gregorian stt ))
         (today (calendar-absolute-from-gregorian date))
         (diffd (- today sttd)))
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "date=%s" date))</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-habit-weekday-week date wds)))
    jst
    ))

(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday-week</span>(date wds)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((wd nil)
        (jst nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> wds
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wd (car wds))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= wd (calendar-day-of-week date)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wds (cdr wds))
      )
    jst))
</pre>
</div>

<p>
指定した月の毎日やることを指定, 除外曜日があればそれも指定.<br />
2015/05 の毎日. 但し火曜(2)水曜(3)を除く.<br />
</p>
<pre class="example">
&lt;%%(diary-every-day-in-month2 2015 5 2 3)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-every-day-in-month</span>(y m <span style="color: #9370db;">&amp;rest</span> wds)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (l     (calendar-last-day-of-month m y))
         (endd  (calendar-absolute-from-gregorian (list m l y)))
         (sttd  (calendar-absolute-from-gregorian (list m 1 y)))
         (today (calendar-absolute-from-gregorian date))
         (jst0  nil)
         (jst   nil)
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp (- today sttd)))
             (not (minusp (- endd  today))))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (not (diary-habit-weekday-week date wds))))
    jst
   ))
</pre>
</div>

<p>
毎月やる会議の指定.<br />
2017/04/01 から 2018/03/31 まで, ある委員に任命されてしまった&#x2026;<br />
月末の金曜日に会議がある.<br />
だけど夏休みの 8 月と春休みの 2 月には会議がない.<br />
その代わり 2017/05/08 と 2017/03/11 に余計な会議がある予定なのであった.<br />
そんな場合の予定として, 以下のように書く私であった.<br />
</p>
<pre class="example">
&lt;%%(diary-monthly-meeting '(4 1 2017) '(3 31 2018) 5 -1 (8 2) '(5 8 2017) '(3 11 2017))&gt;
</pre>
<ul class="org-ul">
<li>stt: はじまりの日: '(4 1 2017)<br />
</li>
<li>end: 終わりの日:   '(3 31 2018)<br />
</li>
<li>何曜日(week)<br />
</li>
<li>第何週(num)<br />
</li>
<li>除外月(exs): (5 8)<br />
</li>
<li>代わりの日付(配列) sbs = '(5 8 2017) '(3 11 2017)<br />
</li>
</ul>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-monthly-meeting</span>(stt end week num <span style="color: #9370db;">&amp;optional</span> exs <span style="color: #9370db;">&amp;rest</span> sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (doweek (calendar-day-of-week   date)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26332;&#26085;(1-7)</span>
         (month  (calendar-extract-month date)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26376;(1-12)</span>
         (sttd   (calendar-absolute-from-gregorian stt))
         (endd   (calendar-absolute-from-gregorian end))
         (today  (calendar-absolute-from-gregorian date))
         (diffs  (- today sttd))
         (diffe  (- endd  today))
         (ist    nil)
         (dst    nil)
         (mst    t)
         (sst    nil)
         (jst    nil) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#23569;&#12394;&#12367;&#12392;&#12418;&#20170;&#26085;&#12364; stt - end &#12398;&#38291;&#12395;&#28961;&#12356;&#12392; nil</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffs)) (not (minusp diffe))) (<span style="color: #20b2aa; font-weight: bold;">setq</span> ist t))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26376; num &#36913; week &#26332;&#26085;&#12394;&#12425; t</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (diary-float t week num) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dst t))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#38500;&#22806;&#26376;&#12364;&#25351;&#23450;&#12373;&#12428;&#12390;&#12390;&#19969;&#24230;&#12381;&#12398;&#26376;&#12394;&#12425; nil</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> mst (diary-months-excepts month exs))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26222;&#36890;&#12398;&#22580;&#21512;</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (<span style="color: #20b2aa; font-weight: bold;">and</span> ist dst mst))
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "ist=%s" ist))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "dst=%s" dst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "mst=%s" mst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "jst=%s" jst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(if (and ist (and dst mst)) (setq jst t))</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20195;&#12431;&#12426;&#12398;&#26085;&#12391;&#12354;&#12428;&#12400; t</span>
    (<span style="color: #20b2aa; font-weight: bold;">unless</span> jst
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbs)))
    jst
    ))

(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-months-excepts</span>(month exs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((mst t) (ex nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> exs
        (<span style="color: #20b2aa; font-weight: bold;">progn</span>
          (<span style="color: #20b2aa; font-weight: bold;">while</span> exs
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> ex (car exs))
            (<span style="color: #20b2aa; font-weight: bold;">if</span> (= ex month) (<span style="color: #20b2aa; font-weight: bold;">setq</span> mst nil))
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> exs (cdr exs))
            )
          )
      )
    mst))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 感想</h2>
<div class="outline-text-2" id="text-5">
<p>
結構すっきりしてわかりやすいと思ったので, 繰り返し予定やタスクのスケジューリングは<br />
全てこの形式で統一した方がいいんじゃないかなーとか思ったが&#x2026;<br />
org-habit とか org-gcal とかを使おうとするといまいちな感じになってしまう.<br />
これらに対する修正はまた別の記事で書こうかと思う.<br />
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 参考 URL</h2>
<div class="outline-text-2" id="text-6">
<p>
Org-mode Frequently Asked Questions<br />
<a href="http://orgmode.org/worg/org-faq.html#Appointments/Diary">http://orgmode.org/worg/org-faq.html#Appointments/Diary</a><br />
</p>

<p>
GNU Emacs Lispリファレンスマニュアル: Sexp Diary Entries<br />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_654.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_654.html</a><br />
</p>

<p>
GNU Emacs Manual: カレンダーとダイアリー<br />
<a href="http://www.bookshelf.jp/texi/emacs-24.5/emacs_33.html">http://www.bookshelf.jp/texi/emacs-24.5/emacs_33.html</a><br />
</p>

<p>
GNU Emacs Lispリファレンス・マニュアル - 関数<br />
<a href="http://bit.ly/2mZvhnD">http://bit.ly/2mZvhnD</a><br />
</p>

<p>
Lispプログラミング入門<br />
<a href="http://bach.istc.kobe-u.ac.jp/lect/ProLang/org/lisp.html">http://bach.istc.kobe-u.ac.jp/lect/ProLang/org/lisp.html</a><br />
</p>

<p>
Org-mode, Emacs, and Getting Things Done<br />
<a href="http://members.optusnet.com.au/~charles57/GTD/index.html">http://members.optusnet.com.au/~charles57/GTD/index.html</a><br />
</p>

<p>
Org mode for Emacs: あなたの生活をプレーンテキストで<br />
<a href="http://orgmode.org/ja/index.html">http://orgmode.org/ja/index.html</a><br />
</p>

<p>
Org Mode マニュアル<br />
<a href="http://orgmode.jp/doc-ja/org-ja.html">http://orgmode.jp/doc-ja/org-ja.html</a><br />
</p>

<p>
Emacs org-modeを使ってみる - 屯遁のパズルとプログラミングの日記<br />
<a href="http://d.hatena.ne.jp/tamura70/20100203/org">http://d.hatena.ne.jp/tamura70/20100203/org</a><br />
</p>

<p>
How to create calendar entry for last weekday of every month? - Emacs Stack Exchange<br />
<a href="https://emacs.stackexchange.com/questions/30448/how-to-create-calendar-entry-for-last-weekday-of-every-month">https://emacs.stackexchange.com/questions/30448/how-to-create-calendar-entry-for-last-weekday-of-every-month</a><br />
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
