<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: r | easy cure]]></title>
  <link href="http://saito1369.github.io/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://saito1369.github.io/"/>
  <updated>2025-01-29T16:44:35+09:00</updated>
  <id>http://saito1369.github.io/</id>
  <author>
    <name><![CDATA[saito1369]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[混合二項分布の推定]]></title>
    <link href="http://saito1369.github.io/blog/2022-09-09-Mix_C.html"/>
    <updated>2022-09-09T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/Mix_C</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 二項分布</a></li>
<li><a href="#sec-2">2. 混合二項分布の推定</a>
<ul>
<li><a href="#sec-2-1">2.1. 混合二項分布の式</a></li>
<li><a href="#sec-2-2">2.2. 混合二項分布の例</a></li>
<li><a href="#sec-2-3">2.3. Stan による MCMC 計算</a></li>
<li><a href="#sec-2-4">2.4. Stan 計算結果の表示(1) 結果 summary</a></li>
<li><a href="#sec-2-5">2.5. Stan 計算結果の表示(2) 図示 bayesplot</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-09-09 Fri 18:54&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 12:51&gt;</span></span><br />
</p>
<p>
混合二項分布の解析を通じて, cmdstanr の簡単な使い方をまとめておく.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 二項分布</h2>
<div class="outline-text-2" id="text-1">
<p>
二項分布: 1回当りの成功確率を \(p\) とし, 試行回数 \(M\), そのうちの成功回数が \(y\) 回である確率 \(P(y)\) は<br />
$$
  P(y) = {}_M \mathrm{C}_{y} p^{y} (1-p)^{M-y}
  $$<br />
</p>

<p>
これを以下のように書くことにしよう.<br />
$$
  y \sim binomial(M,p)
  $$<br />
</p>

<p>
例: テストの点数分布<br />
100 点満点のテストの場合 \(M=100\)<br />
テストの得点を \(y\) とすると<br />
$$
  y \sim binomial(100,p)
  $$<br />
</p>

<p>
未知パラメータは \(p\) (0 から 1 まで)<br />
テストの得点データから \(p\) の値(分布)を求めるのがよくある問題設定.<br />
</p>

<p>
注: \(p\) は 0 から 1 までなので, 別の変数 \(x\) との関係がみたいときなどは \(p = 1/(1+\exp(-a - b x))\) 的な変換がよくなされる.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 混合二項分布の推定</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 混合二項分布の式</h3>
<div class="outline-text-3" id="text-2-1">
<p>
混合二項分布(あるのか？ ネットで調べても出てこないけど)は,<br />
２つ以上の二項分布がある割合(\(\alpha\)) で足し合わされたもの.<br />
</p>

<p>
$$
   y \sim \alpha \times binomial(y|100,p_1) + (1-\alpha) \times binomial(y|100,p_2)
   $$<br />
</p>

<p>
こんな感じで書ける(はず). \(\alpha\) が混合比と呼ばれるパラメータ<br />
(混合正規分布(これはネットで調べるとたくさん出てくる)からの類推).<br />
</p>

<p>
データ \(y\) は \(N\) 個あってそれぞれ独立だから, 同時確率は上の式の掛け算でよい.<br />
普通は同時確率の対数をとって掛け算 &#x2013;&gt; 足し算にしてから計算する.<br />
</p>

<p>
この値の最大値をとるパラメータ \(p_1\), \(p_2\) を求めるのが最尤法.<br />
\(p_1\), \(p_2\) の分布を求めるのがベイズ推定.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 混合二項分布の例</h3>
<div class="outline-text-3" id="text-2-2">
<p>
テストのため, R で混合二項分布に従う乱数を生成してみる.<br />
\(\alpha = 0.6\), \(p_1 = 0.55\), \(p_2 = 0.82\) とする混合二項分布から \(N=100\) 個の乱数を作成する<br />
(速度は気にしないのでループを使って書く).<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #87cefa;">mix_bin</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(alpha, N, p1, p2) {
<span class="linenr"> 2: </span>    r <span style="color: #7fffd4;">&lt;-</span> runif(1,0,1)
<span class="linenr"> 3: </span>    <span style="color: #00ffff;">if</span>(r &lt; alpha) {
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>l <span style="color: #7fffd4;">&lt;-</span> 0
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>y <span style="color: #7fffd4;">&lt;-</span> rbinom(1,N,p1)
<span class="linenr"> 6: </span>    }<span style="color: #00ffff;">else</span> {
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>l <span style="color: #7fffd4;">&lt;-</span> 1
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>y <span style="color: #7fffd4;">&lt;-</span> rbinom(1,N,p2)
<span class="linenr"> 9: </span>    }
<span class="linenr">10: </span>    <span style="color: #00ffff;">return</span>(c(y,l))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>N <span style="color: #7fffd4;">&lt;-</span> 100
<span class="linenr">13: </span>alpha <span style="color: #7fffd4;">&lt;-</span> 0.6
<span class="linenr">14: </span>p1 <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">15: </span>p2 <span style="color: #7fffd4;">&lt;-</span> 0.82
<span class="linenr">16: </span>
<span class="linenr">17: </span>Num <span style="color: #7fffd4;">&lt;-</span> 100
<span class="linenr">18: </span>ys <span style="color: #7fffd4;">&lt;-</span> c()
<span class="linenr">19: </span>ls <span style="color: #7fffd4;">&lt;-</span> c()
<span class="linenr">20: </span><span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:Num) {
<span class="linenr">21: </span>    ret <span style="color: #7fffd4;">&lt;-</span> mix_bin(alpha,N,p1,p2)
<span class="linenr">22: </span>    y <span style="color: #7fffd4;">&lt;-</span> ret[1]
<span class="linenr">23: </span>    l <span style="color: #7fffd4;">&lt;-</span> ret[2]
<span class="linenr">24: </span>    ys <span style="color: #7fffd4;">&lt;-</span> c(ys,y)
<span class="linenr">25: </span>    ls <span style="color: #7fffd4;">&lt;-</span> c(ls,l)
<span class="linenr">26: </span>}
<span class="linenr">27: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(ys)</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span>df <span style="color: #7fffd4;">&lt;-</span> data.frame(score=ys, label=ls)
<span class="linenr">30: </span>head(df)
<span class="linenr">31: </span>
<span class="linenr">32: </span>write.table(df,<span style="color: #ffa07a;">'mix_biom_test.csv'</span>,sep=<span style="color: #ffa07a;">','</span>, quote=F,row.names=F,col.names=T)
</pre>
</div>

<pre class="example">
  score label
1    76     1
2    80     1
3    88     1
4    45     0
5    67     0
6    79     1
</pre>

<p>
図示してみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>, header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr">2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">3: </span>
<span class="linenr">4: </span>g <span style="color: #7fffd4;">&lt;-</span> ggplot(data=df,mapping=aes(x=score,y=..density..)) + geom_density(alpha=0.4) + geom_histogram(alpha=0.2,color=<span style="color: #ffa07a;">'black'</span>) + xlim(0,100)
<span class="linenr">5: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test.png'</span>
<span class="linenr">6: </span>ggsave(file=fname, plot=g, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test.png" alt="Mix_C-mix_biom_test.png" /><br />
</p>
</div>

<p>
このデータを使って, \(\alpha\), \(p_1\), \(p_2\) の値(と分布)を推定したい.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Stan による MCMC 計算</h3>
<div class="outline-text-3" id="text-2-3">
<p>
まずは Stan コードを以下のように書いてみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">vector</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt;[2] <span style="color: #eedd82;">p</span>;
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(<span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]),
<span style="background-color: #222222;">                        </span>  <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]));
  }
}
</pre>
</div>

<p>
注: array の書き方が変わるらしい <a href="https://mc-stan.org/docs/2_28/reference-manual/brackets-array-syntax.html">13.12 Brackets array syntax | Stan Reference Manual</a><br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr">2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr">3: </span>  array[N] <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>;
<span class="linenr">4: </span>}
</pre>
</div>
<p>
こんな感じ？ とりあえず今は旧版の書き方でいく.<br />
</p>

<p>
暗黙のうちに p[ 1 ] &lt; p[ 2 ] を期待しているが, プログラム上でこの制約を定義できていないので<br />
値がうまく計算できなくなることがある.<br />
改良する.<br />
</p>

<p>
 p の値を ordered にしたいが, ordered は値の範囲を指定できない.<br />
<a href="https://hoxo-m.hatenablog.com/entry/20150930/p1"> Stan でパラメータに大小関係の制約をつける - ほくそ笑む</a><br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #ff7f24;"># ordered&lt;lower=0,upper=1&gt;[2] p;  # &#12456;&#12521;&#12540;&#12392;&#12394;&#12387;&#12390;&#12375;&#12414;&#12358;&#65281;&#65281;</span>
  <span style="color: #98fb98;">ordered</span>[2] <span style="color: #eedd82;">p_inv</span>;
}

<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0, <span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">p</span>[2];
  p[1] <span style="color: #ffc0cb; font-weight: bold;">&lt;-</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[1]);
  p[2] <span style="color: #ffc0cb; font-weight: bold;">&lt;-</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[2]);
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(<span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]),
<span style="background-color: #222222;">                        </span>  <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]));
  }
}
</pre>
</div>

<p>
ロジスティック関数を使って 0 から 1 の範囲に無理やりする.<br />
</p>

<p>
ついでに, generated quantities で,  得点 1 - 100 点に対して最初の分布に属する確率を計算するような式を追加する.<br />
ここをうまく使うと, 知りたいことの分布(乱数列)を直接的に生成できる.<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">ordered</span>[2] <span style="color: #eedd82;">p_inv</span>;
}

<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0, <span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">p</span>[2];
  p[1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[1]);
  p[2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[2]);

  <span style="color: #98fb98;">vector</span>[2] <span style="color: #eedd82;">lp</span>[N];
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    lp[n,1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]);
    lp[n,2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]);
  }
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(lp[n]);
  }
}

<span style="color: #00ffff;">generated quantities</span> {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#12487;&#12540;&#12479;&#12398;&#20104;&#28204;&#20998;&#24067;&#12434;&#20316;&#12427;&#22580;&#21512;</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">vector[N] pi;</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">for(n in 1:N) {</span>
  <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">pi[n] = softmax(lp[n])[1];</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">}</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">1 - 100 &#28857;&#12414;&#12391;&#12434;&#20351;&#12358;&#22580;&#21512;</span>
  <span style="color: #98fb98;">vector</span>[2] <span style="color: #eedd82;">lx</span>[100];
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:100) {
    lx[n,1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(n | 100, p[1]);
    lx[n,2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(n | 100, p[2]);
  }
  <span style="color: #98fb98;">vector</span>[100] <span style="color: #eedd82;">px</span>;
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:100) {
    px[n] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">softmax</span>(lx[n])[1];
  }
}
</pre>
</div>

<p>
rstan はもう古いらしいので, cmdstanr を使ってパラメータをベイズ推定する<br />
<a href="https://www.slideshare.net/simizu706/cmdstanrreducesum">Cmdstanr入門とreduce_sum()解説</a><br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>df <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>, header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr">3: </span>data <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(df), Y=df$score)
<span class="linenr">4: </span>model <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'mix_biom_test.stan'</span>)
<span class="linenr">5: </span>fit <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">6: </span>fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'mix_biom_test'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) 
....
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.7 seconds.
Chain 2 finished in 0.6 seconds.
Chain 3 finished in 0.6 seconds.
Chain 4 finished in 0.6 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.6 seconds.
Total execution time: 0.8 seconds.
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> Stan 計算結果の表示(1) 結果 summary</h3>
<div class="outline-text-3" id="text-2-4">
<p>
結果ファイルの読み込みと基本的な情報の書き出し<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">df &lt;- read.csv('mix_biom_test.csv', header=TRUE)</span>
<span class="linenr"> 2: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">head(df)</span>
<span class="linenr"> 3: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 4: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 8: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 9: </span>fit$summary(c(<span style="color: #ffa07a;">"a"</span>,<span style="color: #ffa07a;">"p"</span>))
<span class="linenr">10: </span>fit$summary(c(<span style="color: #ffa07a;">"px[1]"</span>,<span style="color: #ffa07a;">"px[2]"</span>,<span style="color: #ffa07a;">"px[3]"</span>,<span style="color: #ffa07a;">"px[4]"</span>,<span style="color: #ffa07a;">"px[5]"</span>,<span style="color: #ffa07a;">"px[6]"</span>))
</pre>
</div>

<pre class="example">
# A tibble: 3 × 10
  variable  mean median      sd     mad    q5   q95  rhat ess_bulk ess_tail
  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 a        0.549  0.549 0.0493  0.0505  0.469 0.631 0.999    2972.    2834.
2 p[1]     0.546  0.546 0.00680 0.00676 0.535 0.557 1.00     2517.    2658.
3 p[2]     0.819  0.819 0.00587 0.00597 0.809 0.828 1.00     4432.    3389.
# A tibble: 6 × 10
  variable  mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail
  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 px[1]        1      1     0     0     1     1    NA       NA       NA
2 px[2]        1      1     0     0     1     1    NA       NA       NA
3 px[3]        1      1     0     0     1     1    NA       NA       NA
4 px[4]        1      1     0     0     1     1    NA       NA       NA
5 px[5]        1      1     0     0     1     1    NA       NA       NA
6 px[6]        1      1     0     0     1     1    NA       NA       NA
</pre>

<p>
rhat &lt; 1.1 なので収束は問題なし.<br />
\(a = 0.55\) (\(0.47 &lt; a &lt; 0.63\))   # 実際は 0.6 なので微妙かも&#x2026;<br />
\(p_1 = 0.55\)  これは結構ぴったり<br />
\(p_2 = 0.82\)  これもぴったりかも.<br />
</p>

<p>
2.5% - 97.5% の quantile を知りたいときは, 自分で関数を作る必要がある.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#33258;&#20316;&#38306;&#25968;</span>
<span class="linenr">8: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#33258;&#20316;&#38306;&#25968; q95 &#12434;&#21547;&#12416;&#12356;&#12367;&#12388;&#12363;&#12398;&#20195;&#34920;&#20516;&#12434;&#34920;&#31034;&#12373;&#12379;&#12427;</span>
<span class="linenr">9: </span>fit$summary(c(<span style="color: #ffa07a;">"a"</span>,<span style="color: #ffa07a;">"p"</span>), <span style="color: #ffa07a;">'mean'</span>, <span style="color: #ffa07a;">'sd'</span>, <span style="color: #ffa07a;">'median'</span>, q95, <span style="color: #ffa07a;">'rhat'</span>)
</pre>
</div>

<pre class="example">
# A tibble: 3 × 10
  variable  mean      sd median `2.5%` `25%` `50%` `75%` `97.5%`  rhat
  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 a        0.549 0.0493   0.549  0.454 0.514 0.549 0.582   0.645 0.999
2 p[1]     0.546 0.00680  0.546  0.533 0.542 0.546 0.551   0.560 1.00 
3 p[2]     0.819 0.00587  0.819  0.807 0.815 0.819 0.823   0.830 1.00 
</pre>

<p>
RStan の資産を使いたいとき<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(rstan)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 6: </span>rstanfit <span style="color: #7fffd4;">&lt;-</span> rstan::read_stan_csv(files)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rstan &#12398; fit object &#12364;&#20316;&#25104;&#12391;&#12365;&#12383;. &#12371;&#12428;&#12434;&#20351;&#12358;.</span>
<span class="linenr"> 7: </span><span style="color: #7fffd4;">options</span>(width=180)
<span class="linenr"> 8: </span>summary(rstanfit)$summary[c(<span style="color: #ffa07a;">'px[60]'</span>,<span style="color: #ffa07a;">'px[90]'</span>),]
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#26360;&#12365;&#20986;&#12377;&#30906;&#29575;&#12434;&#22793;&#12360;&#12383;&#12356;&#12392;&#12365;</span>
<span class="linenr">10: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">summary(rstanfit, probs=c(0.1,0.5,0.9))$summary[c('px[60]','px[90]'),]</span>
<span class="linenr">11: </span>summary(rstanfit, pars=c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>))$summary
</pre>
</div>

<pre class="example">
               mean      se_mean           sd          10%         50%          90%    n_eff     Rhat
px[60] 9.999951e-01 7.913990e-08 5.046006e-06 9.999890e-01 9.99997e-01 9.999990e-01 4065.411 0.999612
px[90] 3.111517e-12 9.539589e-14 4.091990e-12 4.786479e-13 1.83679e-12 6.993533e-12 1839.966 1.001073
          mean      se_mean          sd      2.5%       25%      50%       75%     97.5%    n_eff      Rhat
a    0.5490803 8.938196e-04 0.049338188 0.4536839 0.5143332 0.548623 0.5823223 0.6453881 3046.959 0.9991678
p[1] 0.5463507 1.357109e-04 0.006801235 0.5326670 0.5417878 0.546397 0.5508498 0.5596871 2511.574 1.0010315
p[2] 0.8186793 8.864559e-05 0.005869632 0.8069147 0.8146545 0.818802 0.8226557 0.8300441 4384.372 0.9994753
</pre>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> Stan 計算結果の表示(2) 図示 bayesplot</h3>
<div class="outline-text-3" id="text-2-5">
<p>
パラメータの分布<br />
fit$draws で MCMC データを extract する.<br />
mcmc_dens<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">p &lt;- bayesplot::mcmc_hist(fit$draws(c('a','p')))  # &#12498;&#12473;&#12488;&#12464;&#12521;&#12512;&#12434;&#25551;&#12367;&#22580;&#21512;</span>
<span class="linenr">10: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_dens.png'</span>
<span class="linenr">11: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_dens.png" alt="Mix_C-mix_biom_test_dens.png" /><br />
</p>
</div>

<p>
chain ごとの density<br />
mcmc_dens_overlay<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens_overlay(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_dens_overlay.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_dens_overlay.png" alt="Mix_C-mix_biom_test_dens_overlay.png" /><br />
</p>
</div>

<p>
ヒストグラム(対角線上)及びパラメータ間の相関<br />
mcmc_pairs<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_pairs(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_pairs.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_pairs.png" alt="Mix_C-mix_biom_test_pairs.png" /><br />
</p>
</div>

<p>
一応 traceplot も見ておく<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_trace(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_trace.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_trace.png" alt="Mix_C-mix_biom_test_trace.png" /><br />
</p>
</div>

<p>
データと推定結果の重ね合わせ.<br />
\(\alpha = 0.55\) とする.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>,header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=d,mapping=aes(x=score,y=..density..))
<span class="linenr"> 5: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_histogram(fill=<span style="color: #ffa07a;">'white'</span>,color=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr"> 6: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_density(fill=<span style="color: #ffa07a;">'black'</span>,alpha=0.3)
<span class="linenr"> 7: </span>p <span style="color: #7fffd4;">&lt;-</span> p + xlim(0,100)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span>x <span style="color: #7fffd4;">&lt;-</span> seq(0,100, by=1)
<span class="linenr">10: </span>alpha <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">11: </span>p1 <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">12: </span>y1 <span style="color: #7fffd4;">&lt;-</span> alpha * dbinom(x, 100, p1)
<span class="linenr">13: </span>dy1 <span style="color: #7fffd4;">&lt;-</span> data.frame(x=x,y1=y1)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=dy1,mapping=aes(x=x,y=y1),colour=<span style="color: #ffa07a;">'green'</span>,size=2, linetype=<span style="color: #ffa07a;">'dashed'</span>)
<span class="linenr">15: </span>
<span class="linenr">16: </span>p2 <span style="color: #7fffd4;">&lt;-</span> 0.82
<span class="linenr">17: </span>y2 <span style="color: #7fffd4;">&lt;-</span> (1 - alpha) * dbinom(x, 100, p2)
<span class="linenr">18: </span>dy2 <span style="color: #7fffd4;">&lt;-</span> data.frame(x=x,y2=y2)
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=dy2,mapping=aes(x=x,y=y2),colour=<span style="color: #ffa07a;">'blue'</span>,size=2, linetype=<span style="color: #ffa07a;">'dashed'</span>)
<span class="linenr">20: </span>
<span class="linenr">21: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_binom_test_hist.png'</span>
<span class="linenr">22: </span>ggsave(plot=p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_binom_test_hist.png" alt="Mix_C-mix_binom_test_hist.png" /><br />
</p>
</div>

<p>
score(1 〜 100) が黄緑のクラスタに入っている確率を図示する.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 7: </span>mat <span style="color: #7fffd4;">&lt;-</span> fit$summary(c(<span style="color: #ffa07a;">"px"</span>), <span style="color: #ffa07a;">"median"</span>,<span style="color: #ffa07a;">"rhat"</span>)
<span class="linenr"> 8: </span>mat$score <span style="color: #7fffd4;">&lt;-</span> 1:100
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=mat) + geom_point(mapping=aes(x=score, y=median)) + xlim(0,100)
<span class="linenr">12: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_pred.png'</span>
<span class="linenr">13: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_pred.png" alt="Mix_C-mix_biom_test_pred.png" /><br />
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stan と R でベイズ統計モデリング 第四章]]></title>
    <link href="http://saito1369.github.io/blog/2022-03-18-Stan04.html"/>
    <updated>2022-03-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/Stan04</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Stan の基本的文法</a>
<ul>
<li><a href="#sec-1-1">1.1. ブロック構成</a></li>
<li><a href="#sec-1-2">1.2. コーディング規約</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Stan の lp__ と target</a></li>
<li><a href="#sec-3">3. 単回帰</a>
<ul>
<li><a href="#sec-3-1">3.1. データの図示</a></li>
<li><a href="#sec-3-2">3.2. 単回帰(lm)</a></li>
<li><a href="#sec-3-3">3.3. Stan で実装 (1) cmdstanr</a></li>
<li><a href="#sec-3-4">3.4. Stan 結果解析</a></li>
<li><a href="#sec-3-5">3.5. ベイズ信頼区間</a></li>
<li><a href="#sec-3-6">3.6. ベイズ予測区間</a></li>
<li><a href="#sec-3-7">3.7. transformed parametes 及び generated quantities ブロック</a></li>
<li><a href="#sec-3-8">3.8. Stan で実装(2) cmdstanpy</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-03-18 Fri 17:42&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 12:57&gt;</span></span><br />
</p>
<p>
<a href="https://amzn.to/3eLjQip">Stan と R でベイズ統計モデリング</a> (第四章)の学習記録<br />
</p>

<p>
この本は素晴らしい. めちゃんこ賢い人が書いた本って感じがする.<br />
疑問に思いそうなところをちゃんと先回りしてわかりやすく解説してくれているし,<br />
書き方に統一感があって, 読み進めていくうちに自然に身につくような構成となっている.<br />
</p>

<p>
この本では RStan を使った解説が行われているが,<br />
これからは cmdstanr/cmdstanpy らしい( <a href="https://www.slideshare.net/simizu706/cmdstanrreducesum">Cmdstanr入門とreduce_sum()解説</a> ) のでこれらを用いて書き直してみる.<br />
</p>

<p>
<!-- more --><br />
</p>

<p>
基礎となる単回帰の説明がある第四章を見てみる.<br />
自分用メモ.<br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Stan の基本的文法</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> ブロック構成</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Stan の最も簡単なプログラム例.<br />
データ Y は正規分布する.<br />
求めたいパラメータは平均値 mu. の場合.<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr"> 1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr"> 2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr"> 3: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
<span class="linenr"> 4: </span>}
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #00ffff;">parameters</span> {
<span class="linenr"> 7: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">mu</span>;
<span class="linenr"> 8: </span>}
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">11: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">12: </span>    Y[N] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(mu,1)
<span class="linenr">13: </span>  }
<span class="linenr">14: </span>  mu <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(0,100);
<span class="linenr">15: </span>}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> コーディング規約</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>インデント<br />
</li>
<li>データ変数は大文字から, パラメータは小文字から始める.<br />
</li>
<li>ブロックの間は1行あける.<br />
</li>
<li>変数名は snake_case にする.<br />
</li>
<li>~ 及び = の前後はスペースあける.<br />
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Stan の lp__ と target</h2>
<div class="outline-text-2" id="text-2">
<p>
事後確率は以下のように計算できる.<br />
$$
  p(\theta|Y) \propto p(Y|\theta) p(\theta)
  $$<br />
</p>

<p>
対数事後確率は<br />
$$
  \log p(\theta|Y) \propto \log p(Y|\theta) + \log p(\theta)
  $$<br />
</p>

<p>
Stan の結果データの中に出てくる lp__ (log posterior) は, 各 MCMC step でパラメータ \(\theta\) に何か具体的な値 \(\theta^{\star}\) を入れたときの \(\log p(\theta^{\star}|Y)\) の値.<br />
</p>

<p>
$$
  lp\_\_ = \log p(\theta^{\star}|Y)  \propto \log p(Y|\theta^{\star}) + \log p(\theta^{\star})
  $$<br />
</p>

<p>
データが \(N\) 個あれば以下のようになる. もちろん \(Y_i\) には何らかの具体的な数値が入っている.<br />
</p>

<p>
$$
  lp\_\_ = \log p(\theta^{\star}|Y)  \propto \sum_{i=1}^{N} \log p(Y_i|\theta^{\star}) + \log p(\theta^{\star})
  $$<br />
</p>

<p>
Stan の model ブロックでの \(Y \sim dist(\theta)\) という書き方は,<br />
内部的には以下のように計算されている.<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #ffc0cb; font-weight: bold;">lp__</span> <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(p(theta));   <span style="color: #ff7f24;"># &#20107;&#21069;&#20998;&#24067;(&#12398; log)</span>
<span class="linenr">2: </span><span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>  <span style="color: #ffc0cb; font-weight: bold;">lp__</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log</span>(p(Y[i]|theta));  <span style="color: #ff7f24;"># &#12487;&#12540;&#12479;&#12399;&#29420;&#31435;&#12394;&#12398;&#12391;&#30906;&#29575;&#12434;&#25499;&#12369;&#31639;(log &#12394;&#12398;&#12391;&#36275;&#12375;&#31639;&#12395;&#12394;&#12427;)</span>
<span class="linenr">4: </span>}
</pre>
</div>

<p>
target は lp__ の別名である.<br />
Stan では, target に \(\log p(Y|\theta)\) を足し込んでいく上のような書き方が出来るようになっている.<br />
特に複雑な尤度計算を行う際にはこっちの書き方をする場合がある.<br />
</p>

<p>
普通の書き方<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">2: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(mu,1);
<span class="linenr">4: </span>  }
<span class="linenr">5: </span>  mu <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(0,100);
<span class="linenr">6: </span>}
</pre>
</div>

<p>
を target に足し込む形式で書くと以下のようになる.<br />
normal_ldf(Y[i]|mu, sigma)  は \(\log normal(Y[i]|\mu, sigma)\) を表す便利な関数.<br />
(ldf は log probability density function. log 確率密度関数)<br />
</p>

<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">2: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">normal_lpdf</span>(Y[i]|mu,1);
<span class="linenr">4: </span>  }
<span class="linenr">5: </span>  <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">normal_lpdf</span>(mu|0,100);
<span class="linenr">6: </span>}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 単回帰</h2>
<div class="outline-text-2" id="text-3">
<p>
これが全ての基礎. よくわかんなくなったらここに戻ってくること.<br />
単回帰の例で Stan 及び cmdstanr/cmdstanpy の典型的な使い方を見てみる.<br />
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> データの図示</h3>
<div class="outline-text-3" id="text-3-1">
<p>
データファイル: data-salary.txt (X 列, Y 列がある. X 列の値から Y の値をよそくしたい！！)<br />
ggplot2 で図を描いてみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">3: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=d) + geom_point(mapping=aes(x=X,y=Y),shape=1, size=3)
<span class="linenr">4: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'04_01_fig.png'</span>
<span class="linenr">5: </span>ggsave(file=fname, plot=p, dpi=50)   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">dpi &#12391;&#22259;&#12398;&#22823;&#12365;&#12373;(&#35299;&#20687;&#24230;)&#12434;&#25351;&#23450;</span>
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-04_01_fig.png" alt="Stan04-04_01_fig.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 単回帰(lm)</h3>
<div class="outline-text-3" id="text-3-2">
<p>
lm 関数を使って単回帰を行う.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr">3: </span>summary(res)
</pre>
</div>

<pre class="example">
Call:
lm(formula = Y ~ X, data = d)

Residuals:
     Min       1Q   Median       3Q      Max 
-155.471  -51.523   -6.663   52.822  141.349 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) -119.697     68.148  -1.756    0.096 .  
X             21.904      1.518  14.428 2.47e-11 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 79.1 on 18 degrees of freedom
Multiple R-squared:  0.9204,	Adjusted R-squared:  0.916 
F-statistic: 208.2 on 1 and 18 DF,  p-value: 2.466e-11
</pre>

<p>
信頼区間<br />
coord_cartesian(xlim=Xの範囲, ylim=Yの範囲)<br />
scale_y_continuous() で Y の補助目盛りの設定など<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr"> 2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>X_new <span style="color: #7fffd4;">&lt;-</span> data.frame(X=23:60)
<span class="linenr"> 5: </span>conf_95 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'confidence'</span>, level=0.95)
<span class="linenr"> 6: </span>conf_50 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'confidence'</span>, level=0.50)
<span class="linenr"> 7: </span>conf_95 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,conf_95)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517; = (X,fit,lwr,upr)</span>
<span class="linenr"> 8: </span>conf_50 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,conf_50)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">12: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf_95, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=1/6)
<span class="linenr">13: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf_50, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=3/6)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=conf_50,aes(x=X,y=fit),size=1) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">15: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point(data=d, aes(x=X, y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">16: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">17: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">18: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-3-left.png'</span>
<span class="linenr">19: </span>ggsave(file=fname, plot=p, dpi=50)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-3-left.png" alt="Stan04-fig4-3-left.png" /><br />
</p>
</div>

<p>
予測区間を描く.<br />
confidence &#x2013;&gt; prediction にする.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr"> 2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>X_new <span style="color: #7fffd4;">&lt;-</span> data.frame(X=23:60)
<span class="linenr"> 5: </span>pred_95 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'prediction'</span>, level=0.95)
<span class="linenr"> 6: </span>pred_50 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'prediction'</span>, level=0.50)
<span class="linenr"> 7: </span>pred_95 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,pred_95)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517; = (X,fit,lwr,upr)</span>
<span class="linenr"> 8: </span>pred_50 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,pred_50)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">12: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=pred_95, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=1/6)
<span class="linenr">13: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=pred_50, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=3/6)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=pred_50,aes(x=X,y=fit),size=1) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">15: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point(data=d, aes(x=X, y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">16: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">17: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">18: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-3-right.png'</span>
<span class="linenr">19: </span>ggsave(file=fname, plot=p, dpi=50)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-3-right.png" alt="Stan04-fig4-3-right.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Stan で実装 (1) cmdstanr</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr"> 1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr"> 2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr"> 3: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X</span>[N];
<span class="linenr"> 4: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
<span class="linenr"> 5: </span>}
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #00ffff;">parameters</span> {
<span class="linenr"> 8: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">a</span>;
<span class="linenr"> 9: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">b</span>;
<span class="linenr">10: </span>  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0&gt; <span style="color: #eedd82;">sigma</span>;
<span class="linenr">11: </span>}
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">14: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">15: </span>    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(a + b*X[i], sigma);
<span class="linenr">16: </span>  }
<span class="linenr">17: </span>}
</pre>
</div>

<p>
これをキックする R コードを書く.<br />
本にある RStan ではなく comdstanr で書いてみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">3: </span>data <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(d), X=d$X, Y=d$Y)
<span class="linenr">4: </span>model  <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'model4-5.stan'</span>)
<span class="linenr">5: </span>fit <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">6: </span>fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'model4-5'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
...
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
.....
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.1 seconds.
Chain 2 finished in 0.1 seconds.
Chain 3 finished in 0.1 seconds.
Chain 4 finished in 0.1 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.1 seconds.
Total execution time: 0.3 seconds.
</pre>

<p>
csv ファイルからの読み込み<br />
結果を見てみる.<br />
<a href="https://mc-stan.org/cmdstanr/reference/read_cmdstan_csv.html">Read CmdStan CSV files into R — read_cmdstan_csv • cmdstanr</a><br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>fit$summary()
</pre>
</div>

<pre class="example">
# A tibble: 4 × 10
  variable   mean median    sd   mad     q5    q95  rhat ess_bulk ess_tail
  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 lp__      -93.6  -93.3  1.26  1.04  -96.1 -92.2   1.01    1304.    1691.
2 a        -117.  -119.  71.3  68.7  -236.    2.08  1.00    1377.    1556.
3 b          21.9   21.9  1.60  1.54   19.2  24.5   1.00    1349.    1501.
4 sigma      84.5   82.4 15.2  14.3    63.8 112.    1.01    1615.    1361.
</pre>


<p>
lm では a = -119.7, b = 21.9 と推定されていたのでほぼ同じ結果が出たと言って良いだろう.<br />
</p>

<p>
RStan の形式で見るには以下のようにする.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(rstan)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>rstanfit <span style="color: #7fffd4;">&lt;-</span> rstan::read_stan_csv(files)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rstan &#12398; fit object &#12364;&#20316;&#25104;&#12391;&#12365;&#12383;. &#12371;&#12428;&#12434;&#20351;&#12358;.</span>
<span class="linenr">7: </span><span style="color: #7fffd4;">options</span>(width=180)
<span class="linenr">8: </span>summary(rstanfit)$summary
</pre>
</div>

<pre class="example">
            mean    se_mean        sd       2.5%        25%        50%       75%     97.5%    n_eff     Rhat
a     -117.45496 1.93495619 71.307379 -257.65965 -164.64975 -119.17350 -71.97750  23.16816 1358.084 1.000974
b       21.85965 0.04379069  1.597700   18.67989   20.82737   21.88625  22.90630  24.97104 1331.149 1.001300
sigma   84.50608 0.40945078 15.213551   61.08729   73.71800   82.41410  93.17735 120.02752 1380.568 1.005035
lp__   -93.60737 0.03683109  1.256416  -96.86346  -94.18972  -93.27450 -92.69150 -92.13598 1163.691 1.007309
</pre>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Stan 結果解析</h3>
<div class="outline-text-3" id="text-3-4">
<p>
MCMC データの extract は fit$draws<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'matrix'</span>)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">chain &#12434;&#19968;&#12388;&#12395;&#12414;&#12392;&#12417;&#12427;</span>
<span class="linenr">8: </span>dim(ms)
<span class="linenr">9: </span>head(ms)
</pre>
</div>

<pre class="example">
[1] 4000    4
# A draws_matrix: 6 iterations, 1 chains, and 4 variables
    variable
draw lp__      a  b sigma
   1  -93  -94.6 21    72
   2  -93  -79.0 21    87
   3  -94  -34.5 21    95
   4  -93  -50.5 20    96
   5  -94    6.4 19    90
   6  -92 -133.7 22    81
</pre>

<p>
パラメータの分布を図示<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_dens.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens.png" alt="Stan04-model4-5_param_dens.png" /><br />
</p>
</div>

<p>
ヒストグラムで描くと<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_hist(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_hist.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_hist.png" alt="Stan04-model4-5_param_hist.png" /><br />
</p>
</div>

<p>
trace plot<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_trace(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_trace.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_trace.png" alt="Stan04-model4-5_param_trace.png" /><br />
</p>
</div>

<p>
mcmc_dens_overlay<br />
chain ごとに描く.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens_overlay(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_dens_overlay.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens_overlay.png" alt="Stan04-model4-5_param_dens_overlay.png" /><br />
</p>
</div>

<p>
mcmc_pairs<br />
パラメータ間の関係をみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_pairs(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_pairs.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_pairs.png" alt="Stan04-model4-5_param_pairs.png" /><br />
</p>
</div>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 7: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 8: </span>head(ms)
<span class="linenr"> 9: </span>head(ms$a)
<span class="linenr">10: </span>length(ms$a)
<span class="linenr">11: </span>quantile(ms$b, probs=c(0.025,0.975))
</pre>
</div>

<pre class="example">
# A draws_df: 6 iterations, 1 chains, and 4 variables
  lp__      a  b sigma
1  -93  -94.6 21    72
2  -93  -79.0 21    87
3  -94  -34.5 21    95
4  -93  -50.5 20    96
5  -94    6.4 19    90
6  -92 -133.7 22    81
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
[1]  -94.58260  -79.03710  -34.45430  -50.53660    6.44861 -133.72600
[1] 4000
    2.5%    97.5% 
18.67989 24.97104
</pre>

<p>
mcmc_pairs に似た図を ggplot を用いて描いてみる<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>df_mcmc <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#25955;&#24067;&#22259;</span>
<span class="linenr">10: </span>p_xy <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc,aes(x=a,y=b)) +
<span class="linenr">11: </span>    geom_point(alpha=1/4,size=2,shape=1) +
<span class="linenr">12: </span>    scale_x_continuous(breaks=seq(-400,200,200), limits=c(-420,210)) +
<span class="linenr">13: </span>    scale_y_continuous(breaks=seq(15,25,5),limits=c(14.5,29))
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">a &#12398;&#20998;&#24067;&#22259;</span>
<span class="linenr">16: </span>p_x <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc,aes(x=a)) + theme_bw(base_size=18) + theme(legend.position=<span style="color: #ffa07a;">'none'</span>) +
<span class="linenr">17: </span>    geom_histogram(aes(y=..density..),color=<span style="color: #ffa07a;">'black'</span>,fill=<span style="color: #ffa07a;">'white'</span>) +
<span class="linenr">18: </span>    geom_density(alpha=0.3,fill=<span style="color: #ffa07a;">'gray20'</span>) +
<span class="linenr">19: </span>    scale_x_continuous(breaks=seq(-400,200,200),limits=c(-420,210))+
<span class="linenr">20: </span>    labs(x=<span style="color: #ffa07a;">''</span>,y=<span style="color: #ffa07a;">''</span>)
<span class="linenr">21: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">b &#12398;&#20998;&#24067;&#22259;</span>
<span class="linenr">22: </span>p_y <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc, aes(x=b)) + theme_bw(base_size=18) + theme(legend.position=<span style="color: #ffa07a;">'none'</span>) +
<span class="linenr">23: </span>    coord_flip() +
<span class="linenr">24: </span>    geom_histogram(aes(y=..density..), colour=<span style="color: #ffa07a;">'black'</span>, fill=<span style="color: #ffa07a;">'white'</span>) +
<span class="linenr">25: </span>    geom_density(alpha=0.3, fill=<span style="color: #ffa07a;">'gray20'</span>) +
<span class="linenr">26: </span>    scale_x_continuous(breaks=seq(15, 25, 5), limits=c(14.5, 29)) +
<span class="linenr">27: </span>    labs(x=<span style="color: #ffa07a;">''</span>, y=<span style="color: #ffa07a;">''</span>)
<span class="linenr">28: </span>
<span class="linenr">29: </span>p_emp <span style="color: #7fffd4;">&lt;-</span> ggplot(data.frame(0,0)) + theme(rect=element_rect(fill=<span style="color: #ffa07a;">'white'</span>), panel.border=element_blank())
<span class="linenr">30: </span>
<span class="linenr">31: </span>g_xy  <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_xy)
<span class="linenr">32: </span>g_x   <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_x)
<span class="linenr">33: </span>g_y   <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_y)
<span class="linenr">34: </span>g_emp <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_emp)
<span class="linenr">35: </span>
<span class="linenr">36: </span>g1 <span style="color: #7fffd4;">&lt;-</span> cbind(g_x,  g_emp, size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">37: </span>g2 <span style="color: #7fffd4;">&lt;-</span> cbind(g_xy, g_y,   size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">38: </span>g  <span style="color: #7fffd4;">&lt;-</span> rbind(g1,   g2,    size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">39: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-7.png'</span>
<span class="linenr">40: </span>ggsave(file=fname, plot=g, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-7.png" alt="Stan04-fig4-7.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> ベイズ信頼区間</h3>
<div class="outline-text-3" id="text-3-5">
<p>
ベイズ信頼区間(R の中での計算の例)<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">11: </span>N_X <span style="color: #7fffd4;">&lt;-</span> length(X_new)
<span class="linenr">12: </span>N_mcmc <span style="color: #7fffd4;">&lt;-</span> length(ms$lp__)
<span class="linenr">13: </span>
<span class="linenr">14: </span>set.seed(1234)
<span class="linenr">15: </span>y_base_mcmc <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">16: </span>y_mcmc      <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">i &#21015;&#30446;&#12398;&#12487;&#12540;&#12479;&#12434;&#20316;&#12427;</span>
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_X) {
<span class="linenr">20: </span>    y_base_mcmc[,i] <span style="color: #7fffd4;">&lt;-</span> ms$a + ms$b * X_new[i]
<span class="linenr">21: </span>    y_mcmc[,i]      <span style="color: #7fffd4;">&lt;-</span> rnorm(n=N_mcmc,mean=y_base_mcmc[,i],sd=ms$sigma)
<span class="linenr">22: </span>}
<span class="linenr">23: </span>conf <span style="color: #7fffd4;">&lt;-</span> data.frame(X=X_new,t(apply(y_base_mcmc,2,quantile,probs=c(0.025,0.25,0.50,0.75,0.975))))
<span class="linenr">24: </span>colnames(conf) <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'X'</span>,<span style="color: #ffa07a;">'p025'</span>,<span style="color: #ffa07a;">'p250'</span>,<span style="color: #ffa07a;">'p500'</span>,<span style="color: #ffa07a;">'p750'</span>,<span style="color: #ffa07a;">'p975'</span>)
<span class="linenr">25: </span>
<span class="linenr">26: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">27: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">28: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p025,ymax=p975),alpha=1/6)
<span class="linenr">29: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p250,ymax=p750),alpha=2/6)
<span class="linenr">30: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(  data=conf,aes(x=X,y=p500),size=0.2) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">31: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point( data=d,   aes(x=X,y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">32: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">33: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">34: </span>
<span class="linenr">35: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-left.png'</span>
<span class="linenr">36: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left.png" alt="Stan04-fig4-8-left.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> ベイズ予測区間</h3>
<div class="outline-text-3" id="text-3-6">
<p>
ベイズ予測区間(R の中での計算の例)<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">11: </span>N_X <span style="color: #7fffd4;">&lt;-</span> length(X_new)
<span class="linenr">12: </span>N_mcmc <span style="color: #7fffd4;">&lt;-</span> length(ms$lp__)
<span class="linenr">13: </span>
<span class="linenr">14: </span>set.seed(1234)
<span class="linenr">15: </span>y_base_mcmc <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">16: </span>y_mcmc      <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">i &#21015;&#30446;&#12398;&#12487;&#12540;&#12479;&#12434;&#20316;&#12427;</span>
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_X) {
<span class="linenr">20: </span>    y_base_mcmc[,i] <span style="color: #7fffd4;">&lt;-</span> ms$a + ms$b * X_new[i]
<span class="linenr">21: </span>    y_mcmc[,i]      <span style="color: #7fffd4;">&lt;-</span> rnorm(n=N_mcmc,mean=y_base_mcmc[,i],sd=ms$sigma)
<span class="linenr">22: </span>}
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">y_base_mcmc --&gt; y_mcmc &#12395;&#22793;&#26356;&#12375;&#12383;&#12384;&#12369;</span>
<span class="linenr">25: </span>conf <span style="color: #7fffd4;">&lt;-</span> data.frame(X=X_new,t(apply(y_mcmc,2,quantile,probs=c(0.025,0.25,0.50,0.75,0.975))))
<span class="linenr">26: </span>colnames(conf) <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'X'</span>,<span style="color: #ffa07a;">'p025'</span>,<span style="color: #ffa07a;">'p250'</span>,<span style="color: #ffa07a;">'p500'</span>,<span style="color: #ffa07a;">'p750'</span>,<span style="color: #ffa07a;">'p975'</span>)
<span class="linenr">27: </span>
<span class="linenr">28: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">29: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">30: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p025,ymax=p975),alpha=1/6)
<span class="linenr">31: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p250,ymax=p750),alpha=2/6)
<span class="linenr">32: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(  data=conf,aes(x=X,y=p500),size=0.2) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">33: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point( data=d,   aes(x=X,y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">34: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">35: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">36: </span>
<span class="linenr">37: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-right.png'</span>
<span class="linenr">38: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right.png" alt="Stan04-fig4-8-right.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> transformed parametes 及び generated quantities ブロック</h3>
<div class="outline-text-3" id="text-3-7">
<p>
処理は出来るだけ Stan 側でやらせたい.<br />
R では出てきたデータの解析と図示に使う.<br />
</p>

<p>
ベイズ信頼区間, 予測区間など, サンプルから派生する乱数計算部分を Stan に任せる.<br />
(model4-4.stan)<br />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X</span>[N];
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#36861;&#21152;&#37096;&#20998;</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N_new</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X_new</span>[N_new];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">b</span>;
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0&gt; <span style="color: #eedd82;">sigma</span>;
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">transformed parameters &#12391;&#12399;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">data, parameter &#12434;&#32068;&#12415;&#21512;&#12431;&#12379;&#12390;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#26032;&#12375;&#12356;&#12469;&#12531;&#12503;&#12522;&#12531;&#12464;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#20316;&#25104;&#20986;&#26469;&#12427;.</span>
<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_base</span>[N];
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N) {
    y_base[i] <span style="color: #7fffd4;">=</span> a + b*X[i];
  }
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N) {
    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(y_base[i],sigma);
  }
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">generated quantities &#12391;&#12399;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">data, parameter, transformed parameter &#12434;&#20351;&#12387;&#12390;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#26032;&#12375;&#12356;&#12469;&#12531;&#12503;&#12522;&#12531;&#12464;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#20316;&#25104;&#20986;&#26469;&#12427;.</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#20998;&#24067;&#12395;&#24467;&#12358;&#20081;&#25968;&#20316;&#25104;&#12398;&#38555;&#12395;&#12399;, ~ &#12391;&#12399;&#12394;&#12367;</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">y = &#20998;&#24067;&#21517;_rng(parameter) &#12392;&#12356;&#12358;&#24418;&#12391; = &#12391;&#20195;&#20837;&#12377;&#12427;&#28857;&#12395;&#27880;&#24847;&#12377;&#12427;.</span>
<span style="color: #00ffff;">generated quantities</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_base_new</span>[N_new];
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_new</span>[N_new];
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_new) {
    y_base_new[i] <span style="color: #7fffd4;">=</span> a + b*X_new[i];
    y_new[i]      <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">normal_rng</span>(y_base_new[i],sigma);
  }
}
</pre>
</div>

<p>
cmdstanr を用いてキックする R code を作成する.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span style="color: #7fffd4;">library</span>(cmdstanr)
d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
data  <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(d),X=d$X,Y=d$Y,N_new=length(X_new),X_new=X_new)
model <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'model4-4.stan'</span>)
fit   <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'model4-4'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
....
Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.1 seconds.
Chain 2 finished in 0.1 seconds.
Chain 3 finished in 0.1 seconds.
Chain 4 finished in 0.1 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.1 seconds.
Total execution time: 0.3 seconds.
</pre>

<p>
ちょっとテスト. df の中身を確認.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, <span style="color: #ffa07a;">'quantile'</span>, <span style="color: #ffa07a;">'rhat'</span>,<span style="color: #ffa07a;">'ess_bulk'</span>,<span style="color: #ffa07a;">'ess_tail'</span>)
<span class="linenr">8: </span>head(df)
</pre>
</div>

<pre class="example">
# A tibble: 6 × 11
  variable     mean    sd  `0%` `25%` `50%` `75%` `100%`  rhat ess_bulk ess_tail
  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 y_base_new…  386.  40.9  217.  360.  386.  412.   575.  1.00    1366.    1353.
2 y_base_new…  408.  39.3  246.  383.  407.  432.   588.  1.00    1382.    1303.
3 y_base_new…  429.  37.8  274.  405.  429.  453.   602.  1.00    1401.    1419.
4 y_base_new…  451.  36.3  303.  428.  451.  474.   616.  1.00    1421.    1414.
5 y_base_new…  473.  34.9  331.  451.  473.  495.   630.  1.00    1444.    1395.
6 y_base_new…  495.  33.4  359.  474.  495.  516.   644.  1.00    1473.    1438.
</pre>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr"> 9: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">10: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">11: </span>print(df)
<span class="linenr">12: </span>print(class(df$<span style="color: #ffa07a;">"50%"</span>))  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#26360;&#12365;&#20986;&#12377;&#12392;&#12365;&#12399;&#12371;&#12428;&#12391;&#12418;OK&#12384;&#12364;.</span>
<span class="linenr">13: </span>print(df$<span style="color: #000000; background-color: #ffffff;">`50%`</span>)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">ggplot &#12398; aes &#12391;&#20351;&#12358;&#12392;&#12365;&#12399; `50%` (back quote?) &#12434;&#20351;&#12358;</span>
<span class="linenr">14: </span>print(X_new)
</pre>
</div>

<pre class="example">
# A tibble: 38 × 9
   variable        mean    sd `2.5%` `25%` `50%` `75%` `97.5%` X_new
   &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;
 1 y_base_new[1]   386.  40.9   305.  360.  386.  412.    466.    23
 2 y_base_new[2]   408.  39.3   329.  383.  407.  432.    485.    24
 3 y_base_new[3]   429.  37.8   354.  405.  429.  453.    504.    25
 4 y_base_new[4]   451.  36.3   379.  428.  451.  474.    522.    26
 5 y_base_new[5]   473.  34.9   403.  451.  473.  495.    541.    27
 6 y_base_new[6]   495.  33.4   428.  474.  495.  516.    561.    28
 7 y_base_new[7]   517.  32.0   453.  497.  516.  537.    580.    29
 8 y_base_new[8]   538.  30.7   477.  519.  538.  558.    599.    30
 9 y_base_new[9]   560.  29.3   502.  542.  560.  579.    619.    31
10 y_base_new[10]  582.  28.0   526.  564.  582.  600.    638.    32
# … with 28 more rows
[1] "numeric"
 [1]  385.5130  407.4335  429.0850  451.3160  472.9815  494.5715  516.3015
 [8]  537.9880  559.8315  581.7540  603.2995  625.3255  647.2970  669.3170
[15]  691.0870  713.0220  734.9595  756.7530  778.5770  800.3400  822.2360
[22]  844.0335  865.6885  887.4945  909.2655  931.0180  953.1985  975.1065
[29]  996.8525 1018.6000 1040.5050 1062.1500 1084.0350 1105.8150 1127.7300
[36] 1149.6500 1171.4100 1193.2600
 [1] 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[26] 48 49 50 51 52 53 54 55 56 57 58 59 60
</pre>

<p>
ベイズ信頼区間の図を描いてみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">95% &#20449;&#38972;&#21306;&#38291;</span>
<span class="linenr"> 5: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 6: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 9: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">10: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">11: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr">12: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">13: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20803;&#12487;&#12540;&#12479;</span>
<span class="linenr">16: </span>d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#22259;</span>
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot() + geom_point(data=d, mapping=aes(x=X,y=Y), shape=1, size=3)
<span class="linenr">20: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=df,mapping=aes(x=X_new,y=<span style="color: #000000; background-color: #ffffff;">`50%`</span>))
<span class="linenr">21: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`97.5%`</span>,ymin=<span style="color: #000000; background-color: #ffffff;">`2.5%`</span>),alpha=1/6)
<span class="linenr">22: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`75%`</span>  ,ymin=<span style="color: #000000; background-color: #ffffff;">`25%`</span> ),alpha=2/6)
<span class="linenr">23: </span>
<span class="linenr">24: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-left_cmdstan.png'</span>
<span class="linenr">25: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left_cmdstan.png" alt="Stan04-fig4-8-left_cmdstan.png" /><br />
</p>
</div>

<p>
ベイズ予測区間<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">95% &#20449;&#38972;&#21306;&#38291;</span>
<span class="linenr"> 5: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 6: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 9: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">10: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">11: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr">12: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">13: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20803;&#12487;&#12540;&#12479;</span>
<span class="linenr">16: </span>d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#22259;</span>
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot() + geom_point(data=d, mapping=aes(x=X,y=Y), shape=1, size=3)
<span class="linenr">20: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=df,mapping=aes(x=X_new,y=<span style="color: #000000; background-color: #ffffff;">`50%`</span>))
<span class="linenr">21: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`97.5%`</span>,ymin=<span style="color: #000000; background-color: #ffffff;">`2.5%`</span>),alpha=1/6)
<span class="linenr">22: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`75%`</span>  ,ymin=<span style="color: #000000; background-color: #ffffff;">`25%`</span> ),alpha=2/6)
<span class="linenr">23: </span>
<span class="linenr">24: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-right_cmdstan.png'</span>
<span class="linenr">25: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right_cmdstan.png" alt="Stan04-fig4-8-right_cmdstan.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> Stan で実装(2) cmdstanpy</h3>
<div class="outline-text-3" id="text-3-8">
<p>
Stan code は generated quantities がある model4-4.stan を用いよう.<br />
キックする Python script (cmdstanpy) を書く.<br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #00ffff;">from</span> cmdstanpy <span style="color: #00ffff;">import</span> CmdStanModel
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 5: </span><span style="color: #eedd82;">N</span> = <span style="color: #b0c4de;">len</span>(d)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d.iloc[:,0]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d.iloc[:,1]
<span class="linenr"> 8: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr"> 9: </span><span style="color: #eedd82;">N_new</span> = <span style="color: #b0c4de;">len</span>(X_new)
<span class="linenr">10: </span><span style="color: #eedd82;">data</span> = {<span style="color: #ffa07a;">'N'</span>: N, <span style="color: #ffa07a;">'X'</span>: X,  <span style="color: #ffa07a;">'Y'</span>: Y, <span style="color: #ffa07a;">'N_new'</span>: N_new, <span style="color: #ffa07a;">'X_new'</span>: X_new}
<span class="linenr">11: </span><span style="color: #eedd82;">model</span> = CmdStanModel(stan_file=<span style="color: #ffa07a;">'model4-4.stan'</span>,model_name=<span style="color: #ffa07a;">'model4-4'</span>)
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = model.sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">13: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#25351;&#23450;&#12391;&#12365;&#12394;&#12356;... timestamp &#12392;&#12363;&#35201;&#12425;&#12394;&#12356;&#12435;&#12384;&#12364;.</span>
<span class="linenr">14: </span>fit.save_csvfiles(<span style="color: #b0c4de;">dir</span>=<span style="color: #ffa07a;">'./'</span>)
<span class="linenr">15: </span><span style="color: #eedd82;">fpd</span> = fit.summary()
<span class="linenr">16: </span><span style="color: #00ffff;">print</span>(fpd.head(50))
</pre>
</div>

<pre class="example">
                  Mean   MCSE  StdDev      5%  ...     95%   N_Eff  N_Eff/s  R_hat
name                                           ...                                
lp__             -94.0  0.049     1.5   -96.0  ...   -92.0   910.0   3300.0    1.0
a               -120.0  2.300    79.0  -240.0  ...    10.0  1200.0   4400.0    1.0
b                 22.0  0.050     1.7    19.0  ...    25.0  1200.0   4400.0    1.0
sigma             85.0  0.460    16.0    64.0  ...   110.0  1300.0   4600.0    1.0
y_base[1]        408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base[2]        408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base[3]        451.0  0.980    36.0   394.0  ...   510.0  1376.0   5004.0    1.0
y_base[4]        582.0  0.700    28.0   537.0  ...   627.0  1598.0   5810.0    1.0
y_base[5]        604.0  0.660    27.0   561.0  ...   647.0  1667.0   6061.0    1.0
y_base[6]        648.0  0.570    25.0   608.0  ...   687.0  1859.0   6759.0    1.0
y_base[7]        713.0  0.440    22.0   677.0  ...   748.0  2443.0   8884.0    1.0
y_base[8]        757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base[9]        757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base[10]       822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base[11]       822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base[12]       844.0  0.290    19.0   812.0  ...   875.0  4461.0  16224.0    1.0
y_base[13]       931.0  0.320    21.0   897.0  ...   965.0  4192.0  15242.0    1.0
y_base[14]      1019.0  0.460    24.0   979.0  ...  1058.0  2781.0  10114.0    1.0
y_base[15]      1106.0  0.630    29.0  1058.0  ...  1154.0  2127.0   7734.0    1.0
y_base[16]      1106.0  0.630    29.0  1058.0  ...  1154.0  2127.0   7734.0    1.0
y_base[17]      1128.0  0.680    30.0  1078.0  ...  1178.0  2026.0   7367.0    1.0
y_base[18]      1150.0  0.720    32.0  1097.0  ...  1202.0  1941.0   7058.0    1.0
y_base[19]      1171.0  0.770    33.0  1117.0  ...  1226.0  1869.0   6796.0    1.0
y_base[20]      1171.0  0.770    33.0  1117.0  ...  1226.0  1869.0   6796.0    1.0
y_base_new[1]    386.0  1.100    41.0   320.0  ...   452.0  1322.0   4807.0    1.0
y_base_new[2]    408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base_new[3]    429.0  1.000    38.0   370.0  ...   491.0  1355.0   4929.0    1.0
y_base_new[4]    451.0  0.980    36.0   394.0  ...   510.0  1376.0   5004.0    1.0
y_base_new[5]    473.0  0.930    35.0   418.0  ...   529.0  1400.0   5092.0    1.0
y_base_new[6]    495.0  0.890    33.0   442.0  ...   548.0  1427.0   5187.0    1.0
y_base_new[7]    517.0  0.840    32.0   466.0  ...   568.0  1458.0   5302.0    1.0
y_base_new[8]    538.0  0.790    31.0   489.0  ...   588.0  1496.0   5440.0    1.0
y_base_new[9]    560.0  0.750    29.0   514.0  ...   607.0  1542.0   5607.0    1.0
y_base_new[10]   582.0  0.700    28.0   537.0  ...   627.0  1598.0   5810.0    1.0
y_base_new[11]   604.0  0.660    27.0   561.0  ...   647.0  1667.0   6061.0    1.0
y_base_new[12]   626.0  0.610    26.0   585.0  ...   667.0  1752.0   6371.0    1.0
y_base_new[13]   648.0  0.570    25.0   608.0  ...   687.0  1859.0   6759.0    1.0
y_base_new[14]   669.0  0.530    23.0   631.0  ...   708.0  1996.0   7257.0    1.0
y_base_new[15]   691.0  0.480    23.0   654.0  ...   728.0  2191.0   7966.0    1.0
y_base_new[16]   713.0  0.440    22.0   677.0  ...   748.0  2443.0   8884.0    1.0
y_base_new[17]   735.0  0.400    21.0   700.0  ...   769.0  2771.0  10077.0    1.0
y_base_new[18]   757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base_new[19]   779.0  0.330    20.0   746.0  ...   811.0  3615.0  13145.0    1.0
y_base_new[20]   800.0  0.310    20.0   768.0  ...   832.0  4045.0  14708.0    1.0
y_base_new[21]   822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base_new[22]   844.0  0.290    19.0   812.0  ...   875.0  4461.0  16224.0    1.0
y_base_new[23]   866.0  0.290    20.0   834.0  ...   897.0  4526.0  16458.0    1.0
y_base_new[24]   888.0  0.300    20.0   855.0  ...   919.0  4470.0  16255.0    1.0
y_base_new[25]   909.0  0.310    20.0   876.0  ...   942.0  4314.0  15689.0    1.0
y_base_new[26]   931.0  0.320    21.0   897.0  ...   965.0  4192.0  15242.0    1.0

[50 rows x 9 columns]
</pre>

<p>
csv ファイルからロードできる.<br />
<a href="https://discourse.mc-stan.org/t/what-is-the-proper-way-to-save-a-cmdstanpy-model-after-a-fit-has-been-complete/25020/2">What is the proper way to save a cmdstanpy model after a fit has been complete? - General - The Stan Forums</a><br />
<a href="https://cmdstanpy.readthedocs.io/en/v1.0.0rc1/api.html#cmdstanpy.from_csv">API Reference — CmdStanPy 1.0.0rc1 documentation</a><br />
<a href="https://mc-stan.org/cmdstanpy/api.html">API Reference — CmdStanPy 1.0.1 documentation</a><br />
<a href="https://mc-stan.org/cmdstanpy/index.html">cmdstanpy – Python interface to CmdStan — CmdStanPy 1.0.1 documentation</a><br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 2: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20309;&#12363;&#38754;&#20498;</span>
<span class="linenr"> 3: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 4: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 5: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr"> 8: </span><span style="color: #eedd82;">df</span> = fit.summary(percentiles=(2.5, 50, 97.5))
<span class="linenr"> 9: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">type</span>(df))   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">pandas dataframe &#12392;&#12375;&#12390;&#20445;&#23384;&#12373;&#12428;&#12390;&#12356;&#12427;&#27096;&#23376;.</span>
<span class="linenr">10: </span><span style="color: #00ffff;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
&lt;class 'pandas.core.frame.DataFrame'&gt;
            Mean   MCSE  StdDev   2.5%    50%  97.5%   N_Eff  N_Eff/s  R_hat
name                                                                        
lp__       -94.0  0.049     1.5  -98.0  -93.0  -92.0   910.0   3100.0    1.0
a         -120.0  2.300    79.0 -290.0 -120.0   32.0  1200.0   4100.0    1.0
b           22.0  0.050     1.7   18.0   22.0   25.0  1200.0   4100.0    1.0
sigma       85.0  0.460    16.0   60.0   83.0  120.0  1300.0   4200.0    1.0
y_base[1]  408.0  1.100    39.0  323.0  407.0  482.0  1337.0   4503.0    1.0
</pre>

<p>
cmdstanpy の計算結果 csv ファイルを R (cmdstanr) で読み込むことも可能<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>fit$summary()
</pre>
</div>

<pre class="example">
# A tibble: 100 × 10
   variable    mean median    sd   mad     q5    q95  rhat ess_bulk ess_tail
   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1 lp__       -93.7  -93.3  1.46  1.12  -96.5 -92.2   1.00    1133.    1216.
 2 a         -116.  -117.  78.6  74.3  -242.    9.99  1.00    1248.    1240.
 3 b           21.8   21.8  1.75  1.62   19.0  24.6   1.00    1253.    1232.
 4 sigma       85.3   82.9 16.4  14.2    63.7 114.    1.00    1523.    1343.
 5 y_base[1]  408.   407.  39.3  37.1   346.  471.    1.00    1382.    1303.
 6 y_base[2]  408.   407.  39.3  37.1   346.  471.    1.00    1382.    1303.
 7 y_base[3]  451.   451.  36.3  34.0   394.  510.    1.00    1421.    1414.
 8 y_base[4]  582.   582.  28.0  26.6   537.  627.    1.00    1662.    1715.
 9 y_base[5]  604.   603.  26.8  25.5   561.  647.    1.00    1736.    1745.
10 y_base[6]  648.   647.  24.5  23.1   608.  687.    1.00    1939.    1927.
# … with 90 more rows
</pre>

<p>
パラメータの分布(密度グラフ)<br />
<a href="https://www.delftstack.com/ja/howto/matplotlib/matplotlib-density-plot/">Matplotlib 密度プロット | Delft スタック</a><br />
from scipy.stats import kde<br />
density = kde.gaussian_kde(データ)<br />
x = np.linspace(x最小, x最大, 分割数)<br />
y = density(x)  # 密度値の推定<br />
ax.plot(x,y)<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #eedd82;">adens</span> = kde.gaussian_kde(adraw)
<span class="linenr">17: </span><span style="color: #eedd82;">x</span> = np.linspace(-350,150,100)
<span class="linenr">18: </span><span style="color: #eedd82;">y</span> = adens(x)
<span class="linenr">19: </span>
<span class="linenr">20: </span><span style="color: #eedd82;">bdens</span> = kde.gaussian_kde(bdraw)
<span class="linenr">21: </span><span style="color: #eedd82;">bx</span> = np.linspace(15,30,100)
<span class="linenr">22: </span><span style="color: #eedd82;">by</span> = bdens(bx)
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #eedd82;">sdens</span> = kde.gaussian_kde(sdraw)
<span class="linenr">25: </span><span style="color: #eedd82;">sx</span> = np.linspace(50,170,100)
<span class="linenr">26: </span><span style="color: #eedd82;">sy</span> = sdens(sx)
<span class="linenr">27: </span>
<span class="linenr">28: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">29: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">30: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">31: </span>ax.plot(x,y)
<span class="linenr">32: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">33: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">34: </span>ax2.plot(bx,by)
<span class="linenr">35: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">36: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">37: </span>ax3.plot(sx,sy)
<span class="linenr">38: </span>
<span class="linenr">39: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">40: </span>plt.tight_layout()
<span class="linenr">41: </span>
<span class="linenr">42: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_dens_py.png'</span>
<span class="linenr">43: </span>fig.show()
<span class="linenr">44: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens_py.png" alt="Stan04-model4-5_param_dens_py.png" /><br />
</p>
</div>

<p>
<a href="https://pythondatascience.plavox.info/matplotlib/%E3%83%92%E3%82%B9%E3%83%88%E3%82%B0%E3%83%A9%E3%83%A0">matplotlib でヒストグラムを描く – Python でデータサイエンス</a><br />
ヒストグラムのパラメータ<br />
  plt.hist(x, bins=16) # 棒の数を 16 に<br />
  plt.hist(x, range(50,100))  # 50 - 100 まで<br />
  plt.hist(x, normed=True)    # 正規化<br />
  plt.hist(x, rwidth=0.8)     # 棒の幅<br />
  plt.hist(x, color="red")    # 棒の色<br />
</p>

<p>
パラメータの分布(ヒストグラム)<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">17: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">18: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">19: </span>ax.hist(adraw)
<span class="linenr">20: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">21: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">22: </span>ax2.hist(bdraw)
<span class="linenr">23: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">24: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">25: </span>ax3.hist(sdraw)
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">28: </span>plt.tight_layout()
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_hist_py.png'</span>
<span class="linenr">31: </span>fig.show()
<span class="linenr">32: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_hist_py.png" alt="Stan04-model4-5_param_hist_py.png" /><br />
</p>
</div>

<p>
trace plot<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 6: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">10: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">13: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">xmax</span> = <span style="color: #b0c4de;">len</span>(adraw)
<span class="linenr">15: </span><span style="color: #00ffff;">print</span>(xmax)
<span class="linenr">16: </span><span style="color: #eedd82;">rng</span> = <span style="color: #b0c4de;">range</span>(0, xmax)
<span class="linenr">17: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(rng))
</pre>
</div>

<pre class="example">
4000
4000
</pre>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span><span style="color: #eedd82;">x</span> = <span style="color: #b0c4de;">range</span>(0, <span style="color: #b0c4de;">len</span>(adraw))
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">18: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">19: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">20: </span>ax.plot(x,adraw)
<span class="linenr">21: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">22: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">23: </span>ax2.plot(x,bdraw)
<span class="linenr">24: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">25: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">26: </span>ax3.plot(x,sdraw)
<span class="linenr">27: </span>
<span class="linenr">28: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">29: </span>plt.tight_layout()
<span class="linenr">30: </span>
<span class="linenr">31: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_trace_py.png'</span>
<span class="linenr">32: </span>fig.show()
<span class="linenr">33: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_trace_py.png" alt="Stan04-model4-5_param_trace_py.png" /><br />
</p>
</div>

<p>
ベイズ信頼区間<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 6: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 7: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(d[<span style="color: #ffa07a;">'X'</span>]))
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(type(la))   # dict</span>
<span class="linenr">16: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base'</span>]
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #eedd82;">p</span> = np.percentile(ybase[:,0], q=[2.5, 25, 50, 75, 97.5]) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">[329.275975 382.54375  407.4335   432.47275  484.563225]</span>
<span class="linenr">19: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(p)</span>
<span class="linenr">20: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">21: </span><span style="color: #eedd82;">i</span> = 42
<span class="linenr">22: </span><span style="color: #eedd82;">df</span>[23] = np.percentile(ybase[:,0], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">23: </span><span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i-23], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#36578;&#32622;</span>
<span class="linenr">25: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">26: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517;&#12398;&#35373;&#23450;</span>
<span class="linenr">27: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">28: </span><span style="color: #00ffff;">print</span>(df3)
</pre>
</div>

<pre class="example">
20
           p2.5         p25        p50         p75        p97.5
23   329.275975   382.54375   407.4335   432.47275   484.563225
42  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
</pre>

<p>
<a href="https://note.nkmk.me/python-pandas-dataframe-rename/">pandas.DataFrameの行名・列名の変更 | note.nkmk.me</a><br />
列名付け替え<br />
  df.set_axis(['col1', 'col2'], axis='columns')<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;2</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 6: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 7: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base'</span>]
<span class="linenr">16: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">17: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X)):
<span class="linenr">18: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">19: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">20: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">21: </span><span style="color: #00ffff;">print</span>(df3)
</pre>
</div>

<pre class="example">
           p2.5         p25        p50         p75        p97.5
0    329.275975   382.54375   407.4335   432.47275   484.563225
1    329.275975   382.54375   407.4335   432.47275   484.563225
2    379.150450   428.25850   451.3160   474.11425   522.375525
3    526.263225   564.34250   581.7540   599.98400   638.039400
4    550.385900   586.78125   603.2995   621.00875   657.497800
5    598.459200   631.78200   647.2970   663.10925   696.845625
6    670.206100   699.27075   713.0220   726.92225   755.416825
7    716.318075   743.69250   756.7530   769.93875   796.053550
8    716.318075   743.69250   756.7530   769.93875   796.053550
9    782.588625   809.31350   822.2360   834.73925   860.563200
10   782.588625   809.31350   822.2360   834.73925   860.563200
11   804.537575   831.35400   844.0335   856.57175   882.364875
12   889.549775   918.08100   931.0180   944.99675   974.112375
13   970.801500  1003.26750  1018.6000  1033.78250  1068.110500
14  1048.405500  1087.87750  1105.8150  1124.20000  1165.291000
15  1048.405500  1087.87750  1105.8150  1124.20000  1165.291000
16  1068.381250  1108.75000  1127.7300  1146.72250  1190.291000
17  1086.878250  1129.85000  1149.6500  1169.22750  1214.831250
18  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
19  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
</pre>

<p>
<a href="http://nolinknolife.livedoor.blog/archives/16513660.html">pythonでグラフ上に白抜き○をプロットする : No Link No Life</a><br />
<a href="https://www.delftstack.com/ja/howto/matplotlib/how-to-set-marker-size-of-scatter-plot-in-matplotlib/">Matplotlib で散布図のマーカーサイズを設定する方法 | Delft スタック</a><br />
  plt.scatter(x,y, marker='o', s=100, facecolor='None', edgecolor='black')  # s は丸のサイズ<br />
<a href="https://salad-bowl-of-knowledge.github.io/hp/statistics/2019/02/11/confidence_band.html">Matplotlibのみで線形回帰の信頼区間を描画する | 知識のサラダボウル</a><br />
  plt.fill_between(x, lower, upper, color='', alpha=0.4) こんな感じで描くことができそう<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d[<span style="color: #ffa07a;">'Y'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">16: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base_new'</span>]
<span class="linenr">17: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">18: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">19: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">20: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">21: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">d['X'] &#12392; df3 &#12434;&#20351;&#12358;</span>
<span class="linenr">24: </span>
<span class="linenr">25: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(5,5))
<span class="linenr">26: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,1,1)
<span class="linenr">27: </span>ax.scatter(X,Y, marker=<span style="color: #ffa07a;">'o'</span>, s=50, facecolor=<span style="color: #ffa07a;">'None'</span>, edgecolors=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr">28: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p2.5'</span>], df3[<span style="color: #ffa07a;">'p97.5'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.2)
<span class="linenr">29: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p25'</span>], df3[<span style="color: #ffa07a;">'p75'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.5)
<span class="linenr">30: </span>plt.tight_layout()
<span class="linenr">31: </span>
<span class="linenr">32: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'fig4-8-left_py.png'</span>
<span class="linenr">33: </span>fig.show()
<span class="linenr">34: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left_py.png" alt="Stan04-fig4-8-left_py.png" /><br />
</p>
</div>

<p>
ベイズ予測区間<br />
同様に作ればよいだろう.<br />
まずはテスト(確認).<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">y_new</span> = la[<span style="color: #ffa07a;">'y_new'</span>]
<span class="linenr">15: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">type</span>(y_new))   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">numpy.ndarray</span>
<span class="linenr">16: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(y_new))    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">4000 &#21015; (&#27178;&#12395;&#20081;&#25968;&#12364;&#20006;&#12435;&#12391;&#12356;&#12427;&#24863;&#12376;)</span>
<span class="linenr">17: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(y_new[0])) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">38 &#34892;</span>
<span class="linenr">18: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">20: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(y_new[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">21: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">22: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">23: </span><span style="color: #00ffff;">print</span>(df3.head(5))
</pre>
</div>

<pre class="example">
&lt;class 'numpy.ndarray'&gt;
4000
38
         p2.5        p25       p50        p75       p97.5
0  198.123700  326.81750  386.4070  447.93825  574.349600
1  212.061950  346.84150  408.3980  470.50200  598.318850
2  242.332525  367.20725  426.5785  487.02275  620.522400
3  268.728025  388.85600  452.0190  511.67625  638.447125
4  286.956400  411.82775  470.9350  533.02350  651.108675
</pre>


<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d[<span style="color: #ffa07a;">'Y'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #eedd82;">y_new</span> = la[<span style="color: #ffa07a;">'y_new'</span>]
<span class="linenr">18: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">20: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(y_new[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">21: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">22: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">X_new &#12392; df3 &#12434;&#20351;&#12358;</span>
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(5,5))
<span class="linenr">27: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,1,1)
<span class="linenr">28: </span>ax.scatter(X,Y, marker=<span style="color: #ffa07a;">'o'</span>, s=50, facecolor=<span style="color: #ffa07a;">'None'</span>, edgecolors=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr">29: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p2.5'</span>], df3[<span style="color: #ffa07a;">'p97.5'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.2)
<span class="linenr">30: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p25'</span>], df3[<span style="color: #ffa07a;">'p75'</span>],    color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.5)
<span class="linenr">31: </span>plt.tight_layout()
<span class="linenr">32: </span>
<span class="linenr">33: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'fig4-8-right_py.png'</span>
<span class="linenr">34: </span>fig.show()
<span class="linenr">35: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right_py.png" alt="Stan04-fig4-8-right_py.png" /><br />
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dataframe の取り扱い [2021 版]]]></title>
    <link href="http://saito1369.github.io/blog/2021-05-03-DataFrame2021.html"/>
    <updated>2021-05-03T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/DataFrame2021</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. データ加工</a>
<ul>
<li><a href="#sec-3-1">3.1. R</a></li>
<li><a href="#sec-3-2">3.2. dataframe</a></li>
<li><a href="#sec-3-3">3.3. tidyverse</a></li>
<li><a href="#sec-3-4">3.4. Python</a></li>
<li><a href="#sec-3-5">3.5. pandas</a></li>
<li><a href="#sec-3-6">3.6. Julia</a></li>
<li><a href="#sec-3-7">3.7. DataFrams</a></li>
</ul>
</li>
<li><a href="#sec-4">4. グラフ化</a>
<ul>
<li><a href="#sec-4-1">4.1. R</a></li>
<li><a href="#sec-4-2">4.2. ggplot2(基礎)</a></li>
<li><a href="#sec-4-3">4.3. ggplot2 による時系列グラフの作成</a></li>
<li><a href="#sec-4-4">4.4. Python</a></li>
<li><a href="#sec-4-5">4.5. matplotlib(基礎)</a></li>
<li><a href="#sec-4-6">4.6. matplotlib による時系列グラフの作成</a></li>
<li><a href="#sec-4-7">4.7. plotline による時系列グラフの作成</a></li>
<li><a href="#sec-4-8">4.8. Julia</a></li>
<li><a href="#sec-4-9">4.9. PyPlot(基礎)</a></li>
<li><a href="#sec-4-10">4.10. PyPlotによる時系列グラフの作成</a></li>
<li><a href="#sec-4-11">4.11. RCall(ggplot2)による時系列グラフの作成</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-05-03 Mon 19:03&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-09-21 Tue 16:52&gt;</span></span><br />
</p>
<p>
dataframe の取り扱いについて.<br />
以前もほとんど同じことやったけど, version が上がって変わった部分もあったりすっかり忘れてる部分もあったりするのでもう一度改めてやってみよう.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<p>
計算機環境を書いておこう.<br />
いくつかのパソコンでやったので全部書いておく.<br />
全部 Mac だけど.<br />
</p>

<p>
環境1<br />
  MacBook Air (M1, 2020) メモリ16GB<br />
  OS: MacOS Big Sur 11.2.3<br />
    python:  miniforge3-4.10 (Python3.9.2)<br />
    Julia:   version 1.6.1 (arm 用バイナリが無い)<br />
    R:       version 4.0.5 (arm 用バイナリが無い)<br />
    ruby:    3.0.1p64<br />
    perl:    v5.32.1<br />
</p>

<p>
環境2<br />
  iMac(2019) メモリ16GB<br />
  OS: MacOS Mojave 10.14.6<br />
    python:  anaconda3-2020.11 (Python3.8.5)<br />
    Julia:   version 1.5.3<br />
    R:       version 4.0.4<br />
    ruby:    3.0.1p64<br />
    perl:    v5.32.1<br />
</p>

<p>
環境3<br />
  MacBook Pro(2019) メモリ32GB<br />
  OS: MacOS Catalina 10.15.5<br />
    python:  anaconda3-2020.11 (Python3.8.5)<br />
    Julia:   version 1.6.1<br />
    R:       version 4.0.4<br />
    ruby:    3.0.1p64<br />
    perl:    v5.32.1<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
fitbit から心拍数データをとってきた.<br />
こんなデータである.<br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(10))
</pre>
</div>

<pre class="example">
        date           cat         cal   min
0 2021-02-01  Out_of_Range  1548.62703  1298
1 2021-02-01      Fat_Burn   350.27367    93
2 2021-02-01        Cardio   108.05331    15
3 2021-02-01          Peak     0.00000     0
4 2021-02-02  Out_of_Range  1436.70932  1209
5 2021-02-02      Fat_Burn   437.81104    90
6 2021-02-02        Cardio   177.95100    22
7 2021-02-02          Peak     9.49072     1
8 2021-02-03  Out_of_Range  1437.58534  1205
9 2021-02-03      Fat_Burn   762.53009   162
</pre>

<p>
プログラム 2 行目:<br />
  pd.read_csv でファイルを読み込む. pd.read_table とほぼ同じ.<br />
  区切り文字の default が read_csv のときは ",", read_table のときは "\t"<br />
  引数は&#x2026;<br />
</p>
<ul class="org-ul">
<li>ファイル名<br />
</li>
<li>sep="\t"      # 区切り文字<br />
</li>
<li>header=0      # 列名が書いてある行数(default=0) 列名が無い場合は header=None とする.<br />
</li>
<li>names=('date','cat','cal','min') # のように自分で列名を指定できる<br />
</li>
<li>index_col=0   # 行名がある場合. 行名が書いてある列番号を指定できる.<br />
</li>
<li>usecols=[1,3] # 特定の列だけ読み込む場合(例では 2 列目と 4 列目のみ取り込み)<br />
</li>
</ul>

<p>
参考:<br />
<a href="https://note.nkmk.me/python-pandas-read-csv-tsv/">pandasでcsv/tsvファイル読み込み（read_csv, read_table） | note.nkmk.me</a><br />
</p>

<p>
このデータを, 1 日 1 行にしてグラフ化したい.<br />
こんな感じ:<br />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="right" />

<col class="right" />

<col class="left" />

<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">date</th>
<th scope="col" class="right">out_of_range</th>
<th scope="col" class="left">fat_burn</th>
<th scope="col" class="left">cardio</th>
<th scope="col" class="left">peak</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2021-02-01</td>
<td class="right">1298</td>
<td class="left">93</td>
<td class="left">15</td>
<td class="left">0</td>
</tr>

<tr>
<td class="right">2021-02-02</td>
<td class="right">1209</td>
<td class="left">&#x2026;</td>
<td class="left">&#x2026;</td>
<td class="left">&#x2026;</td>
</tr>

<tr>
<td class="right">&#xa0;</td>
<td class="right">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>


<p>
このデータを例にして, データをいい感じで加工しつつ簡単なグラフを描くところまでをやってみたい.<br />
R, python, Julia, で似たようなことをやるにはどうするかをまとめておく.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> データ加工</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> R</h3>
<div class="outline-text-3" id="text-3-1">
<p>
R については, 標準の dataframe を使うか tidyverse を使うか, 選択肢が複数ある.<br />
tidyverse の方が便利な機能が豊富っぽいが, dataframe しか使えない場合もある.<br />
</p>


<p>
参考:<br />
<a href="https://heavywatal.github.io/rstats/dplyr.html">dplyr: 高速data.frame処理 - Heavy Watal</a><br />
<a href="https://heavywatal.github.io/rstats/tidyr.html">tidyr: シンプルなデータ変形ツール - Heavy Watal</a><br />
<a href="http://bcl.sci.yamaguchi-u.ac.jp/~jun/notebook/r/tidyverse/">tidyverse :: Jun Nishii</a><br />
<a href="http://www.sudori.info/stat/stat_tidyverse_01.html">須通り_統計_Tidyverseによるデータフレーム加工（01）tidyr</a><br />
</p>

<p>
<a href="http://www.mishou.be/2019/09/17/r-tidyverse%E3%81%AE%E4%B8%96%E7%95%8C%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B/">R: tidyverseをふつうに使えるようになる 1/5 – Think it aloud</a><br />
<a href="http://www.mishou.be/2019/09/17/r-tidyverse%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B2-5-ver-1/">R: tidyverseをふつうに使えるようになる（tibbleとdplyr） 2/5 – Think it aloud</a><br />
</p>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> dataframe</h3>
<div class="outline-text-3" id="text-3-2">
<p>
まず普通にデータの読み込み. read.table は read.csv でもよい.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.table(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>print(head(df0,5))
</pre>
</div>

<pre class="example">
        date          cat       cal  min
1 2021-02-01 Out_of_Range 1548.6270 1298
2 2021-02-01     Fat_Burn  350.2737   93
3 2021-02-01       Cardio  108.0533   15
4 2021-02-01         Peak    0.0000    0
5 2021-02-02 Out_of_Range 1436.7093 1209
</pre>

<p>
特定の列を抽出する. 1,2,4 列目だけ使いたい(3 列目(cal) は今回はいらないので削除したい).<br />
R の配列は 1 から始まる(1-based).<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>print(head(df,5))
</pre>
</div>

<pre class="example">
        date          cat  min
1 2021-02-01 Out_of_Range 1298
2 2021-02-01     Fat_Burn   93
3 2021-02-01       Cardio   15
4 2021-02-01         Peak    0
5 2021-02-02 Out_of_Range 1209
</pre>

<p>
cat 列が "Out_of_Range" の行のみを取り出してみよう.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26465;&#20214;&#12434;&#28288;&#12383;&#12377;&#34892;&#12434;&#25277;&#20986;</span>
<span class="linenr">4: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date          cat  min
1  2021-02-01 Out_of_Range 1298
5  2021-02-02 Out_of_Range 1209
9  2021-02-03 Out_of_Range 1205
13 2021-02-04 Out_of_Range 1255
17 2021-02-05 Out_of_Range 1289
</pre>

<p>
cat 列は全部同じ値なので要らないか.<br />
df[,c(1,3)] で 1列目と3列目がとれる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,c(1,3)]
<span class="linenr">4: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date  min
1  2021-02-01 1298
5  2021-02-02 1209
9  2021-02-03 1205
13 2021-02-04 1255
17 2021-02-05 1289
</pre>


<p>
min 列の名前を Out_of_Range に変えたい.<br />
</p>

<p>
参考:<br />
列名の変更: <a href="http://tips-r.blogspot.com/2018/02/r.html">Rのデータフレームで、列名指定で列名の一部を変更する方法 - Rプログラミングの小ネタ</a><br />
</p>

<p>
names(df) で列名がとれるのでこれを使う.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,c(1,3)]
<span class="linenr">4: </span>names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"Out_of_Range"</span>      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;&#12398;&#22793;&#26356;</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date Out_of_Range
1  2021-02-01         1298
5  2021-02-02         1209
9  2021-02-03         1205
13 2021-02-04         1255
17 2021-02-05         1289
</pre>

<p>
Out_of_Range だけでなく, Fat_Burn, Cardio, Peak の各カテゴリについても同じことをやってみる.<br />
for 文を使う.<br />
</p>

<p>
参考:  <a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/30.html">繰り返し文</a><br />
</p>

<p>
データフレームの配列を作るには, 以下のようにする.<br />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>array <span style="color: #1e90ff;">&lt;-</span> list()   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">c() &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">2: </span>array <span style="color: #1e90ff;">&lt;-</span> append(array, list(add_ele))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">list(add_ele) &#12395;&#12375;&#12394;&#12356;&#12392; "&#12487;&#12540;&#12479;&#12501;&#12524;&#12540;&#12512;&#12398;&#37197;&#21015;" &#12395;&#12399;&#12394;&#12425;&#12394;&#12356;&#28857;&#65281;&#65281;</span>
</pre>
</div>

<p>
参考:<br />
   <a href="https://teratail.com/questions/197546">Python - Rでデータフレーム の配列を作りたい｜teratail</a><br />
   <a href="https://stackoverflow.com/questions/28687806/a-better-way-to-push-and-pop-to-from-lists-in-r">A better way to push and pop to/from lists in R? - Stack Overflow</a><br />
   <a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/23.html">リスト</a><br />
   <a href="http://takenaka-akio.org/doc/r_auto/list.html">Rプログラム (TAKENAKA's Web Page)</a><br />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>print(head(adf[[2]],5))   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">adf[[1]] &#20108;&#37325;&#12395;&#12363;&#12387;&#12371;&#12434;&#20184;&#12369;&#12427;&#24517;&#35201;&#12354;&#12426;</span>
</pre>
</div>

<pre class="example">
         date Fat_Burn
2  2021-02-01       93
6  2021-02-02       90
10 2021-02-03      162
14 2021-02-04      134
18 2021-02-05      114
</pre>

<p>
ここまでで, 表が何個かできた.<br />
date で merge して一つの表にしたい.<br />
list の最初の要素を取り出すときは以下のように２ステップ必要(めんどくさい)<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[  1 ]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf) &#12391;&#26368;&#21021;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12377;&#37096;&#20998;</span>
<span class="linenr">2: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[ -1 ]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf) &#26368;&#21021;&#12398;&#35201;&#32032;&#12434;&#21066;&#38500;&#12377;&#12427;&#37096;&#20998;</span>
</pre>
</div>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf)</span>
<span class="linenr">11: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[1]      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">Out_of_Range</span>
<span class="linenr">12: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[-1]     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">Fat_Burn, Cardio, Peak</span>
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (ndf <span style="color: #20b2aa; font-weight: bold;">in</span> adf) {
<span class="linenr">14: </span>    mdf <span style="color: #1e90ff;">&lt;-</span> merge(mdf, ndf, by=<span style="color: #ffa07a;">"date"</span>)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34920;&#12398; merge</span>
<span class="linenr">15: </span>}
<span class="linenr">16: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
        date Out_of_Range Fat_Burn Cardio Peak
1 2021-02-01         1298       93     15    0
2 2021-02-02         1209       90     22    1
3 2021-02-03         1205      162     14    0
4 2021-02-04         1255      134      5    2
5 2021-02-05         1289      114      6    0
</pre>

<p>
これと同じことは Reduce 関数を使ってもできるようだ.<br />
Reduce 関数とは？<br />
こんな感じで動くものらしい.<br />
</p>

<p>
Reduce(関数(a,b), 配列) &#x2013;&gt; x = 関数(配列要素(1), 配列要素(2)) を計算 &#x2013;&gt; y = 関数(x, 配列要素(3)) &#x2013;&gt; z = 関数(y, 配列要素(4)) &#x2026;<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/stkdev/items/16099f6e35b98ae62389">Reduce関数活用例:福利計算シミュレーション</a><br />
Reduce 関数:<br />
  Reduce(関数, リスト)<br />
  関数は, ２つの引数をとる.<br />
</p>

<p>
例:<br />
  x &lt;- Reduce(function(a,b) { a+b }, c(1,2,5,7))<br />
</p>

<p>
プログラムの動きの解説:<br />
  まず a に 1, b に 2 を入れる.<br />
  a + b を計算. 3 になる.<br />
  a に 3, b に 5 を入れる.<br />
  a + b を計算. 8 になる.<br />
  a に 8, b に 7 を入れる.<br />
  a + b を計算. 15 になる.<br />
  x に 15 が入る.<br />
  はず.<br />
</p>

<p>
実際にやってみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>data <span style="color: #1e90ff;">&lt;-</span> c(1,2,5,7)
<span class="linenr">2: </span>x <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(a,b) { a+b }, data)
<span class="linenr">3: </span>x
</pre>
</div>

<pre class="example">
[1] 15
</pre>

<p>
Reduce を使って merge してみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head(dfo,5))</span>
<span class="linenr"> 9: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">adf[length(adf)+1] &lt;- dfo</span>
<span class="linenr">10: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>mdf <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(d1,d2) merge(d1,d2,by=<span style="color: #ffa07a;">"date"</span>), adf)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">13: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
        date Out_of_Range Fat_Burn Cardio Peak
1 2021-02-01         1298       93     15    0
2 2021-02-02         1209       90     22    1
3 2021-02-03         1205      162     14    0
4 2021-02-04         1255      134      5    2
5 2021-02-05         1289      114      6    0
</pre>

<p>
(omake)<br />
ついでに Reduce 系関数をいくつか調査.<br />
</p>

<p>
apply:<br />
  行ごと, 列ごとに関数を適用して結果を返す.<br />
  apply(行列データ, 行ごと(1)or列ごと(2), 関数(ベクトルを引数にとるもの), 関数のその他のオプション)<br />
  以下の参考ページが図もあってわかりやすい.<br />
  <a href="http://takenaka-akio.org/doc/r_auto/chapter_07_apply.html">Rプログラム (TAKENAKA's Web Page)</a><br />
</p>

<p>
apply 系関数の説明<br />
<a href="https://heavywatal.github.io/rstats/purrr.html">purrr: ループ処理やapply系関数の決定版 - Heavy Watal</a><br />
</p>

<p>
join の種類についてのわかりやすい説明<br />
<a href="https://qiita.com/matsuou1/items/b1bd9778610e3a586e71">dplyrを使いこなす！JOIN編 - Qiita</a><br />
<a href="http://www.sudori.info/stat/stat_tidyverse_02.html#join">須通り_統計_Tidyverseによるデータフレーム加工（02）dplyr_join による複数データフレームの結合／欠損値補完／ルックアップ</a><br />
<a href="https://kazutan.github.io/kazutanR/hands_on_170730/join.html">データの結合 - *_join関数</a><br />
</p>

<p>
最後は書き出し. write.csv() を使う.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head(dfo,5))</span>
<span class="linenr"> 9: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">adf[length(adf)+1] &lt;- dfo</span>
<span class="linenr">10: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>mdf <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(d1,d2) merge(d1,d2,by=<span style="color: #ffa07a;">"date"</span>), adf)
<span class="linenr">13: </span>write.csv(mdf,<span style="color: #ffa07a;">"data/r.csv"</span>, quote=<span style="color: #9370db;">FALSE</span>, row.names=<span style="color: #9370db;">FALSE</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> tidyverse</h3>
<div class="outline-text-3" id="text-3-3">
<p>
データの読み込みは read_delim(file, delim, &#x2026;)<br />
read_tsv(file) でもよい.<br />
</p>

<p>
参考<br />
<a href="https://heavywatal.github.io/rstats/readr.html">readr - 高速で柔軟なテーブル読み込み</a><br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_delim(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">3: </span>print(head(df0,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 4
  date       cat            cal   min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01 Out_of_Range 1549.  1298
2 2021-02-01 Fat_Burn      350.    93
3 2021-02-01 Cardio        108.    15
4 2021-02-01 Peak            0      0
5 2021-02-02 Out_of_Range 1437.  1209
</pre>

<p>
列ごとの型情報も入っているようだ.<br />
</p>

<p>
特定の列を抽出する<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- dataframe &#12392;&#21516;&#12376;&#12391;&#12356;&#12369;&#12427;</span>
<span class="linenr">4: </span>print(head(df,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 3
  date       cat            min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt;
1 2021-02-01 Out_of_Range  1298
2 2021-02-01 Fat_Burn        93
3 2021-02-01 Cardio          15
4 2021-02-01 Peak             0
5 2021-02-02 Out_of_Range  1209
</pre>

<p>
cat ＝＝ "Out_of_Range" の行を取り出す<br />
filter(df, cat＝＝"Out_of_Range") を使う.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- cat &#21015;&#12364; "Out_of_Range" &#12398;&#12418;&#12398;&#12398;&#12415;&#25277;&#20986;</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 3
  date       cat            min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt;
1 2021-02-01 Out_of_Range  1298
2 2021-02-02 Out_of_Range  1209
3 2021-02-03 Out_of_Range  1205
4 2021-02-04 Out_of_Range  1255
5 2021-02-05 Out_of_Range  1289
</pre>

<p>
cat 列はいらない. 1列目, 3列目のみを取り出したい.<br />
tidyverse では, パイプ %&gt;% を使って以下の様にも書けるようだ.<br />
df %&gt;% select(date,min)  # df から date, min 列だけ取り出す場合.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- date, min &#21015;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date         min
  &lt;date&gt;     &lt;dbl&gt;
1 2021-02-01  1298
2 2021-02-02  1209
3 2021-02-03  1205
4 2021-02-04  1255
5 2021-02-05  1289
</pre>

<p>
dataframe と同じようにも書ける.<br />
普通に 1,3 列目だけ取り出す, という書き方もできる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo0 <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>)
<span class="linenr">5: </span>dfo <span style="color: #1e90ff;">&lt;-</span> dfo0[,c(1,3)]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- 1,3 &#21015;&#30446;&#12384;&#12369;</span>
<span class="linenr">6: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date         min
  &lt;date&gt;     &lt;dbl&gt;
1 2021-02-01  1298
2 2021-02-02  1209
3 2021-02-03  1205
4 2021-02-04  1255
5 2021-02-05  1289
</pre>

<p>
列名の変更<br />
tidyverse では<br />
new_df &lt;- rename(df, 新しい列名 = 古い列名)<br />
</p>

<p>
参考:<br />
<a href="https://indenkun.hatenablog.com/entry/2020/06/21/003000">Rでdplyrをつかって任意の列の列名を変更する方法 - 備忘ログ</a><br />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(Out_of_Range = min)
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<p>
tidyvers はパイプ %&gt;% で繋げていけるので慣れれば書きやすい. 結構楽しいかも.<br />
df %&gt;% 関数(x,y,z,&#x2026;)  は 関数(df, x,y,z&#x2026;) と同じ意味.<br />
</p>

<p>
Out_of_Range だけでなく全部のカテゴリについてやる.<br />
先程と同様, for 文を使おう.<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/sasaki_K_sasaki/items/bdd3d12546e15ee31a55">【R】dplyr rename()の中で変数を使う - Qiita</a><br />
</p>

<p>
列名変更の rename だが&#x2026;<br />
rename の中で変数を使う場合は, rename(!!変数 := 前の列名)  とする必要あり. &lt;&#x2013; 注意<br />
うーん以外とめんどくさい.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo &lt;- filter(df, cat==x) %&gt;% select(date,min) %&gt;% rename(x = min) # &#12371;&#12428;&#12384;&#12392; x &#12392;&#12356;&#12358;&#25991;&#23383;&#21015;&#12364;&#20837;&#12387;&#12390;&#12375;&#12414;&#12358;.</span>
<span class="linenr"> 8: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 9: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">10: </span>}
<span class="linenr">11: </span>print(head(adf[[2]],5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date       Fat_Burn
  &lt;date&gt;        &lt;dbl&gt;
1 2021-02-01       93
2 2021-02-02       90
3 2021-02-03      162
4 2021-02-04      134
5 2021-02-05      114
</pre>

<p>
date で merge して一つの表にする.<br />
ここは dataframe と同じでいける.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[[1]]
<span class="linenr">11: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[-1]
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (ndf <span style="color: #20b2aa; font-weight: bold;">in</span> adf) {
<span class="linenr">13: </span>    mdf <span style="color: #1e90ff;">&lt;-</span> full_join(mdf, ndf, by=<span style="color: #ffa07a;">"date"</span>)
<span class="linenr">14: </span>}
<span class="linenr">15: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 5
  date       Out_of_Range Fat_Burn Cardio  Peak
  &lt;date&gt;            &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01         1298       93     15     0
2 2021-02-02         1209       90     22     1
3 2021-02-03         1205      162     14     0
4 2021-02-04         1255      134      5     2
5 2021-02-05         1289      114      6     0
</pre>


<p>
色々調べてたら, データフレームのリストをまとめて join する方法をみつけた！！<br />
</p>

<p>
参考:<br />
<a href="https://stackoverflow.com/questions/8091303/simultaneously-merge-multiple-data-frames-in-a-list">r - Simultaneously merge multiple data.frames in a list - Stack Overflow</a><br />
</p>

<p>
list_of_df %&gt;% reduce(full_join, by="date") こんな感じで書くといけるらしい.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf <span style="color: #1e90ff;">%&gt;%</span> reduce(full_join, by=<span style="color: #ffa07a;">"date"</span>)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">11: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 5
  date       Out_of_Range Fat_Burn Cardio  Peak
  &lt;date&gt;            &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01         1298       93     15     0
2 2021-02-02         1209       90     22     1
3 2021-02-03         1205      162     14     0
4 2021-02-04         1255      134      5     2
5 2021-02-05         1289      114      6     0
</pre>

<p>
write_csv を使って csv 形式に書き出す.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf <span style="color: #1e90ff;">%&gt;%</span> reduce(full_join, by=<span style="color: #ffa07a;">"date"</span>)
<span class="linenr">11: </span>write_csv(mdf,<span style="color: #ffa07a;">"data/rv.csv"</span>)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Python</h3>
<div class="outline-text-3" id="text-3-4">
<p>
Python では pandas を使ってみる.<br />
</p>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> pandas</h3>
<div class="outline-text-3" id="text-3-5">
<p>
まずデータを普通に読み込み.<br />
0 列目は日付として読み込み.<br />
2 列目(0-based) は使わないので削除する.<br />
</p>

<p>
参考:<br />
<a href="https://note.nkmk.me/python-pandas-read-csv-tsv/">pandasでcsv/tsvファイル読み込み（read_csv, read_table） | note.nkmk.me</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/heart_beats_summary_2021-02.data'</span>,sep=<span style="color: #ffa07a;">'\t'</span>, header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #9acd32;">df2</span> = df.iloc[:,[0,1,3]]
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df2.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
プログラム2 行目:<br />
read_csv で表敬式データを読み込み.<br />
tab 区切りなら read_table("foo.tsv") で良い.<br />
</p>
<ul class="org-ul">
<li>header=0 は 0 行目(最初の行)が column 名の場合.<br />
</li>
<li>column 名がない場合は header=None とする.<br />
</li>
<li>read_csv("foo.tsv", names=("A","B","C","D")) &#x2013;&gt; column 名を A, B, C, D として読み込む.<br />
</li>
<li>parse_dates= は 0 列目が日付として扱われることを示す.<br />
</li>
</ul>

<p>
プログラム 3 行目:<br />
位置の指定方法をここでまとめておく(多分覚えられないけど&#x2026;).<br />
</p>
<ul class="org-ul">
<li>at,  loc は, 行名,  列名   を指定して値を得る.<br />
</li>
<li>iat, iloc は, 行番号,列番号 を指定して値を得る.<br />
</li>
</ul>
<p>
取得データについて.<br />
</p>
<ul class="org-ul">
<li>at,  iat  は単独の要素の値を取得する際に使う.<br />
</li>
<li>loc, iloc は複数の要素の値<br />
<ul class="org-ul">
<li>複数の要素指定では, リスト [0,1,3] 及びスライス start:stop:step が使える.<br />
</li>
<li>： あるいは ：： で全部という意味になる.<br />
</li>
</ul>
</li>
</ul>

<p>
参考:<br />
<a href="https://note.nkmk.me/python-pandas-at-iat-loc-iloc/">pandasで任意の位置の値を取得・変更するat, iat, loc, iloc | note.nkmk.me</a><br />
</p>

<p>
データ取り出しをやってみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.iat[0,1])    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#34892; 1 &#21015;&#30446;(0-based)&#12398;&#20516;</span>
<span class="linenr">4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(df.iloc[::,2])</span>
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.iloc[: ,2].head(5))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20840;&#34892; 2&#21015;&#30446;(0-based)</span>
</pre>
</div>

<pre class="example">
Out_of_Range
0    1548.62703
1     350.27367
2     108.05331
3       0.00000
4    1436.70932
Name: cal, dtype: float64
</pre>

<p>
usecols を使うと, 要らない行は最初から読み込まない.<br />
usecols=[0,1,3] で 2 列目(Python の配列番号は 0 から始まる 0-based)を読み込まない.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
ここから表をバラバラにして再構成する.<br />
まずは cat 列 ＝＝ 'Out_of_Range' のデータを取り出す.<br />
df[df['cat'] ＝＝'Out_of_Range'] &lt;&#x2013; こんな感じで取り出せる.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>]
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo = df[df.iloc[:,1]=='Out_of_Range']</span>
<span class="linenr">5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo = df[df.loc[:,'cat']=='Out_of_Range']</span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date           cat   min
0  2021-02-01  Out_of_Range  1298
4  2021-02-02  Out_of_Range  1209
8  2021-02-03  Out_of_Range  1205
12 2021-02-04  Out_of_Range  1255
16 2021-02-05  Out_of_Range  1289
</pre>

<p>
列 cat ＝＝ 'Out_of_Range' である行を取り出す方法はいくつかあった. これ以外にもあるかもしれん.<br />
  df[df['cat']       ＝＝ 'Out_of_Range']  &lt;&#x2013; これが上で使ったやつ.<br />
  df[df.iloc[:,1]    ＝＝ 'Out_of_Range']<br />
  df[df.loc[:,'cat'] ＝＝ 'Out_of_Range']<br />
</p>

<p>
cat 列はここでは要らないなぁ. 全部同じ値だし. 消すにはどーすればいいんだろうか.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr">4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo = df[df.iloc[:,1]=='Out_of_Range'].iloc[:,[0,2]]</span>
<span class="linenr">5: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo = df[df.loc[:,'cat']=='Out_of_Range'].loc[:,['date','min']]  # loc &#12391;&#12418;&#20986;&#26469;&#12427;.</span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date   min
0  2021-02-01  1298
4  2021-02-02  1209
8  2021-02-03  1205
12 2021-02-04  1255
16 2021-02-05  1289
</pre>

<p>
プログラム 3 行目:<br />
 df.iloc[:,[0,2]] で df の [0,2] 列目(0-based) のみを取り出す.<br />
</p>

<p>
min 列の名前を Out_of_Range としたい.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr">4: </span><span style="color: #9acd32;">dfo.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Out_of_Range'</span>]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">column &#21517;&#12434;&#25351;&#23450;&#12375;&#30452;&#12375;</span>
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date  Out_of_Range
0  2021-02-01          1298
4  2021-02-02          1209
8  2021-02-03          1205
12 2021-02-04          1255
16 2021-02-05          1289
</pre>

<p>
全部の cat に対して同じことをやる.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr"> 4: </span><span style="color: #9acd32;">dff</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Fat_Burn'</span>].iloc[:,[0,2]]
<span class="linenr"> 5: </span><span style="color: #9acd32;">dfc</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Cardio'</span>].iloc[:,[0,2]]
<span class="linenr"> 6: </span><span style="color: #9acd32;">dfp</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Peak'</span>].iloc[:,[0,2]]
<span class="linenr"> 7: </span><span style="color: #9acd32;">dfo.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Out_of_Range'</span>]
<span class="linenr"> 8: </span><span style="color: #9acd32;">dff.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>]
<span class="linenr"> 9: </span><span style="color: #9acd32;">dfc.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Cardio'</span>]
<span class="linenr">10: </span><span style="color: #9acd32;">dfp.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Peak'</span>]
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(3))
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dff.head(3))
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfc.head(3))
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfp.head(3))
</pre>
</div>

<pre class="example">
        date  Out_of_Range
0 2021-02-01          1298
4 2021-02-02          1209
8 2021-02-03          1205
        date  Fat_Burn
1 2021-02-01        93
5 2021-02-02        90
9 2021-02-03       162
         date  Cardio
2  2021-02-01      15
6  2021-02-02      22
10 2021-02-03      14
         date  Peak
3  2021-02-01     0
7  2021-02-02     1
11 2021-02-03     0
</pre>

<p>
似たような文なので for 文でまとめてしまおう.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr">5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr">6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr">7: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(dfx.head(3))
<span class="linenr">8: </span>    adf.append(dfx)
</pre>
</div>

<pre class="example">
        date  Out_of_Range
0 2021-02-01          1298
4 2021-02-02          1209
8 2021-02-03          1205
        date  Fat_Burn
1 2021-02-01        93
5 2021-02-02        90
9 2021-02-03       162
         date  Cardio
2  2021-02-01      15
6  2021-02-02      22
10 2021-02-03      14
         date  Peak
3  2021-02-01     0
7  2021-02-02     1
11 2021-02-03     0
</pre>

<p>
日付 (date) をキーにして merge して一つの表にする.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #9acd32;">df3</span> = df1.merge(df2, on=<span style="color: #ffa07a;">'date'</span>)  &lt;-- df1 &#12392; df2 &#12434; date &#21015;&#12391; merge &#12375;&#12390; df3 &#12395;&#26684;&#32013;
</pre>
</div>

<p>
参考:<br />
<a href="https://note.nkmk.me/python-pandas-merge-join/">pandas.DataFrameを結合するmerge, join（列・インデックス基準） | note.nkmk.me</a><br />
<a href="https://hydrocul.github.io/wiki/programming_languages_diff/list/shift.html">配列(リスト)の先頭の要素を削除するには (shift) | hydroculのメモ</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr"> 5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr"> 6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr"> 7: </span>    adf.append(dfx)
<span class="linenr"> 8: </span><span style="color: #9acd32;">mdf</span> = adf.pop(0)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20808;&#38957;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12375;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> adf:
<span class="linenr">10: </span>    <span style="color: #9acd32;">mdf</span> = mdf.merge(d,on=<span style="color: #ffa07a;">'date'</span>)
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(mdf.head(5))
</pre>
</div>

<pre class="example">
        date  Out_of_Range  Fat_Burn  Cardio  Peak
0 2021-02-01          1298        93      15     0
1 2021-02-02          1209        90      22     1
2 2021-02-03          1205       162      14     0
3 2021-02-04          1255       134       5     2
4 2021-02-05          1289       114       6     0
</pre>

<p>
できた.<br />
</p>

<p>
ファイルに保存しておいてさくっと取り出せるようにしとこう.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr"> 5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr"> 6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr"> 7: </span>    adf.append(dfx)
<span class="linenr"> 8: </span><span style="color: #9acd32;">mdf</span> = adf.pop(0)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20808;&#38957;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12375;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> adf:
<span class="linenr">10: </span>    <span style="color: #9acd32;">mdf</span> = mdf.merge(d,on=<span style="color: #ffa07a;">'date'</span>)
<span class="linenr">11: </span>mdf.to_csv(<span style="color: #ffa07a;">"data/h.csv"</span>,index=<span style="color: #1e90ff;">False</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">csv &#12501;&#12449;&#12452;&#12523;&#12392;&#12375;&#12390;&#20445;&#23384;</span>
</pre>
</div>

<p>
参考:<br />
<a href="https://note.nkmk.me/python-pandas-to-csv/">pandasでcsvファイルの書き出し・追記（to_csv） | note.nkmk.me</a><br />
</p>

<p>
tsv(tab 区切り)で保存したい場合は,<br />
df.to_csv("foo.tsv",sep="\t",index=False) などとすればよい.<br />
index=False は行名を書かない.<br />
列名を書かないときは header=False<br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> Julia</h3>
<div class="outline-text-3" id="text-3-6">
<p>
Julia は DataFrames というパッケージのを使うのがいいのか？<br />
以前とは結構変わってるような.<br />
</p>
</div>
<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> DataFrams</h3>
<div class="outline-text-3" id="text-3-7">
<p>
参考:<br />
<a href="https://dataframes.juliadata.org/stable/">Introduction · DataFrames.jl</a><br />
<a href="https://csv.juliadata.org/stable/">CSV.jl Documentation · CSV.jl</a><br />
</p>

<p>
色々調べて動くプログラムが書いてあるページをやっと見つけた.<br />
<a href="https://blog.goo.ne.jp/r-de-r/e/23c50893ed6648d798c191667a037ed9">Julia でデータフレームを操作する - 裏 RjpWiki</a><br />
</p>

<p>
CSV, DataFrames package を予めインストールしておくこと.<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame)
<span class="linenr">3: </span>println(first(df,5))    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head &#12398;&#20195;&#12431;&#12426;</span>
<span class="linenr">4: </span>println(last(df,5))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tail &#12398;&#20195;&#12431;&#12426;</span>
</pre>
</div>

<pre class="example">
5×4 DataFrame
 Row │ date        cat           cal       min
     │ Date…       String        Float64   Int64
─────┼───────────────────────────────────────────
   1 │ 2021-02-01  Out_of_Range  1548.63    1298
   2 │ 2021-02-01  Fat_Burn       350.274     93
   3 │ 2021-02-01  Cardio         108.053     15
   4 │ 2021-02-01  Peak             0.0        0
   5 │ 2021-02-02  Out_of_Range  1436.71    1209
5×4 DataFrame
 Row │ date        cat           cal        min
     │ Date…       String        Float64    Int64
─────┼────────────────────────────────────────────
   1 │ 2021-02-27  Peak            43.3267      4
   2 │ 2021-02-28  Out_of_Range  1571.49     1374
   3 │ 2021-02-28  Fat_Burn        41.3578     20
   4 │ 2021-02-28  Cardio           0.0         0
   5 │ 2021-02-28  Peak             0.0         0
</pre>

<p>
head -&gt; first<br />
tail -&gt; last   のようだ.<br />
つーか何で method 名変えるかなぁ&#x2026;<br />
前は head, tail で行けた筈なんだけど&#x2026;<br />
</p>

<p>
取得列は select=[1,2,4] のようにするようだ.<br />
Julia は R と同じで配列添字は 1 から始まる(1-based).<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame)
<span class="linenr">3: </span>print(first(df,5))    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head &#12398;&#20195;&#12431;&#12426;</span>
<span class="linenr">4: </span>print(last(df,5))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tail &#12398;&#20195;&#12431;&#12426;</span>
</pre>
</div>

<pre class="example">
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   12095×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-27  Peak              4
   2 │ 2021-02-28  Out_of_Range   1374
   3 │ 2021-02-28  Fat_Burn         20
   4 │ 2021-02-28  Cardio            0
   5 │ 2021-02-28  Peak              0
</pre>

<p>
<a href="https://towardsdatascience.com/read-csv-to-data-frame-in-julia-programming-lang-77f3d0081c14">Read CSV to Data Frame in Julia. Parameters explained. Using CSV.jl… | by Vaclav Dekanovsky | Towards Data Science</a><br />
によると, CSV ファイルを読んで DataFrame にする方法は 3 つある.<br />
まず最初はこれ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = DataFrame(CSV.File(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4]))
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>

<p>
次はこれ. |&gt; はパイプ演算子.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.File(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4]) |&gt; DataFrame
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>

<p>
3 つめが上で使ってるやつ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>, DataFrame; delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4])
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>


<p>
データ取り出すとこやってみる.<br />
cat ＝＝ 'Out_of_Range' のデータ取り出し.<br />
注意点: Julia は ' (シングルクォーテーション) と " (ダブル)を区別する. " (ダブル)じゃないとダメみたいだ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame)
<span class="linenr">3: </span>dfo = df[df.cat .== <span style="color: #ffa07a;">"Out_of_Range"</span>, :]
<span class="linenr">4: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-02  Out_of_Range   1209
   3 │ 2021-02-03  Out_of_Range   1205
   4 │ 2021-02-04  Out_of_Range   1255
   5 │ 2021-02-05  Out_of_Range   1289
</pre>

<p>
df.列名 で列名を持つ列のデータを全て取り出す.<br />
ここでは, プログラム 3 行目の df.cat で cat 列のデータを全て取り出している.<br />
cat 列のデータが "Out_of_Range" である行を全て取り出す.<br />
比較演算子には .(dot) が必要<br />
df.cat .＝＝ "Out_of_Range"    &lt;&#x2013; こんな風に書く必要がある.<br />
数値であれば不等号も使えるがそれにも .(ドット)が必要である.<br />
df.min .&gt; 500 とか.<br />
抽出する列が全部であれば : を使う.<br />
cat 列が要らないのであれば : の代わりに ["date","min"] とかにすればいい.<br />
df[df.cat .=="Out_of_Range", :]  &#x2013;&gt; df[df.cat .== "Out_of_Range",["date","min"]] こんな感じ.<br />
</p>

<p>
index (列番号) でやるにはどうするんだろう.<br />
以下の 3 行目で, 1, 3 列のみ抽出してみる(Julia は R と同様, 配列等は 1-based).<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">3: </span>dfo = df[df[:,2] .== <span style="color: #ffa07a;">"Out_of_Range"</span>, [1,3]];
<span class="linenr">4: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        min
     │ Date…       Int64
─────┼───────────────────
   1 │ 2021-02-01   1298
   2 │ 2021-02-02   1209
   3 │ 2021-02-03   1205
   4 │ 2021-02-04   1255
   5 │ 2021-02-05   1289
</pre>

<p>
できた.<br />
df[df[:,2] == "Out_of_Range", [1,3]]  # df の 2 列目が "Out_of_Range" の 1,3 列目だけとってくる.<br />
</p>

<p>
列の取得方法のいろいろ:<br />
  df.列名<br />
  df[!, :列名]          :列名  は Symbol としての列名のようだ.<br />
  df[!, Symbol("列名")]<br />
  df[:, Symbol("列名")]<br />
  df[!,列index(1-based)]<br />
  df[:,列index(1-based)]<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/Y0KUDA/items/3d3342ef08b28d5cda71">JuliaでCSV / DataFrameを扱う方法 - Qiita</a><br />
<a href="https://zenn.dev/takilog/articles/393b0d3b7dd5601c50c1">DataFrames.jl Getting Startedの要点 (2021年3月版)</a><br />
</p>

<p>
! と : は何が違うんだろうか.<br />
<a href="https://zenn.dev/takilog/articles/393b0d3b7dd5601c50c1">DataFrames.jl Getting Startedの要点 (2021年3月版)</a><br />
によると, コピーを作るかどうかのようだ.<br />
代入するときに結果が変わる.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>df[:, <span style="color: #6495ed;">:A</span>][1] = 3   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20195;&#20837;</span>
<span class="linenr">2: </span>print(df)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#12431;&#12425;&#12394;&#12356;</span>
<span class="linenr">3: </span>
<span class="linenr">4: </span>df[!,<span style="color: #6495ed;">:A</span>][1] = 3
<span class="linenr">5: </span>print(df)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#12431;&#12427;</span>
</pre>
</div>

<p>
次は列名の変更.<br />
</p>

<p>
参考:<br />
<a href="https://discourse.julialang.org/t/change-column-names-of-a-dataframe-previous-methods-dont-work/48026">Change Column Names of a DataFrame - Previous methods don't work - Usage / First steps - JuliaLang</a><br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">3: </span>dfo = df[df[:,2] .== <span style="color: #ffa07a;">"Out_of_Range"</span>, [1,3]];
<span class="linenr">4: </span>rename!(dfo, <span style="color: #6495ed;">:min</span> =&gt; <span style="color: #6495ed;">:Out_of_Range</span>)
<span class="linenr">5: </span>print(first(dfo,5))
</pre>
</div>

<p>
プログラム 4 行目で列名の変更を行っている. min -&gt; Out_of_Range に変更.<br />
! がついている関数は破壊的処理をするってどこかに書いてあったような.<br />
ここでは DataFrame dfo の内容が破壊的に変わる(列の名前が変更される).<br />
</p>

<p>
後々のことを考えて, Out_of_Range の部分を変数にしたいのだが&#x2026;<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>cat = <span style="color: #ffa07a;">"Out_of_Range"</span>
<span class="linenr">3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">4: </span>dfo = df[df[:,2] .== cat, [1,3]];
<span class="linenr">5: </span>rename!(dfo, <span style="color: #6495ed;">:min</span> =&gt; cat)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">6: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        Out_of_Range
     │ Date…       Int64
─────┼──────────────────────────
   1 │ 2021-02-01          1298
   2 │ 2021-02-02          1209
   3 │ 2021-02-03          1205
   4 │ 2021-02-04          1255
   5 │ 2021-02-05          1289
</pre>

<p>
普通に rename!(dfo, :min =&gt; 変数) でよかった.<br />
じゃこれでもいいってことかな.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>cat = <span style="color: #ffa07a;">"Out_of_Range"</span>
<span class="linenr">3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4],DataFrame);
<span class="linenr">4: </span>dfo = df[df[:,2] .== cat, [1,3]];
<span class="linenr">5: </span>rename!(dfo, <span style="color: #ffa07a;">"min"</span> =&gt; cat)
<span class="linenr">6: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        Out_of_Range
     │ Date…       Int64
─────┼──────────────────────────
   1 │ 2021-02-01          1298
   2 │ 2021-02-02          1209
   3 │ 2021-02-03          1205
   4 │ 2021-02-04          1255
   5 │ 2021-02-05          1289
</pre>

<p>
rename!(dfo, "min" =&gt; 変数) で問題なかった.<br />
</p>

<p>
データの結合<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr"> 3: </span>adf =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>    dfo = df[df[:,2] .== cat, [1,3]]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">df &#12398; 2 &#21015;&#30446;&#12398;&#20516;&#12364; cat &#12398;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;. [1,3] &#21015;&#30446;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr"> 6: </span>    rename!(dfo,<span style="color: #ffa07a;">"min"</span> =&gt; cat)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo &#12398; min &#21015;&#12398;&#21517;&#21069;&#12434; cat &#12395;&#22793;&#26356;. dfo &#12434;&#22793;&#26356;&#12377;&#12427;.</span>
<span class="linenr"> 7: </span>    push!(adf,dfo)
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 9: </span>ddf = outerjoin(adf[1], adf[2],  adf[3], adf[4], on = <span style="color: #6495ed;">:date</span>);  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">4 &#12388;&#12375;&#12363;&#28961;&#12356;&#12398;&#12391;&#12505;&#12479;&#26360;&#12365;</span>
<span class="linenr">10: </span>println(first(ddf,5))
</pre>
</div>

<pre class="example">
5×5 DataFrame
 Row │ date        Out_of_Range  Fat_Burn  Cardio  Peak
     │ Date…       Int64?        Int64?    Int64?  Int64?
─────┼────────────────────────────────────────────────────
   1 │ 2021-02-01          1298        93      15       0
   2 │ 2021-02-02          1209        90      22       1
   3 │ 2021-02-03          1205       162      14       0
   4 │ 2021-02-04          1255       134       5       2
   5 │ 2021-02-05          1289       114       6       0
</pre>

<p>
プログラム 3-8 行目<br />
DataFrame の配列 adf を作る. Python では append だが julia では push! (! は破壊的メソッドの意味らしい).<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/ttabata/items/7528863ccbb282e8260d">Julia早引きノート［14］リスト(Array型一次元配列) - Qiita</a><br />
</p>

<p>
プログラム 9 行目. date の値で表を merge.<br />
pandas では merge.<br />
julia では join.<br />
innerjoin, leftjoin 等あるけど, ここでは outerjoin を使った.<br />
２つだけじゃなくて何個でも行ける.<br />
</p>

<p>
参考:<br />
<a href="https://dataframes.juliadata.org/stable/man/joins/">Joins · DataFrames.jl</a><br />
</p>

<p>
この DataFrame を CSV.write で保存してとりあえずこの部分は終わりとしよう.<br />
</p>

<p>
参考:<br />
<a href="https://csv.juliadata.org/stable/#CSV.write">CSV.jl Documentation · CSV.jl</a><br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr"> 3: </span>adf =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>    dfo = df[df[:,2] .== cat, [1,3]]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">df &#12398; 2 &#21015;&#30446;&#12398;&#20516;&#12364; cat &#12398;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;. [1,3] &#21015;&#30446;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr"> 6: </span>    rename!(dfo,<span style="color: #ffa07a;">"min"</span> =&gt; cat)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo &#12398; min &#21015;&#12398;&#21517;&#21069;&#12434; cat &#12395;&#22793;&#26356;. dfo &#12434;&#22793;&#26356;&#12377;&#12427;.</span>
<span class="linenr"> 7: </span>    push!(adf,dfo)
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 9: </span>ddf = outerjoin(adf[1], adf[2],  adf[3], adf[4], on = <span style="color: #6495ed;">:date</span>);
<span class="linenr">10: </span>CSV.write(<span style="color: #ffa07a;">"data/j.csv"</span>,ddf, delim=<span style="color: #ffa07a;">","</span>)
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> グラフ化</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> R</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> ggplot2(基礎)</h3>
<div class="outline-text-3" id="text-4-2">
<p>
ggplot2 によるグラフ作成のテンプレートはこんな感じ.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(ggplot2)
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#12434;&#12388;&#12367;&#12427;</span>
<span class="linenr"> 4: </span>X <span style="color: #1e90ff;">&lt;-</span> seq(-4,4, length=100)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">-4 &#12363;&#12425; 4 &#12414;&#12391;. 100 &#20998;&#21106;&#12375;&#12383;&#12505;&#12463;&#12488;&#12523;&#12434;&#20316;&#25104;</span>
<span class="linenr"> 5: </span>Y <span style="color: #1e90ff;">&lt;-</span> dnorm(x=X, mean=0, sd=1) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">y &#12392;&#12375;&#12390;&#12460;&#12454;&#12473;&#38306;&#25968;</span>
<span class="linenr"> 6: </span>df <span style="color: #1e90ff;">&lt;-</span> data.frame(xf=X,yf=Y)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">ggplot2 &#12399; dataframe &#12434;&#35501;&#12415;&#36796;&#12416;</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=xf,y=yf))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">x,y &#12399;&#22266;&#23450;</span>
<span class="linenr"> 9: </span>plot(p)
<span class="linenr">10: </span>fname <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'images/r0.png'</span>
<span class="linenr">11: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r0.png" alt="DataFrame2021-r0.png" /><br />
</p>
</div>

<p>
時系列データの取り扱い<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">test.data &#12395;&#12399;&#26085;&#20184;(date)&#12392;&#26178;&#21051;(time 09:03:02) &#21015;&#12364;&#12354;&#12427;&#12392;&#12377;&#12427;.</span>
<span class="linenr">2: </span>d <span style="color: #1e90ff;">&lt;-</span> read.table(<span style="color: #ffa07a;">'test.data'</span>, sep=<span style="color: #ffa07a;">'\t'</span>, header=<span style="color: #9370db;">TRUE</span>)
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">datetime &#12392;&#12356;&#12358;&#26032;&#12375;&#12356;&#21015;&#12434;&#12388;&#12367;&#12427;&#12392;&#12365;.</span>
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">datetime &#21015;&#12399; "date time" &#12392;&#12377;&#12427;</span>
<span class="linenr">5: </span>d$datetime <span style="color: #1e90ff;">&lt;-</span> paste(d$date, d$time, sep=<span style="color: #ffa07a;">' '</span>)
<span class="linenr">6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">POSIX &#24418;&#24335;&#12395;&#22793;&#25563;</span>
<span class="linenr">7: </span>d$datetime <span style="color: #1e90ff;">&lt;-</span> as.POSIXct(d$datetime)
<span class="linenr">8: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=d) + geom_lines(mapping=aes(x=datetime, y=Y))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> ggplot2 による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-3">
<p>
tidyverse を使うと, 日付っぽい部分が勝手に日付オブジェクトとなるので自動でいい感じのグラフが描ける.<br />
Out_of_Range 列のデータのみのグラフを描いてみる<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range))
<span class="linenr">4: </span>plot(p)
<span class="linenr">5: </span>fname = <span style="color: #ffa07a;">'images/r01.png'</span>
<span class="linenr">6: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r01.png" alt="DataFrame2021-r01.png" /><br />
</p>
</div>

<p>
プレーンな dataframe を使う場合は, 日付部分を POSIXct クラスに変更する.<br />
3 行目でやってる.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(ggplot2)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data/r.csv'</span>,header=<span style="color: #9370db;">TRUE</span>)
<span class="linenr">3: </span>df$date <span style="color: #1e90ff;">&lt;-</span> as.POSIXct(df$date)
<span class="linenr">4: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range))
<span class="linenr">5: </span>plot(p)
<span class="linenr">6: </span>fname = <span style="color: #ffa07a;">'images/r03.png'</span>
<span class="linenr">7: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r03.png" alt="DataFrame2021-r03.png" /><br />
</p>
</div>

<p>
同じ図が描けた.<br />
</p>

<p>
一枚のグラフに複数のデータを載せる場合.<br />
Out_of_Range 列と Fat_Burn 列を描く.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range), color=<span style="color: #ffa07a;">"blue"</span>)
<span class="linenr">4: </span>p <span style="color: #1e90ff;">&lt;-</span> p + geom_line(mapping=aes(x=date,y=Fat_Burn),color=<span style="color: #ffa07a;">"orange"</span>) + ylab(<span style="color: #ffa07a;">"min"</span>)
<span class="linenr">5: </span>plot(p)
<span class="linenr">6: </span>fname = <span style="color: #ffa07a;">'images/r04.png'</span>
<span class="linenr">7: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r04.png" alt="DataFrame2021-r04.png" /><br />
</p>
</div>

<p>
R の場合は色々処理する前のデータでそのまま描ける.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>head(df0)
</pre>
</div>

<pre class="example">
# A tibble: 6 x 4
  date       cat            cal   min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01 Out_of_Range 1549.  1298
2 2021-02-01 Fat_Burn      350.    93
3 2021-02-01 Cardio        108.    15
4 2021-02-01 Peak            0      0
5 2021-02-02 Out_of_Range 1437.  1209
6 2021-02-02 Fat_Burn      438.    90
</pre>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df0) + geom_line(mapping=aes(x=date,y=min,color=cat))
<span class="linenr">4: </span>plot(p)
<span class="linenr">5: </span>fname = <span style="color: #ffa07a;">'images/r05.png'</span>
<span class="linenr">6: </span>ggsave(p,file=fname, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r05.png" alt="DataFrame2021-r05.png" /><br />
</p>
</div>

<p>
複数のグラフを描く場合<br />
gridExtra を使おう.<br />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span><span style="color: #1e90ff;">library</span>(gridExtra)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr"> 4: </span>p1 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range), color=<span style="color: #ffa07a;">"blue"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 5: </span>p2 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Fat_Burn),     color=<span style="color: #ffa07a;">"orange"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 6: </span>p3 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Cardio),       color=<span style="color: #ffa07a;">"magenta"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 7: </span>p4 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Peak),         color=<span style="color: #ffa07a;">"cyan"</span>)
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">grid.arrange(p1,p2,p3,p4,nrow=4)  # 4 &#12388;&#32294;&#12395;&#20006;&#12409;&#12427;</span>
<span class="linenr"> 9: </span>h <span style="color: #1e90ff;">&lt;-</span> arrangeGrob(p1,p2,p3,p4,nrow=4)
<span class="linenr">10: </span>fname = <span style="color: #ffa07a;">'images/r06.png'</span>
<span class="linenr">11: </span>ggsave(h,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r06.png" alt="DataFrame2021-r06.png" /><br />
</p>
</div>

<p>
プログラム 4 - 6 行目 xlab("") で x 軸のタイトル "date" を書かない.<br />
プログラム 9 行目 arrangeGrob(p1, p2, p3, p4, nrow=4) nrow=4 で 4 つ縦に並べる.<br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> Python</h3>
<div class="outline-text-3" id="text-4-4">
</div><div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5"><span class="section-number-3">4.5</span> matplotlib(基礎)</h3>
<div class="outline-text-3" id="text-4-5">
<p>
matplotlib によるグラフ作成のテンプレートはこんな感じ.<br />
常にオブジェクト指向的に書くのがわかりやすいのでは.<br />
  plt class -&gt; figure object を作成 (figure) -&gt; axes object を作成 (add_subplot)-&gt; axes object が一つのグラフを作成<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> numpy <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#20316;&#25104;&#20363;</span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">x</span> = np.linspace(-4,4, 100)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">-4 &#12363;&#12425; 4 &#12414;&#12391; 100 &#20998;&#21106;</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12460;&#12454;&#12473;&#38306;&#25968; &#12356;&#12385;&#12356;&#12385;&#23450;&#32681;&#12377;&#12427;&#24517;&#35201;&#12354;&#12427;&#12398;&#12363;... &#38754;&#20498;&#12384;&#12394;&#12353;.</span>
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">def</span> <span style="color: #00ff7f;">gauss</span>(x,mu,sig):
<span class="linenr"> 7: </span>   <span style="color: #20b2aa; font-weight: bold;">return</span> np.exp(-np.power(x -mu, 2.0)/ (2*np.power(sig,2)))
<span class="linenr"> 8: </span><span style="color: #9acd32;">y</span> = gauss(x,0,1)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#20316;&#25104;&#20363;&#12371;&#12371;&#12414;&#12391;</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12371;&#12363;&#12425;&#12464;&#12521;&#12501;&#20316;&#25104;</span>
<span class="linenr">11: </span><span style="color: #9acd32;">fig</span> = plt.figure()            <span style="color: #cd853f;"># </span><span style="color: #cd853f;">plt &#12463;&#12521;&#12473;&#12363;&#12425; figure object</span>
<span class="linenr">12: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;&#12398;&#12464;&#12521;&#12501; = 1 &#26522;&#12398;&#12464;&#12521;&#12501;&#12434;&#20840;&#20307;&#12395;&#25551;&#12367;)</span>
<span class="linenr">13: </span>ax.plot(x,y)                  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">axes object &#12364;&#19968;&#12388;&#12398;&#12464;&#12521;&#12501;&#12434;&#25551;&#30011;&#12377;&#12427;</span>
<span class="linenr">14: </span>fig.show()
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12464;&#12521;&#12501;&#12398;&#20445;&#23384;</span>
<span class="linenr">16: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p00.png'</span>
<span class="linenr">17: </span>fig.savefig(fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p00.png" alt="DataFrame2021-p00.png" /><br />
</p>
</div>

<p>
時系列グラフでは x 軸が日付・時間であることが多いだろう.<br />
軸目盛の設定(locator, formatter)を軸に対して行う.<br />
</p>

<p>
参考:<br />
<a href="https://bunsekikobako.com/setting_ticks_by_matplotlib_dates/">matplotlib.datesで時系列データのグラフの軸目盛の設定をする | 分析小箱</a><br />
<a href="https://qiita.com/yoinhu/items/e0039309a47c75dade05">時系列データの可視化：datetime型のx軸操作 - Qiita</a><br />
<a href="https://www.delftstack.com/ja/howto/matplotlib/how-to-rotate-x-axis-tick-label-text-in-matplotlib/">Matplotlib で X 軸の目盛りラベルテキストを回転させる方法 | Delft スタック</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30446;&#30427;&#12398;&#25351;&#23450;</span>
<span class="linenr"> 3: </span><span style="color: #9acd32;">xloc</span> = mdates.HourLocator(byhour=<span style="color: #76ee00;">range</span>(0,24,4))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0-24&#26178;&#38291; &#12414;&#12391;, 4 &#26178;&#38291;&#12362;&#12365;&#12395;&#30446;&#30427;</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax &#12399;&#20316;&#25104;&#12373;&#12428;&#12383; axes object</span>
<span class="linenr"> 5: </span>ax.xaxis.set_major_locator(xloc)                 <span style="color: #cd853f;"># </span><span style="color: #cd853f;">minor_locator &#12418;&#12354;&#12427;(&#35036;&#21161;&#30446;&#30427;)</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#36600;&#12398;&#25991;&#23383;&#21015; format &#12398;&#25351;&#23450;</span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%H:%M"</span>) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30446;&#30427;&#12398;&#26360;&#12363;&#12379;&#26041;. &#12371;&#12371;&#12391;&#12399; 00:00 &#24418;&#24335;&#12391;</span>
<span class="linenr"> 8: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#36600;&#12398;&#25991;&#23383;&#21015;&#12434;&#26012;&#12417;&#12395;&#26360;&#12367;&#12392;&#12365;</span>
<span class="linenr">10: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">11: </span>plt.setp(labels, rotation=45, fontsize=10)
</pre>
</div>

<p>
その他の設定事項<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> calendar
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax &#12399;&#20316;&#25104;&#12373;&#12428;&#12383; axes object</span>
<span class="linenr"> 3: </span>ax.set_title(<span style="color: #ffa07a;">'heart beats summary'</span>)
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span>ax.set_xlabel(<span style="color: #ffa07a;">'Date'</span>)
<span class="linenr"> 6: </span>ax.set_ylabel(<span style="color: #ffa07a;">'heart_beat'</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #9acd32;">dlst</span> = calendar.monthrange(2021,4)[1]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26376;&#26411;&#26085;</span>
<span class="linenr"> 9: </span>ax.set_xlim(dt.datetime(2021,4,1), dt.datetime(2021,4,dlst))
<span class="linenr">10: </span><span style="color: #9acd32;">ylim</span> = (50,200)
<span class="linenr">11: </span>ax.set_ylim(*ylim)
</pre>
</div>

<p>
グラフ作成<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#31309;&#12415;&#19978;&#12370;&#26834;&#12464;&#12521;&#12501;&#12394;&#12425;</span>
<span class="linenr">2: </span>ax.bar(df.date, df.Out_of_Range)
<span class="linenr">3: </span>ax.bar(df.date, df.Fat_Burn, bottom=df.Out_of_Range,color=<span style="color: #ffa07a;">'green'</span>)
<span class="linenr">4: </span>ax.bar(df.date, df.Cardio, bottom=df.Out_of_Range+df.Fat_Burn,color=<span style="color: #ffa07a;">'orange'</span>)
<span class="linenr">5: </span>ax.bar(df.date, df.Peak, bottom=df.Out_of_Range+df.Fat_Burn+df.Cardio,color=<span style="color: #ffa07a;">'red'</span>)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25551;&#30011;</span>
<span class="linenr">2: </span>fig.show()
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20445;&#23384;</span>
<span class="linenr">4: </span>fig.save(<span style="color: #ffa07a;">"output.png"</span>, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">"png"</span>, dpi=70)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6"><span class="section-number-3">4.6</span> matplotlib による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-6">
<p>
pandas でデータを dataframe に格納し, plt -&gt; fig -&gt; ax object を使って図を描画する.<br />
典型的な一連の流れ.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(4,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p01.png'</span>
<span class="linenr">12: </span>fig.show()
<span class="linenr">13: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p01.png" alt="DataFrame2021-p01.png" /><br />
</p>
</div>

<p>
横軸の文字が重なってよくわからん状態になっている. 何とかしないと.<br />
locator, formatter を修正する.<br />
DayLocator, DateFormatter を使う.<br />
</p>

<p>
参考:<br />
<a href="https://bunsekikobako.com/setting_ticks_by_matplotlib_dates/">matplotlib.datesで時系列データのグラフの軸目盛の設定をする | 分析小箱</a><br />
<a href="https://qiita.com/jeta_taka/items/9e6b8c7c0fe1a86e2ae9">時系列プロットはじめました〜python編〜 - Qiita</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">12: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">13: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">14: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">15: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">17: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">18: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">19: </span>
<span class="linenr">20: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p02.png'</span>
<span class="linenr">21: </span>fig.show()
<span class="linenr">22: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p02.png" alt="DataFrame2021-p02.png" /><br />
</p>
</div>

<p>
横軸文字列はみ出してるんだけど.<br />
plt.tight_layout() とすると自動で調整してくれるようだ. これは便利.<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/Tatejimaru137/items/4ee6a73114d07d85bfd7">matplotlibでグラフの文字サイズを大きくする - Qiita</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">12: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">13: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">14: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">15: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">17: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">18: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">20: </span>plt.tight_layout()
<span class="linenr">21: </span>
<span class="linenr">22: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p03.png'</span>
<span class="linenr">23: </span>fig.show()
<span class="linenr">24: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p03.png" alt="DataFrame2021-p03.png" /><br />
</p>
</div>

<p>
一つのグラフに複数のグラフを描く場合<br />
</p>

<p>
参考:<br />
<a href="https://qiita.com/Tatejimaru137/items/4ee6a73114d07d85bfd7">matplotlibでグラフの文字サイズを大きくする - Qiita</a><br />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">'out_of_range'</span>)
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12381;&#12398;&#12414;&#12414;&#26360;&#12356;&#12390;&#12369;&#12400;&#12356;&#12356;</span>
<span class="linenr">11: </span>ax.plot(df.date, df.Fat_Burn, label=<span style="color: #ffa07a;">'fat_burn'</span>)
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20961;&#20363;&#12364;&#24517;&#35201;&#12363;&#65311;</span>
<span class="linenr">13: </span>ax.legend(fontsize=10)
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">16: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">17: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">18: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">19: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">20: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">21: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">22: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">24: </span>plt.tight_layout()
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p04.png'</span>
<span class="linenr">27: </span>fig.show()
<span class="linenr">28: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p04.png" alt="DataFrame2021-p04.png" /><br />
</p>
</div>

<p>
複数のグラフを揃えて描く場合<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(3,5))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax1</span> = fig.add_subplot(2,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (2 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax1.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20108;&#12388;&#30446;&#12398;&#12464;&#12521;&#12501;</span>
<span class="linenr">11: </span><span style="color: #9acd32;">ax2</span> = fig.add_subplot(2,1,2, sharex=ax1) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892; 1 &#21015;&#12398; 2 &#30058;&#30446;, ax1 &#12398; x &#36600;&#12434;&#20849;&#26377;&#12377;&#12427;</span>
<span class="linenr">12: </span>ax2.plot(df.date, df.Fat_Burn, color=<span style="color: #ffa07a;">"green"</span>, marker=<span style="color: #ffa07a;">'.'</span>) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#12395; . &#12388;&#12365;&#12398;&#12464;&#12521;&#12501;&#12395;&#12375;&#12390;&#12415;&#12427;</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19968;&#12388;&#30446;&#12398;&#12464;&#12521;&#12501;&#12398; x &#36600;&#12521;&#12505;&#12523;&#12399;&#35201;&#12425;&#12394;&#12356;</span>
<span class="linenr">15: </span>ax1.tick_params(labelbottom=<span style="color: #1e90ff;">False</span>)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">18: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">19: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">20: </span>ax2.xaxis.set_major_locator(xloc)
<span class="linenr">21: </span>ax2.xaxis.set_major_formatter(xfmt)
<span class="linenr">22: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">23: </span><span style="color: #9acd32;">labels</span> = ax2.get_xticklabels()
<span class="linenr">24: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">title</span>
<span class="linenr">27: </span>ax1.set_title(<span style="color: #ffa07a;">'out_of_range'</span>,fontsize=10)
<span class="linenr">28: </span>ax2.set_title(<span style="color: #ffa07a;">'fat_burn'</span>, fontsize=10)
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">31: </span>plt.tight_layout()
<span class="linenr">32: </span>
<span class="linenr">33: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p05.png'</span>
<span class="linenr">34: </span>fig.show()
<span class="linenr">35: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p05.png" alt="DataFrame2021-p05.png" /><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-7" class="outline-3">
<h3 id="sec-4-7"><span class="section-number-3">4.7</span> plotline による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-7">
<p>
Python での描画と言えば matplotlib だが,<br />
ggplot2 のように, データ加工前の元々のデータでグラフを描けないんかなぁ. と思ったりもする.<br />
元々のデータ構造はこんな感じなんだけど.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
このデータを読み込んで cat ごとに色を変えてグラフを描きたい.<br />
</p>

<p>
参考:<br />
<a href="https://stackoverflow.com/questions/41494942/pandas-dataframe-groupby-plot">https://stackoverflow.com/questions/41494942/pandas-dataframe-groupby-plot</a><br />
<a href="https://scentellegher.github.io/programming/2017/07/15/pandas-groupby-multiple-columns-plot.html">https://scentellegher.github.io/programming/2017/07/15/pandas-groupby-multiple-columns-plot.html</a><br />
</p>

<p>
上の URL を見てみたが, うーん何かめんどくさそう.<br />
更に調べてたら ggplot2 とほぼ同様の書き方でいける plotline というパッケージがあるのを見つけた.<br />
これを使ったほうがいいかな？<br />
</p>

<p>
<a href="https://anaconda.org/conda-forge/plotnine">Plotnine :: Anaconda.org</a><br />
</p>

<p>
入ってなかったのでインストールする.<br />
こんな風にインストールできるようだ:<br />
  shell@: conda install -c conda_forge plotnine<br />
</p>

<p>
早速これでグラフを作ってみる.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span>
<span class="linenr">5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = ggplot() + geom_line(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>, y=<span style="color: #ffa07a;">'min'</span>, color=<span style="color: #ffa07a;">'cat'</span>))
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p06.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p06.png" alt="DataFrame2021-p06.png" /><br />
</p>
</div>

<p>
ggplot2 と同じじゃん&#x2026;<br />
ggplot2 に慣れてるなら結構いいかも？<br />
</p>

<p>
参考:<br />
<a href="https://ichi.pro/python-no-de-ta-shikakuka-pakke-ji-no-daitai-toshite-no-plotnine-no-shokai-76970624743422">Pythonのデータ視覚化パッケージの代替としてのPlotnineの紹介</a><br />
<a href="https://plotnine.readthedocs.io/en/stable/index.html">A Grammar of Graphics for Python — plotnine 0.8.0 documentation</a><br />
</p>

<p>
date の label を 45°回転<br />
<a href="https://stackoverflow.com/questions/47714540/plotnine-rotating-labels">python - Plotnine rotating labels - Stack Overflow</a><br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave, theme, element_text
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">5: </span><span style="color: #9acd32;">p</span> = ggplot() + geom_line(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>, y=<span style="color: #ffa07a;">'min'</span>, color=<span style="color: #ffa07a;">'cat'</span>))
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = p + theme(axis_text_x = element_text(rotation=45, hjust=1))
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/py07.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-py07.png" alt="DataFrame2021-py07.png" /><br />
</p>
</div>

<p>
独立に図を描く<br />
facet_wrap('~cat', nrow=4) # 'cat' ごとに 4 行のグラフを描く.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave, theme, element_text, facet_wrap
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">5: </span><span style="color: #9acd32;">p</span> = ggplot(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>,y=<span style="color: #ffa07a;">'min'</span>,color=<span style="color: #ffa07a;">'cat'</span>)) + geom_line()
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = p + theme(axis_text_x = element_text(rotation=45, hjust=1)) + facet_wrap(<span style="color: #ffa07a;">'~cat'</span>,nrow=4)
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/py08.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-py08.png" alt="DataFrame2021-py08.png" /><br />
</p>
</div>

<p>
割と素晴らしいかも.<br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-8" class="outline-3">
<h3 id="sec-4-8"><span class="section-number-3">4.8</span> Julia</h3>
<div class="outline-text-3" id="text-4-8">
</div><div id="outline-container-sec-4-9" class="outline-3">
<h3 id="sec-4-9"><span class="section-number-3">4.9</span> PyPlot(基礎)</h3>
<div class="outline-text-3" id="text-4-9">
<p>
PyPlot は, Matplotlib と同様の書き方が出来る. 標準の Plots よりも良いらしい？<br />
</p>

<p>
参考:<br />
<a href="https://www.eureka-moments-blog.com/entry/2020/09/06/102455">JuliaとMatplotlibでグラフを作る際のハマりポイントとサンプルプログラム集 - EurekaMoments</a><br />
<a href="https://qiita.com/ttabata/items/96a0e172addfac690cca">Julia早引きノート［23］JuliaでのMatplotlibによるグラフ描画 - Qiita</a>  &#x2013;&gt; matplotlib でも使えるよく使うパラメータ<br />
</p>

<p>
テンプレートはこんな感じか<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> PyPlot
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12480;&#12511;&#12540;&#12487;&#12540;&#12479;</span>
<span class="linenr"> 4: </span>x = range(0,2&#960;, step=0.1)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#12363;&#12425; 2&#960; &#12414;&#12391; 0.1&#21051;&#12415;&#12391;&#12505;&#12463;&#12488;&#12523;&#12487;&#12540;&#12479;&#12434;&#20316;&#25104;</span>
<span class="linenr"> 5: </span>y = []
<span class="linenr"> 6: </span>z = []
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">sin &#12392; cos &#12395;&#12377;&#12427;.</span>
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> x
<span class="linenr"> 9: </span>    push!(y,sin(i))
<span class="linenr">10: </span>    push!(z,cos(i))
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">matplotlib &#12392;&#21516;&#27096;&#12395;&#26360;&#12369;&#12427;&#65281;&#65281;</span>
<span class="linenr">14: </span>fig = figure()
<span class="linenr">15: </span>ax1 = fig.add_subplot(2,1,1)
<span class="linenr">16: </span>ax1.plot(x,y)
<span class="linenr">17: </span>
<span class="linenr">18: </span>ax2 = fig.add_subplot(2,1,2)
<span class="linenr">19: </span>ax2.plot(x,z)
<span class="linenr">20: </span>
<span class="linenr">21: </span>fig.tight_layout()
<span class="linenr">22: </span>fname = <span style="color: #ffa07a;">"images/j00.png"</span>
<span class="linenr">23: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j00.png" alt="DataFrame2021-j00.png" /><br />
</p>
</div>

<p>
PyPlot だとほぼ matplotlib と同じ要領でグラフを描けるようだ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25240;&#12428;&#32218;&#12398;&#22580;&#21512;</span>
<span class="linenr"> 2: </span>plot(x,y, color=<span style="color: #ffa07a;">"m"</span>, marker=<span style="color: #ffa07a;">"o"</span>, markerfacecolor=<span style="color: #ffa07a;">"r"</span>, linestyle=<span style="color: #ffa07a;">"-"</span>, label=raw<span style="color: #ffa07a;">"$\sin(x)$"</span>)
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#33394;: b=blue, g=green, r=red, c=cyan, m=magenta, y=yellow, k=black,w=white</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12510;&#12540;&#12459;&#12398;&#31278;&#39006;: o=&#20870;, s=square, p=pentagon, *=star, +=&#12503;&#12521;&#12473;&#35352;&#21495;, D=&#12480;&#12452;&#12450;&#12514;&#12531;&#12489;</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">markerfacecolor=&#12510;&#12540;&#12459;&#12398;&#33394;</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">linestyle=&#32218;&#12398;&#31278;&#39006;: -=&#23455;&#25126; --=&#30772;&#32218;, -.=&#30772;&#32218;(&#28857;&#20837;&#12426;) :=&#28857;&#32218;</span>
<span class="linenr"> 7: </span>legend()  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">label &#12398;&#25991;&#23383;&#12434;&#20961;&#20363;&#12392;&#12375;&#12390;&#20351;&#12358;.</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26834;&#12464;&#12521;&#12501;</span>
<span class="linenr">10: </span>bar(x,y)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12498;&#12473;&#12488;&#12464;&#12521;&#12512;</span>
<span class="linenr">13: </span>hist(data)
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25955;&#24067;&#22259;</span>
<span class="linenr">16: </span>scatter(x,y)
<span class="linenr">17: </span>
<span class="linenr">18: </span>title(<span style="color: #ffa07a;">"hoo"</span>)
<span class="linenr">19: </span>xlabel(<span style="color: #ffa07a;">"x label"</span>)
<span class="linenr">20: </span>ylabel(<span style="color: #ffa07a;">"y label"</span>)
<span class="linenr">21: </span>
<span class="linenr">22: </span>grid(<span style="color: #1e90ff;">true</span>)
<span class="linenr">23: </span>
<span class="linenr">24: </span>savefig(<span style="color: #ffa07a;">"hoge.png"</span>)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">x &#30446;&#30427;&#12426;</span>
<span class="linenr">27: </span>x_ticks_name([1,2,3], [<span style="color: #ffa07a;">"first"</span>,<span style="color: #ffa07a;">"second"</span>,<span style="color: #ffa07a;">"third"</span>]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1,2,3 &#12398;&#12392;&#12371;&#12395; first, second, third</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#31684;&#22258;</span>
<span class="linenr">30: </span>xlim(0, &#960;)
<span class="linenr">31: </span>ylim(0, <span style="color: #1e90ff;">nothing</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#38480;&#12364;&#28961;&#12356;&#12400;&#12354;&#12356;. nothing &#12434;&#20351;&#12358;.</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-10" class="outline-3">
<h3 id="sec-4-10"><span class="section-number-3">4.10</span> PyPlotによる時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-10">
<p>
Out_of_Range 列の時系列グラフの作成<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(4,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>fig.tight_layout()
<span class="linenr"> 9: </span>fname=<span style="color: #ffa07a;">"images/j01.png"</span>
<span class="linenr">10: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j01.png" alt="DataFrame2021-j01.png" /><br />
</p>
</div>

<p>
matplotlib と同じようにいけた&#x2026;<br />
</p>

<p>
横軸についても同じように行けるんだろうか.<br />
Python の横軸に関する部分のソースコードは以下だけど.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 3: </span>...
<span class="linenr"> 4: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr"> 5: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr"> 6: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr"> 7: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr"> 9: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">10: </span>plt.setp(labels, rotation=45, fontsize=10)
</pre>
</div>

<p>
matplotlib.dates で行けるのかも？<br />
<a href="https://gist.github.com/gizmaa/7214002">Various Julia plotting examples using PyPlot · GitHub</a><br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(4,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;&#12395;&#12394;&#12387;&#12390;&#12375;&#12414;&#12387;&#12383;&#12398;&#12391;&#12371;&#12371;&#12399;&#22793;&#26356;</span>
<span class="linenr"> 9: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">10: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">11: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">12: </span>
<span class="linenr">13: </span>labels = ax.get_xticklabels()
<span class="linenr">14: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">15: </span>
<span class="linenr">16: </span>fig.tight_layout()
<span class="linenr">17: </span>fname=<span style="color: #ffa07a;">"images/j02.png"</span>
<span class="linenr">18: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j02.png" alt="DataFrame2021-j02.png" /><br />
</p>
</div>

<p>
行けたようだ.<br />
同様に, 一つのグラフに複数のグラフを描く場合<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(5,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">"out_of_range"</span>)
<span class="linenr"> 7: </span>ax.plot(df.date, df.Fat_Burn,     label=<span style="color: #ffa07a;">"fat_burn"</span>)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span>ax.legend(fontsize=10)
<span class="linenr">10: </span>
<span class="linenr">11: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;</span>
<span class="linenr">12: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">13: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">14: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">15: </span>
<span class="linenr">16: </span>labels = ax.get_xticklabels()
<span class="linenr">17: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">18: </span>
<span class="linenr">19: </span>fig.tight_layout()
<span class="linenr">20: </span>fname=<span style="color: #ffa07a;">"images/j04.png"</span>
<span class="linenr">21: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j04.png" alt="DataFrame2021-j04.png" /><br />
</p>
</div>


<p>
複数のグラフを揃えて描く場合<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(3,5))
<span class="linenr"> 5: </span>ax1  = fig.add_subplot(2,1,1)
<span class="linenr"> 6: </span>ax1.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">"out_of_range"</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>ax2  = fig.add_subplot(2,1,2, sharex=ax1)
<span class="linenr"> 9: </span>ax2.plot(df.date, df.Fat_Burn,     label=<span style="color: #ffa07a;">"fat_burn"</span>, color=<span style="color: #ffa07a;">"green"</span>, marker=<span style="color: #ffa07a;">"."</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#12398;&#12464;&#12521;&#12501;&#12398; x &#36600;&#12521;&#12505;&#12523;&#12399;&#35201;&#12425;&#12394;&#12356;</span>
<span class="linenr">12: </span>ax1.tick_params(labelbottom=<span style="color: #1e90ff;">false</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax2 &#12398; x &#36600;&#12521;&#12505;&#12523;</span>
<span class="linenr">15: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;</span>
<span class="linenr">16: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">17: </span>ax2.xaxis.set_major_locator(xloc)
<span class="linenr">18: </span>ax2.xaxis.set_major_formatter(xfmt)
<span class="linenr">19: </span>labels = ax2.get_xticklabels()
<span class="linenr">20: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">21: </span>
<span class="linenr">22: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">title</span>
<span class="linenr">23: </span>ax1.set_title(<span style="color: #ffa07a;">"out_of_range"</span>, fontsize=10)
<span class="linenr">24: </span>ax2.set_title(<span style="color: #ffa07a;">"fat_burn"</span>,     fontsize=10)
<span class="linenr">25: </span>
<span class="linenr">26: </span>fig.tight_layout()
<span class="linenr">27: </span>fname=<span style="color: #ffa07a;">"images/j05.png"</span>
<span class="linenr">28: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j05.png" alt="DataFrame2021-j05.png" /><br />
</p>
</div>

<p>
同じ図ができた.<br />
同じライブラリ使ってるから当然か.<br />
</p>

<p>
PyPlot のたくさんの例<br />
<a href="https://gist.github.com/gizmaa/7214002">Various Julia plotting examples using PyPlot · GitHub</a><br />
</p>
</div>
</div>

<div id="outline-container-sec-4-11" class="outline-3">
<h3 id="sec-4-11"><span class="section-number-3">4.11</span> RCall(ggplot2)による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-11">
<p>
RCall というのを使うと, R のコードが使えるらしい.<br />
Julia 経由で ggplot2 を使ってグラフを描いてみる.<br />
</p>

<p>
<a href="https://gist.github.com/genkuroki/e1def6d087fea3753b8dcd2cc2896d44">RCall.jl examples · GitHub</a><br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame);
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">using</span> RCall
<span class="linenr"> 6: </span>R<span style="color: #ffa07a;">"""Sys.setenv(LANG="en")"""</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@rimport</span> base as R
<span class="linenr"> 8: </span><span style="color: #6495ed;">@rlibrary</span> ggplot2
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>p = ggplot(data=df) + geom_line(mapping=aes(x=<span style="color: #6495ed;">:date</span>, y=<span style="color: #6495ed;">:min</span>, color=<span style="color: #6495ed;">:cat</span>))
<span class="linenr">11: </span>fname = <span style="color: #ffa07a;">"images/j06.png"</span>
<span class="linenr">12: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j06.png" alt="DataFrame2021-j06.png" /><br />
</p>
</div>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame);
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">using</span> RCall
<span class="linenr"> 6: </span>R<span style="color: #ffa07a;">"""Sys.setenv(LANG="en")"""</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@rimport</span> base as R              <span style="color: #cd853f;"># </span><span style="color: #cd853f;">org-babel &#12391;&#12371;&#12371;&#12364;&#12456;&#12521;&#12540;&#65311;</span>
<span class="linenr"> 8: </span><span style="color: #6495ed;">@rlibrary</span> ggplot2               <span style="color: #cd853f;"># </span><span style="color: #cd853f;">org-babel &#12391;&#12371;&#12371;&#12364;&#12456;&#12521;&#12540;&#65311;</span>
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>p = ggplot(data=df) + geom_line(mapping=aes(x=<span style="color: #6495ed;">:date</span>, y=<span style="color: #6495ed;">:min</span>, color=<span style="color: #6495ed;">:cat</span>))
<span class="linenr">11: </span>p = p + facet_wrap(<span style="color: #ffa07a;">"~cat"</span>,nrow=4)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">rotation=45 &#12399;&#20351;&#12360;&#12394;&#12356;&#12424;&#12358;&#12384;.</span>
<span class="linenr">12: </span>fname = <span style="color: #ffa07a;">"images/j07.png"</span>
<span class="linenr">13: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j07.png" alt="DataFrame2021-j07.png" /><br />
</p>
</div>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tab 区切りファイルの読込み]]></title>
    <link href="http://saito1369.github.io/blog/2017-05-04-fread.html"/>
    <updated>2017-05-04T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/fread</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. Perl</a></li>
<li><a href="#sec-3">3. Python</a></li>
<li><a href="#sec-4">4. Julia</a></li>
<li><a href="#sec-5">5. Ruby</a></li>
<li><a href="#sec-6">6. R</a></li>
<li><a href="#sec-7">7. Java</a></li>
<li><a href="#sec-8">8. かんそう</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2016-07-16 Sat 13:44&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-21 Wed 20:51&gt;</span></span><br />
</p>
<p>
tab 区切りファイル読込み/書込みの各言語でのやりかたの違いを整理する.<br />
</p>

<p>
<!-- more --><br />
</p>

<p>
参考:<br />
配列操作の比較表: Ruby, Python, JavaScript, Perl, C++ - bkブログ<br />
<a href="http://0xcc.net/blog/archives/000043.html">http://0xcc.net/blog/archives/000043.html</a><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私は普段の生活においては perl でプログラムを書いている.<br />
ささっと書いて捨てちゃうことが多いが,<br />
そのようなプログラムで最も多いぱたーんは以下のようなものである:<br />
</p>

<ol class="org-ol">
<li>何か(tab 区切りとかの)ファイルを読込む.<br />
</li>
<li>何かやる(読み込んだデータを加工したり計算したりする).<br />
</li>
<li>別のファイルに結果等を書き出す.<br />
</li>
</ol>

<p>
Python を始めとした色んな言語をこれから学んでいくにあたって,<br />
上記操作のやり方の違いををまずは見ていくのが自分にとっては一番しっくり来るかなぁと思ったのでまとめておく.<br />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Perl</h2>
<div class="outline-text-2" id="text-2">
<p>
これが基準<br />
</p>

<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>;
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ofile</span>=<span style="color: #ffa07a;">'output.perl.txt'</span>;
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">input</span>
<span class="linenr"> 8: </span><span style="color: #9370db;">open</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$fh</span>,<span style="color: #ffa07a;">"&lt;"</span>,$ifile;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cnt</span>=0;
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>;
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$data</span>;
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">while</span>(&lt;$fh&gt;) {
<span class="linenr">13: </span>  <span style="color: #ff83fa;">chomp</span>;
<span class="linenr">14: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>=<span style="color: #ff83fa;">split</span>(<span style="color: #1e90ff;">/</span><span style="color: #76ee00;">\</span><span style="color: #9370db;">t</span><span style="color: #1e90ff;">/</span>,$_);
<span class="linenr">15: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27096;&#12293;&#12394;&#29366;&#27841;&#12395;&#23550;&#24540;&#12391;&#12365;&#12427;&#12424;&#12358;&#12395;</span>
<span class="linenr">16: </span>  <span style="color: #20b2aa; font-weight: bold;">unless</span>($cnt) { <span style="color: #cd853f;"># </span><span style="color: #cd853f;">header</span>
<span class="linenr">17: </span>    <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>=<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>;
<span class="linenr">18: </span>  }<span style="color: #20b2aa; font-weight: bold;">else</span> {        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">data</span>
<span class="linenr">19: </span>    <span style="color: #ff83fa;">push</span>(@{$data},\<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>);
<span class="linenr">20: </span>  }
<span class="linenr">21: </span>  $cnt++;
<span class="linenr">22: </span>}
<span class="linenr">23: </span><span style="color: #9370db;">close</span> $fh;
<span class="linenr">24: </span>
<span class="linenr">25: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">output</span>
<span class="linenr">26: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$prnt</span>;
<span class="linenr">27: </span>$prnt=<span style="color: #9370db;">join</span>(<span style="color: #ffa07a;">"\t"</span>,<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">28: </span><span style="color: #20b2aa; font-weight: bold;">for</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$d</span> (@{$data}) {
<span class="linenr">29: </span>  $prnt.=<span style="color: #9370db;">join</span>(<span style="color: #ffa07a;">"\t"</span>,@{$d}).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">30: </span>}
<span class="linenr">31: </span><span style="color: #9370db;">open</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ofh</span>,<span style="color: #ffa07a;">"&gt;"</span>,$ofile;
<span class="linenr">32: </span><span style="color: #ff83fa;">print</span> $ofh $prnt;
<span class="linenr">33: </span><span style="color: #9370db;">close</span> $ofh;
<span class="linenr">34: </span>
<span class="linenr">35: </span><span style="color: #ff83fa;">print</span> $prnt; <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27161;&#28310;&#20986;&#21147;&#12395;&#12418;&#26360;&#12365;&#20986;&#12377;&#22580;&#21512;</span>
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X
bar 30  usa F 25  0.38  P
hoge  10  jpn F 4 1 P
fuga  40  eng M     X
fuga  35    F 9 0.1 X
</pre>

<p>
header の名前を key にして hash の配列にしてもよい.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Python</h2>
<div class="outline-text-2" id="text-3">
<p>
python での注意点と参考 URL:<br />
</p>

<ul class="org-ul">
<li>タブ区切りのファイルを読む<br />
<ul class="org-ul">
<li>Python でファイルを読む<br />
<a href="http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/python/readfile.html">http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/python/readfile.html</a><br />
</li>
</ul>
</li>
<li>unless の代わりに not を使う<br />
<ul class="org-ul">
<li>【python】unlessがないのでnotを使う | chat-blog<br />
<a href="http://chat-rate.com/it/255">http://chat-rate.com/it/255</a><br />
</li>
</ul>
</li>
<li>文字列を数値に変換する(めんどくさいなぁ&#x2026;)<br />
<ul class="org-ul">
<li>Pythonメモ: 文字列を数値に変換する<br />
<a href="http://yoshi-python.blogspot.jp/2009/09/blog-post_4656.html">http://yoshi-python.blogspot.jp/2009/09/blog-post_4656.html</a><br />
</li>
</ul>
</li>
<li>辞書オブジェクトの使い方<br />
<ul class="org-ul">
<li>Python - 辞書（ディクショナリ）の使い方 - ざっくりん雑記<br />
<a href="http://azuuun-memorandum.hatenablog.com/entry/2015/05/01/075000">http://azuuun-memorandum.hatenablog.com/entry/2015/05/01/075000</a><br />
</li>
</ul>
</li>
<li>ファイルに書き込み<br />
<ul class="org-ul">
<li>Python: テキストファイルに書き込み – write()、writelines()メソッド<br />
<a href="http://www.yukun.info/blog/2008/09/python-file-write-writelines.html">http://www.yukun.info/blog/2008/09/python-file-write-writelines.html</a><br />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> sys
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">'output.python.txt'</span>
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #9acd32;">fh</span>=<span style="color: #76ee00;">open</span>(ifile,<span style="color: #ffa07a;">'r'</span>)
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">lines=fh.readlines() # &#20840;&#37096;&#35501;&#12415;&#36796;&#12435;&#12391; lines &#12395;&#20837;&#12428;&#12427;&#22580;&#21512;.</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">input</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">perl &#12392;&#21516;&#12376;&#24863;&#12376;&#12391;&#12363;&#12356;&#12390;&#12415;&#12427;.</span>
<span class="linenr">11: </span><span style="color: #9acd32;">cnt</span>=0
<span class="linenr">12: </span><span style="color: #9acd32;">head</span>=[]
<span class="linenr">13: </span><span style="color: #9acd32;">data</span>=[]
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">for</span> li <span style="color: #20b2aa; font-weight: bold;">in</span> fh:   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">li &#12395; 1 &#34892;&#27598;(&#25913;&#34892;&#21547;&#12416;)&#12364;&#20837;&#12387;&#12390;&#12367;&#12427;</span>
<span class="linenr">15: </span>  <span style="color: #9acd32;">bf</span> = li[:-1].split(<span style="color: #ffa07a;">"\t"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12398;&#25913;&#34892;&#12434;&#21462;&#12426;&#38500;&#12356;&#12390;(li[:-1]) split</span>
<span class="linenr">16: </span>  <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> cnt:
<span class="linenr">17: </span>     <span style="color: #9acd32;">head</span>=bf
<span class="linenr">18: </span>  <span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr">19: </span>     data.append(bf)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">push &#12391;&#12399;&#12394;&#12367; append</span>
<span class="linenr">20: </span>  <span style="color: #9acd32;">cnt</span>+=1
<span class="linenr">21: </span>fh.close
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12392;&#12375;&#12390;&#20837;&#12387;&#12390;&#12427;&#12371;&#12392;&#12434;&#30906;&#35469;&#12377;&#12427;.</span>
<span class="linenr">24: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head)</span>
<span class="linenr">25: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(data)</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12398;&#37197;&#21015;&#12392;&#12375;&#12390;&#20837;&#12428;&#12390;&#12415;&#12427;</span>
<span class="linenr">28: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hashs[0]['name'] &#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#21508;&#12293;&#12398;&#35201;&#32032;&#12395;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427;.</span>
<span class="linenr">29: </span><span style="color: #9acd32;">hashs</span>=[]
<span class="linenr">30: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dr <span style="color: #20b2aa; font-weight: bold;">in</span> data:
<span class="linenr">31: </span>  <span style="color: #76ee00;">hash</span>={}
<span class="linenr">32: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">print(dr)</span>
<span class="linenr">33: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">sys.exit(0) # &#12371;&#12371;&#12391;&#32066;&#12431;&#12427;&#26178;(for debug)</span>
<span class="linenr">34: </span>  <span style="color: #20b2aa; font-weight: bold;">for</span> j,d <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">enumerate</span>(dr):
<span class="linenr">35: </span>     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">j &#12364; 1 &#12363; 4 &#12398;&#12392;&#12365;&#12399;, &#25972;&#25968;&#12392;&#12375;&#12390;&#20837;&#12428;&#12427;</span>
<span class="linenr">36: </span>     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">j &#12364; 5      &#12398;&#12392;&#12365;&#12399;, &#28014;&#21205;&#23567;&#25968;&#28857;&#12392;&#12375;&#12390;&#20837;&#12428;&#12427;. &#38754;&#20498;...</span>
<span class="linenr">37: </span>     <span style="color: #9acd32;">dk</span> = d
<span class="linenr">38: </span>     <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> d==<span style="color: #ffa07a;">''</span>:
<span class="linenr">39: </span>       <span style="color: #20b2aa; font-weight: bold;">if</span> j==1 <span style="color: #20b2aa; font-weight: bold;">or</span> j==4:
<span class="linenr">40: </span>         <span style="color: #9acd32;">dk</span> = <span style="color: #76ee00;">int</span>(d)
<span class="linenr">41: </span>       <span style="color: #20b2aa; font-weight: bold;">elif</span> j==5:         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">elsif &#12391;&#12399;&#12394;&#12367; elif</span>
<span class="linenr">42: </span>         <span style="color: #9acd32;">dk</span> = <span style="color: #76ee00;">float</span>(d)
<span class="linenr">43: </span>     <span style="color: #76ee00;">hash</span>[head[j]]=dk
<span class="linenr">44: </span>  hashs.append(<span style="color: #76ee00;">hash</span>)
<span class="linenr">45: </span>
<span class="linenr">46: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(hashs)</span>
<span class="linenr">47: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(hashs[0]['name'])</span>
<span class="linenr">48: </span>
<span class="linenr">49: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">output</span>
<span class="linenr">50: </span><span style="color: #9acd32;">ofh</span>=<span style="color: #76ee00;">open</span>(ofile,<span style="color: #ffa07a;">'w'</span>)
<span class="linenr">51: </span><span style="color: #9acd32;">prnt</span>=<span style="color: #ffa07a;">"\t"</span>.join(head)+<span style="color: #ffa07a;">"\n"</span>
<span class="linenr">52: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> data:
<span class="linenr">53: </span>  <span style="color: #9acd32;">prnt</span>+=<span style="color: #ffa07a;">"\t"</span>.join(d)+<span style="color: #ffa07a;">"\n"</span>
<span class="linenr">54: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(prnt)
<span class="linenr">55: </span>ofh.write(prnt)
<span class="linenr">56: </span>ofh.close()
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X
bar 30  usa F 25  0.38  P
hoge  10  jpn F 4 1 P
fuga  40  eng M     X
fuga  35    F 9 0.1 X
</pre>

<p>
dataframe とか使う場合はまた別でまとめようと思うが, 一応書いておく.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>
<span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">'output.pandas.txt'</span>

<span style="color: #9acd32;">df</span> = pd.read_csv(ifile,sep=<span style="color: #ffa07a;">"\t"</span>,header=0)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12363;&#12420;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#34892;&#30446;&#12398; 'name' &#21015;&#12434;&#26360;&#12365;&#25563;&#12360;</span>
<span style="color: #9acd32;">df.ix</span>[0,<span style="color: #ffa07a;">'name'</span>] = <span style="color: #ffa07a;">'foo2'</span>
df.to_csv(ofile,sep=<span style="color: #ffa07a;">"\t"</span>,index=<span style="color: #1e90ff;">False</span>)

<span style="color: #20b2aa; font-weight: bold;">print</span>(df)
</pre>
</div>

<pre class="example">
   name  age origin gender  idata  fdata type
0  foo2   10    jpn      M   50.0   0.25    X
1   bar   30    usa      F   25.0   0.38    P
2  hoge   10    jpn      F    4.0   1.00    P
3  fuga   40    eng      M    NaN    NaN    X
4  fuga   35    NaN      F    9.0   0.10    X
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Julia</h2>
<div class="outline-text-2" id="text-4">
<p>
Julia での注意点と参考 URL:<br />
</p>

<p>
全般的に, 型を意識する必要がある(? 全部 Any でいいのかなぁ)のでちょっと面倒くさい印象.<br />
文字列は '' ではなく "" で囲わないといけない(Java と同じ)<br />
and, or は &amp;&amp; || (これも Java と同じ)<br />
if 文は, if .. elseif .. end という感じで書く.<br />
関数は function hoge(x) &#x2026; end という感じで書く.<br />
配列の添字は 1 から始まる.<br />
二次元配列は arr[1,2] (1行2列目), 配列の配列は arr<br />
hash の宣言: Dict{keyの型, value の型}()<br />
主な型指定: Int64, Float64, ASCIIString, Any(何を入れてもいい型)<br />
文字列連結は "." でも "+" でもなく, 何と "*" を使うらしい. 何で?<br />
</p>

<ul class="org-ul">
<li>基本<br />
<ul class="org-ul">
<li>Juliaことはじめ - 0x00 nullbyte blog<br />
<a href="http://nullbyte.hatenablog.com/entry/2015/05/27/013949">http://nullbyte.hatenablog.com/entry/2015/05/27/013949</a><br />
</li>
<li>Julia Language Programming (Julia の基礎知識)<br />
<a href="http://www.geocities.jp/m_hiroi/light/julia01.html#abc02">http://www.geocities.jp/m_hiroi/light/julia01.html#abc02</a><br />
</li>
</ul>
</li>
<li>ファイルの開き方など<br />
<ul class="org-ul">
<li>Introducing Julia/Working with text files - Wikibooks, open books for an open world<br />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Working_with_text_files">https://en.wikibooks.org/wiki/Introducing_Julia/Working_with_text_files</a><br />
</li>
<li>Juliaでファイル操作 | mwSoft<br />
<a href="http://www.mwsoft.jp/programming/julia/file.html">http://www.mwsoft.jp/programming/julia/file.html</a><br />
</li>
<li>Julia でデータのセーブとロード - yomichi's blog<br />
<a href="http://yomichi.hateblo.jp/entry/2015/12/19/014201">http://yomichi.hateblo.jp/entry/2015/12/19/014201</a><br />
</li>
<li>＜紙＞さんＬｏＧ Julia 学習：ファイル入出力<br />
<a href="http://jn1inl.blog77.fc2.com/blog-entry-2209.html">http://jn1inl.blog77.fc2.com/blog-entry-2209.html</a><br />
</li>
</ul>
</li>
<li>型について<br />
<ul class="org-ul">
<li>Julia カテゴリーの記事一覧 - 0x00 nullbyte blog<br />
<a href="http://nullbyte.hatenablog.com/archive/category/Julia">http://nullbyte.hatenablog.com/archive/category/Julia</a><br />
</li>
</ul>
</li>
<li>配列など<br />
<ul class="org-ul">
<li>Learn Julia in Y Minutes<br />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a><br />
</li>
<li>Julia入門 配列 - 0x00 nullbyte blog<br />
<a href="http://nullbyte.hatenablog.com/entry/2015/05/30/001107">http://nullbyte.hatenablog.com/entry/2015/05/30/001107</a><br />
</li>
<li>Julia の超入門（配列編） - 中野智文<br />
<a href="http://blog.goo.ne.jp/nakano-tomofumi/e/135ed54502fd7a23d4b53fc3340240d2">http://blog.goo.ne.jp/nakano-tomofumi/e/135ed54502fd7a23d4b53fc3340240d2</a><br />
</li>
<li>光学設計者の学習メモ: Julia Array操作の基本をメモ。<br />
<a href="http://retrofocus28.blogspot.jp/2014/11/julia-array.html">http://retrofocus28.blogspot.jp/2014/11/julia-array.html</a><br />
</li>
</ul>
</li>
<li>ハッシュ等<br />
<ul class="org-ul">
<li>Julia入門 辞書（ハッシュテーブル）、Set型について - 0x00 nullbyte blog<br />
<a href="http://nullbyte.hatenablog.com/entry/2015/06/03/000106">http://nullbyte.hatenablog.com/entry/2015/06/03/000106</a><br />
</li>
</ul>
</li>
<li>join<br />
<ul class="org-ul">
<li>配列から文字列、文字列から配列への変換 (convert array to string, string to array) - MATLAB移民のためのJulia tips<br />
<a href="http://julia.hatenablog.jp/entry/2016/04/17/144129">http://julia.hatenablog.jp/entry/2016/04/17/144129</a><br />
</li>
</ul>
</li>
<li>文字列連結<br />
<ul class="org-ul">
<li>Julia の文字列結合演算が積 (*) である理由（他言語との比較） - Moriturus te saluto<br />
<a href="http://dsng.hatenablog.com/entry/2014/07/03/214526">http://dsng.hatenablog.com/entry/2014/07/03/214526</a><br />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span>ifile=<span style="color: #ffa07a;">"input.txt"</span>
<span class="linenr"> 2: </span>ofile=<span style="color: #ffa07a;">"output.julia.txt"</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">fh=open(ifile,"r")</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">str=readall(fh)  # &#19968;&#27671;&#12395;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512;&#12399;&#12371;&#12358;&#12377;&#12427;.</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(str)</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>head=[]  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">head=Array{Any,1}()</span>
<span class="linenr"> 9: </span>data=<span style="color: #9370db;">Array</span>{<span style="color: #9370db;">Array</span>{<span style="color: #9370db;">Any</span>,1},1}()  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1x1 &#12398;, &#37197;&#21015;&#12398;&#37197;&#21015;&#12434;&#20316;&#12387;&#12390;&#12362;&#12367;.</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">data=[][] &#12371;&#12428;&#12376;&#12419;&#12480;&#12513;&#12425;&#12375;&#12356;.</span>
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">filehandle &#12399;&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#26360;&#12367;&#12398;&#12364;&#26222;&#36890;&#12398;&#12424;&#12358;&#12384;</span>
<span class="linenr">13: </span>open(ifile,<span style="color: #ffa07a;">"r"</span>) <span style="color: #20b2aa; font-weight: bold;">do</span> fh
<span class="linenr">14: </span>    cnt=0
<span class="linenr">15: </span>    <span style="color: #20b2aa; font-weight: bold;">for</span> li <span style="color: #20b2aa; font-weight: bold;">in</span> eachline(fh)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#34892;&#12378;&#12388;&#35501;&#12435;&#12391;&#12356;&#12367;</span>
<span class="linenr">16: </span>        <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(li)</span>
<span class="linenr">17: </span>        li = chomp(li)          <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25913;&#34892;&#12434;&#21462;&#12426;&#38500;&#12367;</span>
<span class="linenr">18: </span>        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">li = rstrip(li,'\n')  # &#25913;&#34892;&#21066;&#38500;&#12399;&#12371;&#12428;&#12391;&#12418;&#12356;&#12356;</span>
<span class="linenr">19: </span>        bf = split(li,<span style="color: #ffa07a;">"\t"</span>)     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">\t &#12391; split</span>
<span class="linenr">20: </span>        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(bf)</span>
<span class="linenr">21: </span>        <span style="color: #20b2aa; font-weight: bold;">if</span> cnt == 0             <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#34892;&#30446;(header)</span>
<span class="linenr">22: </span>            append!(head,bf)       <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head=bf &#12391;&#12399;&#12456;&#12521;&#12540;&#12392;&#12394;&#12427;. append! &#12434;&#20351;&#12358;</span>
<span class="linenr">23: </span>            <span style="color: #cd853f;">#</span><span style="color: #cd853f;">for i in 1:length(bf)</span>
<span class="linenr">24: </span>            <span style="color: #cd853f;">#   </span><span style="color: #cd853f;">push!(head,bf[i])</span>
<span class="linenr">25: </span>            <span style="color: #cd853f;">#</span><span style="color: #cd853f;">end</span>
<span class="linenr">26: </span>        <span style="color: #20b2aa; font-weight: bold;">else</span>                    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892;&#30446;&#20197;&#38477;(&#12391;&#12540;&#12383;)</span>
<span class="linenr">27: </span>            push!(data,bf)
<span class="linenr">28: </span>        <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">29: </span>        cnt+=1
<span class="linenr">30: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">31: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">32: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">close(fh) # &#33258;&#21205;&#12391;&#38281;&#12376;&#12427;&#12398;&#12391;&#26360;&#12363;&#12394;&#12367;&#12390;&#12418;&#12356;&#12356;&#12387;&#12413;&#12356;.</span>
<span class="linenr">33: </span>
<span class="linenr">34: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">data[][] &#12434; hash &#12398;&#37197;&#21015;&#12395;&#12375;&#12390;&#12415;&#12427;.</span>
<span class="linenr">35: </span>hashs=[]
<span class="linenr">36: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dt <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">37: </span>    hash = <span style="color: #9370db;">Dict</span>{<span style="color: #9370db;">Any</span>,<span style="color: #9370db;">Any</span>}()
<span class="linenr">38: </span>     <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:length(dt)
<span class="linenr">39: </span>        hash[head[i]]=dt[i]
<span class="linenr">40: </span>     <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">41: </span>    push!(hashs,hash)
<span class="linenr">42: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">43: </span>
<span class="linenr">44: </span>println(head)
<span class="linenr">45: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">println(data)</span>
<span class="linenr">46: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">println(data[1][1])</span>
<span class="linenr">47: </span>
<span class="linenr">48: </span>println(head[1])
<span class="linenr">49: </span>println(hashs[1][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">50: </span>println(hashs[2][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">51: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">exit() &#12503;&#12525;&#12464;&#12521;&#12512;&#12434;&#32066;&#12431;&#12425;&#12379;&#12427;&#12392;&#12365;</span>
<span class="linenr">52: </span>
<span class="linenr">53: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12461;&#12515;&#12473;&#12488;&#30340;&#12394;&#12371;&#12392;&#12399;, parse(type,str) &#12434;&#29992;&#12356;&#12427;</span>
<span class="linenr">54: </span>itx = parse(<span style="color: #9370db;">Float64</span>,hashs[1][<span style="color: #ffa07a;">"fdata"</span>]) + parse(<span style="color: #9370db;">Float64</span>,hashs[2][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">55: </span>println(itx)
<span class="linenr">56: </span>
<span class="linenr">57: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#26360;&#12365;&#36796;&#12415;</span>
<span class="linenr">58: </span>open(ofile,<span style="color: #ffa07a;">"w"</span>) <span style="color: #20b2aa; font-weight: bold;">do</span> fp
<span class="linenr">59: </span>   write(fp,join(head,<span style="color: #ffa07a;">"\t"</span>)*<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">60: </span>   <span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">61: </span>      write(fp,join(d,<span style="color: #ffa07a;">"\t"</span>)*<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">62: </span>   <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">63: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
Any["name","age","origin","gender","idata","fdata","type"]
name
0.25
0.38
0.63
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Ruby</h2>
<div class="outline-text-2" id="text-5">
<p>
Ruby での注意点と参考 URL:<br />
</p>
<ul class="org-ul">
<li>基本<br />
<ul class="org-ul">
<li>逆引きRuby - ファイルアクセス<br />
<a href="http://bit.ly/2am8jkn">http://bit.ly/2am8jkn</a><br />
</li>
<li>【Ruby】表示メソッドについて（print,puts,p） - TASK NOTES<br />
<a href="http://www.task-notes.com/entry/20141109/1415520719">http://www.task-notes.com/entry/20141109/1415520719</a><br />
</li>
</ul>
</li>
<li>hash<br />
<ul class="org-ul">
<li>【Ruby】配列とハッシュの基本的な使い方 - TASK NOTES<br />
<a href="http://www.task-notes.com/entry/20141115/1416045573">http://www.task-notes.com/entry/20141115/1416045573</a><br />
</li>
</ul>
</li>
<li>型キャスト(to_f)<br />
<ul class="org-ul">
<li>数値クラスを変換する - 数値(Numeric)クラス - Ruby入門<br />
<a href="http://www.rubylife.jp/ini/numeric_class/index2.html">http://www.rubylife.jp/ini/numeric_class/index2.html</a><br />
</li>
</ul>
</li>
<li>each_with_index (python の enumerate に相当)<br />
<ul class="org-ul">
<li>Python's enumerate in Ruby? - Stack Overflow<br />
<a href="http://stackoverflow.com/questions/13936922/pythons-enumerate-in-ruby">http://stackoverflow.com/questions/13936922/pythons-enumerate-in-ruby</a><br />
</li>
</ul>
</li>
<li>join 等(文字列連結)<br />
ruby の文字列連結は "+" あるいは "&lt;&lt;"<br />
<ul class="org-ul">
<li>Rubyの文字列連結に関して知っておくべきこと - Qiita<br />
<a href="http://qiita.com/Kta-M/items/c7c2fb0b61b11d3a2c48">http://qiita.com/Kta-M/items/c7c2fb0b61b11d3a2c48</a><br />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span>ifile=<span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 2: </span>ofile=<span style="color: #ffa07a;">'output.ruby.txt'</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fh=<span style="color: #76ee00;">open</span>(ifile,<span style="color: #ffa07a;">"r"</span>)
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">str=fh.read     # &#19968;&#27671;&#12395;&#20840;&#37096;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512;</span>
<span class="linenr"> 6: </span>cnt=0
<span class="linenr"> 7: </span>head=[]    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head=Array.new &#12391;&#12418;&#33391;&#12356;</span>
<span class="linenr"> 8: </span>data=[]
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">while</span> li = fh.gets
<span class="linenr">10: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print li</span>
<span class="linenr">11: </span>  li=li.chomp         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25913;&#34892;&#21462;&#12426;&#38500;&#12365;</span>
<span class="linenr">12: </span>  bf=li.split(<span style="color: #ffa07a;">"\t"</span>)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tab &#12391; split</span>
<span class="linenr">13: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(bf)</span>
<span class="linenr">14: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">exit</span>
<span class="linenr">15: </span>  <span style="color: #20b2aa; font-weight: bold;">if</span> cnt==0
<span class="linenr">16: </span>    head=bf
<span class="linenr">17: </span>  <span style="color: #20b2aa; font-weight: bold;">else</span>
<span class="linenr">18: </span>    data.push(bf)
<span class="linenr">19: </span>  <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">20: </span>  cnt+=1
<span class="linenr">21: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">22: </span>fh.close
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #76ee00;">print</span>(head)
<span class="linenr">25: </span><span style="color: #76ee00;">print</span>(<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">26: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(data[0])</span>
<span class="linenr">27: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">exit   &#12371;&#12371;&#12391;&#32066;&#12431;&#12427;&#12392;&#12365; (for debug)</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12398;&#37197;&#21015;&#12395;&#12375;&#12390;&#12415;&#12427;.</span>
<span class="linenr">30: </span>hashs=[]
<span class="linenr">31: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dr <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">32: </span>  hash={}
<span class="linenr">33: </span>  dr.each_with_index <span style="color: #20b2aa; font-weight: bold;">do</span> |d,j|   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">enumerate</span>
<span class="linenr">34: </span>    dk=d
<span class="linenr">35: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> d==<span style="color: #ffa07a;">''</span>
<span class="linenr">36: </span>       <span style="color: #20b2aa; font-weight: bold;">if</span> j==1 <span style="color: #20b2aa; font-weight: bold;">or</span> j==4
<span class="linenr">37: </span>         dk=d.to_i         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25972;&#25968;&#22411;&#12408;&#12461;&#12515;&#12473;&#12488;</span>
<span class="linenr">38: </span>       <span style="color: #20b2aa; font-weight: bold;">elsif</span> j==5
<span class="linenr">39: </span>         dk=d.to_f         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#28014;&#21205;&#23567;&#25968;&#28857;&#22411;&#12408;&#12461;&#12515;&#12473;&#12488;</span>
<span class="linenr">40: </span>       <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">41: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">42: </span>    hash[head[j]]=dk
<span class="linenr">43: </span>  <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">44: </span>  hashs.push(hash)
<span class="linenr">45: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">46: </span>
<span class="linenr">47: </span><span style="color: #76ee00;">print</span>(hashs[0])
<span class="linenr">48: </span><span style="color: #76ee00;">print</span>(<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">49: </span>
<span class="linenr">50: </span>itx = hashs[0][<span style="color: #ffa07a;">"fdata"</span>] + hashs[1][<span style="color: #ffa07a;">"fdata"</span>]
<span class="linenr">51: </span><span style="color: #76ee00;">puts</span>(itx)
<span class="linenr">52: </span>
<span class="linenr">53: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">file &#26360;&#12365;&#20986;&#12375;</span>
<span class="linenr">54: </span>ofh=<span style="color: #76ee00;">open</span>(ofile,<span style="color: #ffa07a;">"w"</span>)
<span class="linenr">55: </span>ofh.write(head.join(<span style="color: #ffa07a;">"\t"</span>)+<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">56: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dt <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">57: </span>   str=dt.join(<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">58: </span>   ofh.write(str+<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">59: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">60: </span>ofh.close
</pre>
</div>

<pre class="example">
["name", "age", "origin", "gender", "idata", "fdata", "type"]
{"name"=&gt;"foo", "age"=&gt;10, "origin"=&gt;"jpn", "gender"=&gt;"M", "idata"=&gt;50, "fdata"=&gt;0.25, "type"=&gt;"X"}
0.63
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> R</h2>
<div class="outline-text-2" id="text-6">
<p>
おまけ(1)<br />
read.table でファイルを読むプログラムを一応作っておく.<br />
</p>

<p>
R での注意点と参考 URL:<br />
</p>
<ul class="org-ul">
<li>read.table()<br />
<ul class="org-ul">
<li>R-Source 40. ファイルからデータを読み込む<br />
<a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/40.html">http://cse.naro.affrc.go.jp/takezawa/r-tips/r/40.html</a><br />
</li>
</ul>
</li>
<li>write.table() のパラメータ<br />
<ul class="org-ul">
<li>R: データ出力<br />
<a href="http://www.is.titech.ac.jp/~mase/mase/html.jp/temp/write.table.jp.html">http://www.is.titech.ac.jp/~mase/mase/html.jp/temp/write.table.jp.html</a><br />
</li>
<li>R-Source 45. ファイルへのデータ出力<br />
<a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/45.html">http://cse.naro.affrc.go.jp/takezawa/r-tips/r/45.html</a><br />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>ifile <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 2: </span>ofile <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'output.R.txt'</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>data <span style="color: #1e90ff;">&lt;-</span> read.table(ifile,sep=<span style="color: #ffa07a;">"\t"</span>,head=T)
<span class="linenr"> 5: </span>data
<span class="linenr"> 6: </span>names(data)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">header &#12398;&#21517;&#21069;</span>
<span class="linenr"> 7: </span>data[<span style="color: #ffa07a;">'name'</span>]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21462;&#24471;</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">quote=F  : "" &#12434;&#20184;&#12369;&#12394;&#12356;</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">append=F : &#19978;&#26360;&#12365;</span>
<span class="linenr">11: </span>write.table(data,ofile,quote=F,sep=<span style="color: #ffa07a;">"\t"</span>,col.names=T,row.names=F,append=F,na=<span style="color: #ffa07a;">""</span>)
</pre>
</div>

<pre class="example">
  name age origin gender idata fdata type
1  foo  10    jpn      M    50  0.25    X
2  bar  30    usa      F    25  0.38    P
3 hoge  10    jpn      F     4  1.00    P
4 fuga  40    eng      M    NA    NA    X
5 fuga  35             F     9  0.10    X
[1] "name"   "age"    "origin" "gender" "idata"  "fdata"  "type"  
  name
1  foo
2  bar
3 hoge
4 fuga
5 fuga
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Java</h2>
<div class="outline-text-2" id="text-7">
<p>
おまけ(2)<br />
</p>

<p>
Java での注意点と参考 URL:<br />
</p>
<ul class="org-ul">
<li>join(Java8)<br />
<ul class="org-ul">
<li>あなたのJavaコードをスッキリさせる、地味に便利な新API 10選（前編） - Taste of Tech Topics<br />
<a href="http://acro-engineer.hatenablog.com/entry/2014/03/12/112402">http://acro-engineer.hatenablog.com/entry/2014/03/12/112402</a><br />
</li>
</ul>
</li>
<li>可変長の配列は List(ArrayList), hash は Map(HashMap) を用いるが何か面倒<br />
push するために List という配列の拡張を使ったが, 何かイマイチな感じ.<br />
<ul class="org-ul">
<li>【Java】配列・リスト・マップの使い方についての基本 - TASK NOTES<br />
<a href="http://www.task-notes.com/entry/20140923/1411477102">http://www.task-notes.com/entry/20140923/1411477102</a><br />
</li>
<li>ArrayListクラス - コレクション(ArrayList) - Java入門<br />
<a href="http://www.javadrive.jp/start/arraylist/index1.html">http://www.javadrive.jp/start/arraylist/index1.html</a><br />
</li>
</ul>
</li>
<li>ファイル書き出し<br />
<ul class="org-ul">
<li>便利な書き込み用クラス - テキストファイルの入出力 - Java入門<br />
<a href="http://www.javadrive.jp/start/stream/index7.html">http://www.javadrive.jp/start/stream/index7.html</a><br />
</li>
</ul>
</li>
<li>trim()<br />
<ul class="org-ul">
<li>先頭又は最後の空白を取り除く(trim) - Stringクラス<br />
<a href="http://www.javadrive.jp/start/string_class/index4.html">http://www.javadrive.jp/start/string_class/index4.html</a><br />
</li>
</ul>
</li>
<li>拡張 for 文<br />
<ul class="org-ul">
<li>【Java】for文と拡張for文の違い - Qiita<br />
<a href="http://qiita.com/Mocacamo/items/290457f9d378ad80ddba">http://qiita.com/Mocacamo/items/290457f9d378ad80ddba</a><br />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-java"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">File</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">FileReader</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">BufferedReader</span>;
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">HashMap</span>;
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">Map</span>;
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">List</span>;
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">ArrayList</span>;
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">FileWriter</span>;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">BufferedWriter</span>;
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">PrintWriter</span>;
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">public</span> <span style="color: #20b2aa; font-weight: bold;">class</span> <span style="color: #9370db;">fread</span> {
<span class="linenr">12: </span>  <span style="color: #20b2aa; font-weight: bold;">public</span> <span style="color: #20b2aa; font-weight: bold;">static</span> <span style="color: #9370db;">void</span> <span style="color: #00ff7f;">main</span>(<span style="color: #9370db;">String</span>[] <span style="color: #9acd32;">args</span>) {
<span class="linenr">13: </span>    <span style="color: #9370db;">String</span> <span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">"input.txt"</span>;
<span class="linenr">14: </span>    <span style="color: #9370db;">String</span> <span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">"output.java.txt"</span>;
<span class="linenr">15: </span>
<span class="linenr">16: </span>    <span style="color: #9370db;">List</span>&lt;<span style="color: #9370db;">Map</span>&gt; <span style="color: #9acd32;">data</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">ArrayList</span>();<span style="color: #4682b4; text-decoration: underline;"> </span>
<span class="linenr">17: </span>    <span style="color: #9370db;">List</span>&lt;<span style="color: #9370db;">String</span>&gt; <span style="color: #9acd32;">head</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">ArrayList</span>();
<span class="linenr">18: </span>    <span style="color: #20b2aa; font-weight: bold;">try</span> {
<span class="linenr">19: </span>      <span style="color: #9370db;">File</span> <span style="color: #9acd32;">file</span>=<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">File</span>(ifile);
<span class="linenr">20: </span>      <span style="color: #9370db;">BufferedReader</span> <span style="color: #9acd32;">br</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">BufferedReader</span>(<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">FileReader</span>(file));
<span class="linenr">21: </span>      <span style="color: #9370db;">int</span> <span style="color: #9acd32;">cnt</span>=0;
<span class="linenr">22: </span>      <span style="color: #9370db;">String</span> <span style="color: #9acd32;">str</span>;
<span class="linenr">23: </span>      <span style="color: #20b2aa; font-weight: bold;">while</span>((str=br.readLine())!=<span style="color: #1e90ff;">null</span>) {
<span class="linenr">24: </span>        <span style="color: #9370db;">String</span> [] <span style="color: #9acd32;">row</span>=str.split(<span style="color: #ffa07a;">"\t"</span>);
<span class="linenr">25: </span>        <span style="color: #20b2aa; font-weight: bold;">if</span>(cnt==0) {
<span class="linenr">26: </span>          <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : row) { <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#20309;&#12363;&#27671;&#25345;&#12385;&#24746;&#12356;&#12369;&#12393;</span>
<span class="linenr">27: </span>             head.add(s);
<span class="linenr">28: </span>          }
<span class="linenr">29: </span>        }<span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr">30: </span>          <span style="color: #9370db;">Map</span>&lt;<span style="color: #9370db;">String</span>,<span style="color: #9370db;">String</span>&gt; <span style="color: #9acd32;">hash</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">HashMap</span>();
<span class="linenr">31: </span>          <span style="color: #9370db;">int</span> <span style="color: #9acd32;">i</span>=0;
<span class="linenr">32: </span>          <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : head) {
<span class="linenr">33: </span>             hash.put(s,row[i++]);
<span class="linenr">34: </span>          }
<span class="linenr">35: </span>          data.add(hash);
<span class="linenr">36: </span>        }
<span class="linenr">37: </span>        cnt++;
<span class="linenr">38: </span>      }
<span class="linenr">39: </span>    }<span style="color: #20b2aa; font-weight: bold;">catch</span>(<span style="color: #9370db;">Exception</span> <span style="color: #9acd32;">e</span>) {
<span class="linenr">40: </span>      System.out.println(e);
<span class="linenr">41: </span>    }
<span class="linenr">42: </span>    System.out.println(String.join(<span style="color: #ffa07a;">"\t"</span>,head));
<span class="linenr">43: </span>    System.out.println(data.get(0).get(<span style="color: #ffa07a;">"name"</span>));
<span class="linenr">44: </span>    <span style="color: #cd853f;">// </span><span style="color: #cd853f;">System.exit(0);  // &#32066;&#12431;&#12427;&#12392;&#12365;</span>
<span class="linenr">45: </span>
<span class="linenr">46: </span>    <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#26360;&#12365;&#20986;&#12375;</span>
<span class="linenr">47: </span>    <span style="color: #20b2aa; font-weight: bold;">try</span> {
<span class="linenr">48: </span>      <span style="color: #9370db;">File</span> <span style="color: #9acd32;">ofh</span>          = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">File</span>(ofile);
<span class="linenr">49: </span>      <span style="color: #9370db;">FileWriter</span> <span style="color: #9acd32;">fw</span>     = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">FileWriter</span>(ofh);
<span class="linenr">50: </span>      <span style="color: #9370db;">BufferedWriter</span> <span style="color: #9acd32;">bw</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">BufferedWriter</span>(fw);
<span class="linenr">51: </span>      <span style="color: #9370db;">PrintWriter</span> <span style="color: #9acd32;">pw</span>    = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">PrintWriter</span>(bw);
<span class="linenr">52: </span>      <span style="color: #9370db;">String</span> <span style="color: #9acd32;">prnt</span>=String.join(<span style="color: #ffa07a;">"\t"</span>,head)+<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">53: </span>      <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">Map</span> <span style="color: #9acd32;">mp</span> : data) {       <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#25313;&#24373; for</span>
<span class="linenr">54: </span>        <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : head) {   <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#33510;&#32905;&#12398;&#31574;</span>
<span class="linenr">55: </span>          prnt+=mp.get(s)+<span style="color: #ffa07a;">"\t"</span>;
<span class="linenr">56: </span>        }
<span class="linenr">57: </span>        prnt.trim();  <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#20808;&#38957;, &#26368;&#24460;&#12398;&#31354;&#30333;&#12434;&#21462;&#12426;&#38500;&#12367;</span>
<span class="linenr">58: </span>        prnt+=<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">59: </span>      }
<span class="linenr">60: </span>      System.out.print(prnt);
<span class="linenr">61: </span>      pw.print(prnt);
<span class="linenr">62: </span>      pw.close();
<span class="linenr">63: </span>    }<span style="color: #20b2aa; font-weight: bold;">catch</span>(<span style="color: #9370db;">Exception</span> <span style="color: #9acd32;">e</span>) {
<span class="linenr">64: </span>      System.out.println(e);
<span class="linenr">65: </span>    }
<span class="linenr">66: </span>  }
<span class="linenr">67: </span>}
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X 
bar 30  usa F 25  0.38  P 
hoge  10  jpn F 4 1 P 
fuga  40  eng M     X 
fuga  35    F 9 0.1 X
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> かんそう</h2>
<div class="outline-text-2" id="text-8">
<p>
perl, python, ruby は似たような感じ.<br />
ruby は書きやすかった. きっちりしてる感じ.<br />
ruby に比べると python はやっぱり何か, 開きっぱなしで閉じてない感じがいまんとこしっくりこないんだけどなぁ.<br />
常に何か忘れてるような, そんな一抹の不安を覚えたりします. 慣れればなんともないんでしょーか.<br />
変数のスコープもよくわかんないし&#x2026;<br />
Julia も上記の言語と同じような感じでいけるのかなぁと思っていたのですが, 何かいちいち勝手が違う感じ.<br />
こんな感じでうまくいくかな, という適当さが全然通用しなかった. python, ruby は適当にやっても何とかなったんだけど&#x2026;<br />
色々と調べることが多かった.<br />
つーか文字列の連結が "*" って意味わかんないような&#x2026; こういうの検索とかで探しにくいから困るんだよなぁ.<br />
"." か "+" か, 最悪 "&amp;" とか, わかりやすい感じにして欲しいなぁ&#x2026; あるいは concat とか.<br />
R, Java はおまけでやってみましたが, いまいちうまく比較できなかったのでやらなくてもよかったかも.<br />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Julia Essentials のまとめ]]></title>
    <link href="http://saito1369.github.io/blog/2017-03-18-0103_Julia_Essentials.html"/>
    <updated>2017-03-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/0103_Julia_Essentials</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Common Data Types</a>
<ul>
<li><a href="#sec-1-1">1.1. 真偽値</a>
<ul>
<li><a href="#sec-1-1-1">1.1.1. julia</a></li>
<li><a href="#sec-1-1-2">1.1.2. perl</a></li>
<li><a href="#sec-1-1-3">1.1.3. python</a></li>
<li><a href="#sec-1-1-4">1.1.4. R</a></li>
<li><a href="#sec-1-1-5">1.1.5. Ruby</a></li>
<li><a href="#sec-1-1-6">1.1.6. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-2">1.2. 整数及び浮動小数点</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. julia</a></li>
<li><a href="#sec-1-2-2">1.2.2. perl</a></li>
<li><a href="#sec-1-2-3">1.2.3. python</a></li>
<li><a href="#sec-1-2-4">1.2.4. R</a></li>
<li><a href="#sec-1-2-5">1.2.5. ruby</a></li>
<li><a href="#sec-1-2-6">1.2.6. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-3">1.3. 文字列</a></li>
<li><a href="#sec-1-4">1.4. タプル</a>
<ul>
<li><a href="#sec-1-4-1">1.4.1. julia</a></li>
<li><a href="#sec-1-4-2">1.4.2. python</a></li>
<li><a href="#sec-1-4-3">1.4.3. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-5">1.5. 配列</a>
<ul>
<li><a href="#sec-1-5-1">1.5.1. julia</a></li>
<li><a href="#sec-1-5-2">1.5.2. perl</a></li>
<li><a href="#sec-1-5-3">1.5.3. python</a></li>
<li><a href="#sec-1-5-4">1.5.4. R</a></li>
<li><a href="#sec-1-5-5">1.5.5. ruby</a></li>
<li><a href="#sec-1-5-6">1.5.6. numpy</a></li>
<li><a href="#sec-1-5-7">1.5.7. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-6">1.6. 辞書(hash)</a>
<ul>
<li><a href="#sec-1-6-1">1.6.1. julia</a></li>
<li><a href="#sec-1-6-2">1.6.2. perl</a></li>
<li><a href="#sec-1-6-3">1.6.3. python</a></li>
<li><a href="#sec-1-6-4">1.6.4. ruby</a></li>
<li><a href="#sec-1-6-5">1.6.5. js</a></li>
<li><a href="#sec-1-6-6">1.6.6. まとめ</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. Basic file I/O</a></li>
<li><a href="#sec-3">3. 繰り返し</a>
<ul>
<li><a href="#sec-3-1">3.1. julia</a></li>
<li><a href="#sec-3-2">3.2. perl</a></li>
<li><a href="#sec-3-3">3.3. python</a></li>
<li><a href="#sec-3-4">3.4. ruby</a></li>
<li><a href="#sec-3-5">3.5. R</a></li>
<li><a href="#sec-3-6">3.6. js</a></li>
<li><a href="#sec-3-7">3.7. まとめ</a></li>
<li><a href="#sec-3-8">3.8. 内包表記</a>
<ul>
<li><a href="#sec-3-8-1">3.8.1. julia</a></li>
<li><a href="#sec-3-8-2">3.8.2. python</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-4">4. 比較</a>
<ul>
<li><a href="#sec-4-1">4.1. julia</a></li>
<li><a href="#sec-4-2">4.2. perl</a></li>
<li><a href="#sec-4-3">4.3. python</a></li>
<li><a href="#sec-4-4">4.4. ruby</a></li>
<li><a href="#sec-4-5">4.5. R</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 関数</a>
<ul>
<li><a href="#sec-5-1">5.1. julia</a></li>
<li><a href="#sec-5-2">5.2. まとめ</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-03-18 Sat 15:18&gt;</span></span><br />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 19:19&gt;</span></span><br />
</p>
<p>
<a href="https://lectures.quantecon.org/jl/julia_essentials.html">https://lectures.quantecon.org/jl/julia_essentials.html</a><br />
をもとにして, julia 言語での書き方を見てみたのでその記録.<br />
混乱は忘却の素ともいうので, 自分がちょっとだけ知ってる他の言語での書き方との違いを比較しながらみていこうと思う.<br />
</p>

<p>
<!-- more --><br />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Common Data Types</h2>
<div class="outline-text-2" id="text-1">
<p>
まずは基本的な型についてみていく.<br />
Julia は他の script 言語とひかくして<br />
型の取扱いがちょっとめんどくさい印象.<br />
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 真偽値</h3>
<div class="outline-text-3" id="text-1-1">
<p>
true, false は言語によって微妙に取扱いがことなる.<br />
0 を true/false どちらに入れるかとか?<br />
各言語でどーなってるのか比較.<br />
</p>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> julia</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
typeof: Bool<br />
値:   true, false<br />
</p>

<p>
julia では Boolian 値は true, false (全部小文字)<br />
0, 1 は自動で Bool に直してくれない(java と同じ).<br />
いちいち convert(型, 値) としないといけないようです.<br />
</p>

<p>
<a href="http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/">http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/</a><br />
julia のこの型指定, これからも色々と出て来るみたいだけどちょっと面倒なかんじ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">true, false &#12364;&#20104;&#32004;&#35486;(&#23567;&#25991;&#23383;&#12391;&#26360;&#12367;)</span>
x=<span style="color: #1e90ff;">true</span>
println(x)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12399; Bool &#22411;</span>
println(typeof(x))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12363;&#12369;&#12427;.</span>
y= 1 &gt; 2
println(y)

<span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"T+F = %d\n"</span>,<span style="color: #1e90ff;">true</span> + <span style="color: #1e90ff;">false</span>)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25968;&#20516;&#12395;&#30452;&#12377;&#12392; true &#12399; 1, false &#12399; 0</span>
<span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"sum=%d\n"</span>,sum([<span style="color: #1e90ff;">true</span>,<span style="color: #1e90ff;">false</span>,<span style="color: #1e90ff;">false</span>,<span style="color: #1e90ff;">true</span>]))

<span style="color: #cd853f;">#</span><span style="color: #cd853f;">if(1) &#12392;&#12363;&#12420;&#12427;&#12392;  error &#12392;&#12394;&#12427;. &#20197;&#19979;&#12398;&#27096;&#12395;&#26360;&#12367;&#24517;&#35201;&#12364;&#12354;&#12427;.</span>
<span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,1))
    println(<span style="color: #ffa07a;">"1 is true"</span>)
<span style="color: #20b2aa; font-weight: bold;">end</span>

<span style="color: #cd853f;">#</span><span style="color: #cd853f;">if(0) &#12392;&#12363;&#26360;&#12367;&#12392;&#12371;&#12428;&#12418; error &#12392;&#12394;&#12427;</span>
<span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,0))
    println(<span style="color: #ffa07a;">"pass"</span>)
<span style="color: #20b2aa; font-weight: bold;">else</span>
    println(<span style="color: #ffa07a;">"0 is false"</span>)
<span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
true
Bool
false
T+F = 1
sum=2
1 is true
0 is false
</pre>
</div>
</div>
<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2"><span class="section-number-4">1.1.2</span> perl</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
perl には, true, false に相当する語句がない?<br />
0, '0', undef, '', (), ('') は false<br />
それ以外は                     true<br />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21442;&#29031;:</span>
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">http://stackoverflow.com/questions/1036347/how-do-i-use-boolean-variables-in-perl</span>
<span class="linenr">5: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">"true\n"</span>  <span style="color: #20b2aa; font-weight: bold;">if</span>(1);
<span class="linenr">6: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">"false\n"</span> <span style="color: #20b2aa; font-weight: bold;">unless</span>(0);
</pre>
</div>

<pre class="example">
true
false
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-3" class="outline-4">
<h4 id="sec-1-1-3"><span class="section-number-4">1.1.3</span> python</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
python は, True, False(一文字目が大文字)<br />
1 は True. 0 は False<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">True</span>):
<span class="linenr"> 2: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"True"</span>)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">False</span>):
<span class="linenr"> 5: </span>    <span style="color: #20b2aa; font-weight: bold;">pass</span>
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr"> 7: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"False"</span>)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1):
<span class="linenr">10: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"1 is True"</span>)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0):
<span class="linenr">13: </span>    <span style="color: #20b2aa; font-weight: bold;">pass</span>
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr">15: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"0 is False"</span>)
</pre>
</div>

<pre class="example">
True
False
1 is True
0 is False
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-4" class="outline-4">
<h4 id="sec-1-1-4"><span class="section-number-4">1.1.4</span> R</h4>
<div class="outline-text-4" id="text-1-1-4">
<p>
R は TRUE, FALSE (全部大文字)<br />
1 は TRUE, 0 は FALSE<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">TRUE</span>) {
<span class="linenr"> 2: </span>    print(<span style="color: #ffa07a;">"TRUE"</span>)
<span class="linenr"> 3: </span>}
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">FALSE</span>) {
<span class="linenr"> 5: </span>    print(<span style="color: #ffa07a;">"pass"</span>)
<span class="linenr"> 6: </span>} <span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr"> 7: </span>    print(<span style="color: #ffa07a;">"FALSE"</span>)
<span class="linenr"> 8: </span>}
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1) {
<span class="linenr">10: </span>    print(<span style="color: #ffa07a;">"1 is TRUE"</span>)
<span class="linenr">11: </span>}
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0) {
<span class="linenr">13: </span>    print(<span style="color: #ffa07a;">"pass"</span>)
<span class="linenr">14: </span>}<span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr">15: </span>    print(<span style="color: #ffa07a;">"0 is FALSE"</span>)
<span class="linenr">16: </span>}
</pre>
</div>

<pre class="example">
[1] "TRUE"
[1] "FALSE"
[1] "1 is TRUE"
[1] "0 is FALSE"
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-5" class="outline-4">
<h4 id="sec-1-1-5"><span class="section-number-4">1.1.5</span> Ruby</h4>
<div class="outline-text-4" id="text-1-1-5">
<p>
Ruby は true/TRUE どっちでもいいのか?<br />
他の言語と違い 0 は true!! (何かやな感じ)<br />
false と nil 以外は true として扱われる.<br />
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">TRUE</span>)
<span class="linenr"> 2: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"TRUE"</span>)
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">true</span>)
<span class="linenr"> 6: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"true"</span>)
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">false</span>)
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">else</span>
<span class="linenr">11: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"false"</span>)
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"FALSE"</span>)        <span style="color: #20b2aa; font-weight: bold;">unless</span>(<span style="color: #9370db;">FALSE</span>)
<span class="linenr">15: </span><span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"nil is FALSE"</span>) <span style="color: #20b2aa; font-weight: bold;">unless</span>(<span style="color: #1e90ff;">nil</span>)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0)
<span class="linenr">18: </span>   <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"0 is true!!"</span>)
<span class="linenr">19: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
TRUE
true
false
FALSE
nil is FALSE
0 is true!!
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-6" class="outline-4">
<h4 id="sec-1-1-6"><span class="section-number-4">1.1.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-1-6">
<p>
微妙に違ってて間違えそう.<br />
表でまとめておく.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">true を示すもじ</th>
<th scope="col" class="left">0 の扱い</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">true</td>
<td class="left">false (convert(Bool,0)</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">1</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">True</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">TRUE</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">true/TRUE</td>
<td class="left">true</td>
</tr>
</tbody>
</table>


<p>
もう既にまとめがあったのでこっちを参照した方がよいでしょう.<br />
<a href="http://blog.mirakui.com/entry/20090604/truefalse">http://blog.mirakui.com/entry/20090604/truefalse</a><br />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 整数及び浮動小数点</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> julia</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
typeof: Int64, Float64<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">1.0 &#12392;&#26360;&#12367;&#12392;&#33258;&#21205;&#12391; Float64</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1   &#12392;&#26360;&#12367;&#12392;&#33258;&#21205;&#12391; Int64</span>
println(<span style="color: #ffa07a;">"type of 1.0="</span>,typeof(1.0))
println(<span style="color: #ffa07a;">"type of 1  ="</span>,typeof(1))

x=2
y=1.0
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#33258;&#21205;&#12391;&#22411;&#12434; Float64 &#12395;&#12375;&#12390;&#12367;&#12428;&#12427;.</span>
println(<span style="color: #ffa07a;">"x*y="</span>,x*y)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#32047;&#20055;&#12399; ^ &#12391;&#26360;&#12367;(** &#12391;&#12399;&#12394;&#12356;. LaTeX &#25968;&#24335;)</span>
println(<span style="color: #ffa07a;">"x^2="</span>,x^2)
println(<span style="color: #ffa07a;">"y/x="</span>,y/x)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2*x &#12399; 2x &#12392;&#26360;&#12369;&#12427;(&#24517;&#35201;&#12354;&#12427;&#12398;&#12363;&#12394;...)</span>
println(<span style="color: #ffa07a;">"2x-3y="</span>,2x-3y)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">+, * &#12434;&#38306;&#25968;&#12392;&#12415;&#12394;&#12375;&#12390;&#24460;&#12429;&#12395;&#24341;&#25968;, &#30340;&#12394;&#26360;&#12365;&#26041;&#12418;&#12391;&#12365;&#12427;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12394;&#12427;&#12411;&#12393;. &#19968;&#36011;&#12375;&#12390;&#12390;&#12356;&#12356;&#12424;&#12358;&#12394;.</span>
println(<span style="color: #ffa07a;">"10+20="</span>,+(10,20))
println(<span style="color: #ffa07a;">"10*20="</span>,*(10,20))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35079;&#32032;&#25968; im</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12354;&#12435;&#12414;&#12426;&#20351;&#12431;&#12394;&#12356;&#12392;&#24605;&#12358;&#12369;&#12393;&#12392;&#12426;&#12354;&#12360;&#12378;&#26360;&#12356;&#12390;&#12362;&#12367;.</span>
x=1+2im
println(<span style="color: #ffa07a;">"1+2i="</span>,x)
y=1-2im
println(<span style="color: #ffa07a;">"1-2i="</span>,y)
x*y
println(<span style="color: #ffa07a;">"x*y="</span>,x*y)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">"" &#12398;&#20013;&#12391;&#22793;&#25968;&#12434;&#26360;&#12363;&#12379;&#12383;&#12356;&#12392;&#12365;&#12399;, $&#22793;&#25968; &#12392;&#26360;&#12367;&#12392;&#12424;&#12356;.</span>
println(<span style="color: #ffa07a;">"x=$x"</span>)
println(<span style="color: #ffa07a;">"x+y=$(x+y)"</span>)
</pre>
</div>

<pre class="example">
type of 1.0=Float64
type of 1  =Int64
x*y=2.0
x^2=4
y/x=0.5
2x-3y=1.0
10+20=30
10*20=200
1+2i=1 + 2im
1-2i=1 - 2im
x*y=5 + 0im
x=1 + 2im
x+y=2 + 0im
</pre>

<p>
julia が他のと違うのは, 2x 的な表現で書けること位.<br />
何か気持ち悪いので多分使わないと思うけど&#x2026;<br />
</p>

<p>
以下別の言語でどーかくのか.<br />
累乗だけ書いておきます.<br />
</p>
</div>
</div>
<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> perl</h4>
<div class="outline-text-4" id="text-1-2-2">
<div class="org-src-container">

<pre class="src src-perl"><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$x</span>=10;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$y</span>=$x**3;
<span style="color: #ff83fa;">print</span> $y.<span style="color: #ffa07a;">"\n"</span>;
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3"><span class="section-number-4">1.2.3</span> python</h4>
<div class="outline-text-4" id="text-1-2-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #9acd32;">x</span>=10
<span style="color: #9acd32;">y</span>=x**3
<span style="color: #20b2aa; font-weight: bold;">print</span>(y)
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-4" class="outline-4">
<h4 id="sec-1-2-4"><span class="section-number-4">1.2.4</span> R</h4>
<div class="outline-text-4" id="text-1-2-4">
<div class="org-src-container">

<pre class="src src-R">x <span style="color: #1e90ff;">&lt;-</span> 10
y <span style="color: #1e90ff;">&lt;-</span> x**3
y
z <span style="color: #1e90ff;">&lt;-</span> x^3  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12428;&#12418;&#12356;&#12369;&#12427;&#65281;&#65281;</span>
z
</pre>
</div>

<pre class="example">
[1] 1000
[1] 1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-5" class="outline-4">
<h4 id="sec-1-2-5"><span class="section-number-4">1.2.5</span> ruby</h4>
<div class="outline-text-4" id="text-1-2-5">
<div class="org-src-container">

<pre class="src src-ruby">x = 10
y = x**3
<span style="color: #76ee00;">puts</span> y
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-6" class="outline-4">
<h4 id="sec-1-2-6"><span class="section-number-4">1.2.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-2-6">
<p>
一応まとめておきます.<br />
julia だけ累乗は 2^3 みたいに書くらしい.<br />
こういうオリジナリティいらないんだけどなー(注: R でも同じように書けるっぽい).<br />
ついつい 2**3 って書いてしまいそう.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">累乗</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">2^3</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">2**3</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 文字列</h3>
<div class="outline-text-3" id="text-1-3">
<p>
typeof: String<br />
</p>

<p>
文字列操作は自分の場合 perl でやったほうが早そう.<br />
なので julia での書き方だけさらっと見ておく.<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#36899;&#32080;&#12395;&#12399;, &#20309;&#12392; "*" &#12434;&#20351;&#12358;.</span>
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12391;&#12371;&#12398;&#35352;&#21495;&#12394;&#12398;&#12363;...</span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12431;&#12363;&#12425;&#12435;&#12369;&#12393;&#20309;&#12363;&#28145;&#12356;&#29702;&#30001;&#12364;&#12354;&#12427;&#12435;&#12384;&#12429;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12388;&#12540;&#12363; perl &#12392;&#21516;&#12376; "." &#12392;&#12363; python, Java &#12398; "+" &#12391;&#12356;&#12356;&#12424;&#12358;&#12394;...</span>
<span class="linenr"> 5: </span>fb = <span style="color: #ffa07a;">"foo"</span> * <span style="color: #ffa07a;">"bar"</span>
<span class="linenr"> 6: </span>println(<span style="color: #ffa07a;">"concat foo and  bar = foo * bar: "</span>,fb)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>s=<span style="color: #ffa07a;">"Charlie don't surf"</span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">perl &#12391;&#12418;&#12362;&#12394;&#12376;&#12415;&#12398; split &#38306;&#25968;</span>
<span class="linenr">10: </span>println(split(s))
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#32622;&#25563;</span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12398;&#36794;&#12399;&#23455;&#38555;&#12395;&#20351;&#12358;&#12424;&#12358;&#12395;&#12394;&#12387;&#12390;&#12363;&#12425;&#35443;&#12375;&#12367;&#35519;&#12409;&#12424;&#12358;</span>
<span class="linenr">14: </span>println(replace(s,<span style="color: #ffa07a;">"surf"</span>,<span style="color: #ffa07a;">"ski"</span>))
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">split(&#25991;&#23383;&#21015;,&#20998;&#21106;&#25991;&#23383;)</span>
<span class="linenr">17: </span>println(split(<span style="color: #ffa07a;">"fee,fi,fo"</span>,<span style="color: #ffa07a;">","</span>))
<span class="linenr">18: </span>
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">trim</span>
<span class="linenr">20: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;&#24460;&#12398;&#31354;&#30333;&#21462;&#12426;&#38500;&#12365;&#12395;&#12399; strip &#12392;&#12356;&#12358;&#38306;&#25968;&#12364;&#12354;&#12427;.</span>
<span class="linenr">21: </span>println(strip(<span style="color: #ffa07a;">" foobar "</span>))
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#20013;&#12363;&#12425;&#25968;&#20516;&#12434;&#12415;&#12388;&#12369;&#12427;.</span>
<span class="linenr">24: </span>println(match(r<span style="color: #ffa07a;">"(\d+)"</span>,<span style="color: #ffa07a;">"Top 10"</span>))
</pre>
</div>

<pre class="example">
concat foo and  bar = foo * bar: foobar
SubString{String}["Charlie","don't","surf"]
Charlie don't ski
SubString{String}["fee","fi","fo"]
foobar
RegexMatch("10", 1="10")
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> タプル</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1"><span class="section-number-4">1.4.1</span> julia</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
typeof: Tuple, Array<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">tuple &#12398;&#23459;&#35328;</span>
<span class="linenr">2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x = ("foo","bar") &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x = "foo", "bar"  &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">4: </span>x=tuple(<span style="color: #ffa07a;">"foo"</span>,<span style="color: #ffa07a;">"bar"</span>)
<span class="linenr">5: </span>println(x)
<span class="linenr">6: </span>println(typeof(x))
<span class="linenr">7: </span>w1, w2 = x
<span class="linenr">8: </span>println(w1)
<span class="linenr">9: </span>print(length(x))
</pre>
</div>

<pre class="example">
("foo","bar")
Tuple{String,String}
foo
2
</pre>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2"><span class="section-number-4">1.4.2</span> python</h4>
<div class="outline-text-4" id="text-1-4-2">
<p>
python での宣言<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #9acd32;">x</span>=<span style="color: #76ee00;">tuple</span>([1,2,3])
<span style="color: #9acd32;">y</span>=(2,3,4)
<span style="color: #9acd32;">z</span>=x+y
<span style="color: #20b2aa; font-weight: bold;">print</span>(z)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">type</span>(z))
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(z))
<span style="color: #20b2aa; font-weight: bold;">for</span> p <span style="color: #20b2aa; font-weight: bold;">in</span> z:
    <span style="color: #20b2aa; font-weight: bold;">print</span>(p)
</pre>
</div>

<pre class="example">
(1, 2, 3, 2, 3, 4)
&lt;class 'tuple'&gt;
6
1
2
3
2
3
4
</pre>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3"><span class="section-number-4">1.4.3</span> まとめ</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
まとめ表です.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">宣言</th>
<th scope="col" class="left">長さ</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">tuple(1,2,3)</td>
<td class="left">length(x)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">tuple([1,2,3])</td>
<td class="left">len(x)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> 配列</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1"><span class="section-number-4">1.5.1</span> julia</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
julia では配列の添字は 1 はじまり!!<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12398;&#23459;&#35328;</span>
<span class="linenr">2: </span>x= [10,20,30,40]
<span class="linenr">3: </span>println(x)
<span class="linenr">4: </span>println(typeof(x))
<span class="linenr">5: </span>println(<span style="color: #ffa07a;">"x[end  ]="</span>,x[<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">6: </span>println(<span style="color: #ffa07a;">"x[end-1]="</span>,x[<span style="color: #20b2aa; font-weight: bold;">end</span>-1])
<span class="linenr">7: </span>println(<span style="color: #ffa07a;">"x[1:3]  ="</span>,x[1:3])
<span class="linenr">8: </span>println(<span style="color: #ffa07a;">"x[2:end]="</span>,x[2:<span style="color: #20b2aa; font-weight: bold;">end</span>])
</pre>
</div>

<pre class="example">
[10,20,30,40]
Array{Int64,1}
x[end  ]=40
x[end-1]=30
x[1:3]  =[10,20,30]
x[2:end]=[20,30,40]
</pre>

<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12392;&#37197;&#21015;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37096;&#20998;&#25991;&#23383;&#21015;</span>
println(<span style="color: #ffa07a;">"foobar"</span>[3:<span style="color: #20b2aa; font-weight: bold;">end</span>])
</pre>
</div>

<pre class="example">
obar
</pre>

<p>
配列に関する書き方いろいろ.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12395;&#12388;&#12356;&#12390;</span>
<span class="linenr"> 2: </span>a=[1,2,3]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr"> 3: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"array a = %s\n"</span>, a)
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">"," &#12434;&#12388;&#12369;&#12394;&#12356;&#12391;&#12363;&#12367;&#12371;&#12392;&#12418;&#12391;&#12365;&#12427;.</span>
<span class="linenr"> 6: </span>b=[1 2 3]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12505;&#12463;&#12488;&#12523;&#12395;&#12394;&#12427;.</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"array b = %s\n"</span>, b)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12399;&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#23459;&#35328;</span>
<span class="linenr">10: </span>mat=[1 4 7; 2 5 8; 3 6 9]
<span class="linenr">11: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[2,1]  =%d\n"</span>,mat[2,1]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892; 1 &#21015;&#30446;</span>
<span class="linenr">12: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[1,3]  =%d\n"</span>,mat[1,3])
<span class="linenr">13: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[1,end]=%d\n"</span>,mat[1,<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">14: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[4]    =%d\n"</span>,mat[4])
<span class="linenr">15: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[end]  =%d\n"</span>,mat[<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">16: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat=%s\n"</span>,mat)
<span class="linenr">17: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat'=%s\n"</span>,mat')  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36578;&#32622;&#34892;&#21015; &#12395;&#12399; ' &#12434;&#12388;&#12369;&#12427;</span>
<span class="linenr">18: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat'=%s\n"</span>,transpose(mat)) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">transpose &#38306;&#25968;&#12391;&#12418;&#12424;&#12356;</span>
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">exit()</span>
<span class="linenr">20: </span>
<span class="linenr">21: </span>col=[1,2,3] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr">22: </span>row=[1 2 3] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr">23: </span>
<span class="linenr">24: </span>inn=row*col <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12388;&#12375;&#12363;&#35201;&#32032;&#12434;&#25345;&#12383;&#12394;&#12356;&#37197;&#21015;</span>
<span class="linenr">25: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"inner product=%d\n"</span>,inn[1]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35201;&#32032;&#12399; 1 &#12363;&#12425;&#22987;&#12414;&#12427;.</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12398;&#34920;&#31034;</span>
<span class="linenr">28: </span>println(typeof(inn))
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#21021;&#26399;&#21270;</span>
<span class="linenr">31: </span>xs = zeros(<span style="color: #9370db;">Float64</span>,5)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12434; 0 &#12391;&#21021;&#26399;&#21270;</span>
<span class="linenr">32: </span>print(<span style="color: #ffa07a;">"xs ="</span>)
<span class="linenr">33: </span>println(xs)
<span class="linenr">34: </span>
<span class="linenr">35: </span>xs2=[0.0 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:5] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12522;&#12473;&#12488;&#20869;&#21253;&#34920;&#35352;</span>
<span class="linenr">36: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"xs2=%s\n"</span>,xs2)
<span class="linenr">37: </span>
<span class="linenr">38: </span>x1=ones(<span style="color: #9370db;">Float64</span>,5) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12391;&#21021;&#26399;&#21270;</span>
<span class="linenr">39: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x1=ones(5)       # Float64 &#12399;&#30465;&#30053;&#21487;&#33021;</span>
<span class="linenr">40: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"x1=%s\n"</span>,x1)
<span class="linenr">41: </span>
<span class="linenr">42: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21336;&#20301;&#34892;&#21015;</span>
<span class="linenr">43: </span>mt0=eye(<span style="color: #9370db;">Float64</span>,3)
<span class="linenr">44: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mt0=%s\n"</span>,mt0)
<span class="linenr">45: </span>
<span class="linenr">46: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">3x4 &#34892;&#21015;(&#21021;&#26399;&#21270;&#12394;&#12375;)</span>
<span class="linenr">47: </span>m34=<span style="color: #9370db;">Array</span>(<span style="color: #9370db;">Float64</span>,(3,4))
<span class="linenr">48: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36969;&#24403;&#12394;&#20516;&#12364;&#20837;&#12387;&#12390;&#12427;</span>
<span class="linenr">49: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"m34=%s\n"</span>,m34)
</pre>
</div>

<pre class="example">
array a = [1,2,3]
array b = [1 2 3]
mat[2,1]  =2
mat[1,3]  =7
mat[1,end]=7
mat[4]    =4
mat[end]  =9
mat=[1 4 7; 2 5 8; 3 6 9]
mat'=[1 2 3; 4 5 6; 7 8 9]
mat'=[1 2 3; 4 5 6; 7 8 9]
inner product=14
Array{Int64,1}
xs =[0.0,0.0,0.0,0.0,0.0]
xs2=[0.0,0.0,0.0,0.0,0.0]
x1=[1.0,1.0,1.0,1.0,1.0]
mt0=[1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]
m34=[2.22637e-314 2.22637e-314 0.0 0.0; 2.22619e-314 2.22619e-314 0.0 0.0; 2.22619e-314 2.22619e-314 0.0 0.0]
</pre>

<p>
他言語との比較用<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>ar = [ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9 ]
<span class="linenr">2: </span>println(length(ar))
<span class="linenr">3: </span>push!(ar,1)
<span class="linenr">4: </span>unshift!(ar,2)
<span class="linenr">5: </span>pop!(ar)
<span class="linenr">6: </span>shift!(ar)
<span class="linenr">7: </span>ax=[1,2]
<span class="linenr">8: </span>append!(ar,ax)
<span class="linenr">9: </span>println(ar)
</pre>
</div>

<pre class="example">
9
[2,4,6,8,10,12,14,16,18,1,2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2"><span class="section-number-4">1.5.2</span> perl</h4>
<div class="outline-text-4" id="text-1-5-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">Data::Dumper</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$arr</span>=[1 .. 9];
<span class="linenr"> 6: </span><span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span> = <span style="color: #ff83fa;">map</span> {$_*2} <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>;
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #ff83fa;">print</span> <span style="color: #ff83fa;">scalar</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr"> 9: </span><span style="color: #ff83fa;">push</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,1);            <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429; &#12367;&#12387;&#12388;&#12369;</span>
<span class="linenr">10: </span><span style="color: #ff83fa;">unshift</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,1);         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;   &#12367;&#12387;&#12388;&#12369;</span>
<span class="linenr">11: </span><span style="color: #ff83fa;">pop</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>);               <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429; &#21066;&#38500;</span>
<span class="linenr">12: </span><span style="color: #ff83fa;">shift</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>);             <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;   &#21066;&#38500;</span>
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ax</span>=(1,2);
<span class="linenr">14: </span><span style="color: #ff83fa;">push</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ax</span>);
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #ff83fa;">print</span> Data::Dumper-&gt;Dump([$arr]);
</pre>
</div>

<pre class="example">
9
$VAR1 = [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18,
          1,
          2
        ];
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-3" class="outline-4">
<h4 id="sec-1-5-3"><span class="section-number-4">1.5.3</span> python</h4>
<div class="outline-text-4" id="text-1-5-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #9acd32;">arr</span> = [ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10)]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(arr))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#38263;&#12373;</span>
<span class="linenr">3: </span>arr.append(1)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">4: </span>arr.insert(0,2)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;(0 &#30058;&#30446;)&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">5: </span>arr.pop()        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12434;&#21066;&#38500;</span>
<span class="linenr">6: </span>arr.pop(0)       <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;(0 &#30058;&#30446;)&#12434;&#21066;&#38500;</span>
<span class="linenr">7: </span><span style="color: #9acd32;">ax</span> = [1,2]
<span class="linenr">8: </span>arr.extend(ax)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">9: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(arr)
</pre>
</div>

<pre class="example">
9
[2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-4" class="outline-4">
<h4 id="sec-1-5-4"><span class="section-number-4">1.5.4</span> R</h4>
<div class="outline-text-4" id="text-1-5-4">
<p>
R も添え字は 1 からはじまります.<br />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>ar <span style="color: #1e90ff;">&lt;-</span> 2*seq(1:9)
<span class="linenr"> 2: </span>length(ar)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">push</span>
<span class="linenr"> 5: </span>ar <span style="color: #1e90ff;">&lt;-</span> append(ar,1)
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">unshift</span>
<span class="linenr"> 7: </span>ar <span style="color: #1e90ff;">&lt;-</span> append(ar,2,1)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">append(array,value,index)</span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">pop</span>
<span class="linenr"> 9: </span>ar <span style="color: #1e90ff;">&lt;-</span> ar[-length(ar)]
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift</span>
<span class="linenr">11: </span>ar <span style="color: #1e90ff;">&lt;-</span> ar[-1]
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">extend</span>
<span class="linenr">13: </span>ax <span style="color: #1e90ff;">&lt;-</span>c(1,2)
<span class="linenr">14: </span>ar <span style="color: #1e90ff;">&lt;-</span>append(ar,ax,length(ar))
<span class="linenr">15: </span>ar
</pre>
</div>

<pre class="example">
[1] 9
 [1]  2  4  6  8 10 12 14 16 18  1  2
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-5" class="outline-4">
<h4 id="sec-1-5-5"><span class="section-number-4">1.5.5</span> ruby</h4>
<div class="outline-text-4" id="text-1-5-5">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span>arr = [*1..9]
<span class="linenr"> 2: </span>arr = arr.map {|i| i*2}
<span class="linenr"> 3: </span><span style="color: #76ee00;">puts</span> arr.length
<span class="linenr"> 4: </span>arr.push(1)
<span class="linenr"> 5: </span>arr.unshift(2)
<span class="linenr"> 6: </span>arr.pop
<span class="linenr"> 7: </span>arr.shift
<span class="linenr"> 8: </span>ax = [1,2]
<span class="linenr"> 9: </span>arr.concat(ax)
<span class="linenr">10: </span><span style="color: #76ee00;">print</span>(arr)
</pre>
</div>

<pre class="example">
9
[2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-6" class="outline-4">
<h4 id="sec-1-5-6"><span class="section-number-4">1.5.6</span> numpy</h4>
<div class="outline-text-4" id="text-1-5-6">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> numpy <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span class="linenr"> 2: </span><span style="color: #9acd32;">ar</span> = np.array([ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10)])
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(ar))
<span class="linenr"> 4: </span><span style="color: #9acd32;">ar</span> = np.append(ar,1)
<span class="linenr"> 5: </span><span style="color: #9acd32;">ar</span> = np.insert(ar,0,2)
<span class="linenr"> 6: </span><span style="color: #9acd32;">ar</span> = np.delete(ar,-1)
<span class="linenr"> 7: </span><span style="color: #9acd32;">ar</span> = np.delete(ar, 0)
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = [1,2]
<span class="linenr"> 9: </span><span style="color: #9acd32;">ar</span> = np.append(ar,ax)
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(ar)
</pre>
</div>

<pre class="example">
9
[ 2  4  6  8 10 12 14 16 18  1  2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-7" class="outline-4">
<h4 id="sec-1-5-7"><span class="section-number-4">1.5.7</span> まとめ</h4>
<div class="outline-text-4" id="text-1-5-7">
<p>
書き方が似ててややこしいので以下にまとめておく.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />

<col class="left" />

<col class="left" />

<col class="left" />

<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">length</th>
<th scope="col" class="left">push</th>
<th scope="col" class="left">unshift</th>
<th scope="col" class="left">pop</th>
<th scope="col" class="left">shift</th>
<th scope="col" class="left">extend</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">length(a)</td>
<td class="left">push!(a)</td>
<td class="left">unshift!(a)</td>
<td class="left">pop!(a)</td>
<td class="left">shift!(a)</td>
<td class="left">append!(a,x)</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">length(@a)</td>
<td class="left">push(@a,$x)</td>
<td class="left">unshift(@a,$x)</td>
<td class="left">pop(@a)</td>
<td class="left">shift(@a)</td>
<td class="left">push(@a,@x)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">len(a)</td>
<td class="left">a.append(x)</td>
<td class="left">a.insert(0,x)</td>
<td class="left">a.pop()</td>
<td class="left">a.pop(0)</td>
<td class="left">a.extend(x)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">length(a)</td>
<td class="left">append(a,1)</td>
<td class="left">append(a,x,1)</td>
<td class="left">a[-length(a)]</td>
<td class="left">a[-1]</td>
<td class="left">append(a,x,length(a))</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">a.length</td>
<td class="left">a.push(x)</td>
<td class="left">a.unshift(x)</td>
<td class="left">a.pop</td>
<td class="left">a.shift</td>
<td class="left">a.concat(x)</td>
</tr>

<tr>
<td class="left">numpy</td>
<td class="left">len(a)</td>
<td class="left">np.append(a,x)</td>
<td class="left">np.insert(a,0,x)</td>
<td class="left">np.delete(a,-1)</td>
<td class="left">np.delete(a,0)</td>
<td class="left">np.append(a,x)</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">a.length</td>
<td class="left">a.push(x)</td>
<td class="left">a.unshift(x)</td>
<td class="left">a.pop()</td>
<td class="left">a.shift()</td>
<td class="left">a.concat(x)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="section-number-3">1.6</span> 辞書(hash)</h3>
<div class="outline-text-3" id="text-1-6">
</div><div id="outline-container-sec-1-6-1" class="outline-4">
<h4 id="sec-1-6-1"><span class="section-number-4">1.6.1</span> julia</h4>
<div class="outline-text-4" id="text-1-6-1">
<p>
typeof: Dict<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">tuple &#12399;&#23567;&#25991;&#23383;&#12394;&#12398;&#12395; Dict &#12399;&#22823;&#25991;&#23383;. &#12362;&#12412;&#12360;&#12395;&#12367;&#12356;.</span>
<span class="linenr">2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">{} &#12391;&#12399;&#12394;&#12367; () &#12391;&#22258;&#12416;.</span>
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12450;&#12463;&#12475;&#12473;&#12399; hash["key"] &#12391;, &#37197;&#21015;&#12392;&#21516;&#12376;&#12424;&#12358;&#12394;&#26360;&#12365;&#26041;.</span>
<span class="linenr">4: </span>hash = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span> =&gt; <span style="color: #ffa07a;">"Frodo"</span>, <span style="color: #ffa07a;">"age"</span>=&gt;33)
<span class="linenr">5: </span>println(typeof(hash))
<span class="linenr">6: </span>println(<span style="color: #ffa07a;">"hash="</span>,hash)
<span class="linenr">7: </span>println(<span style="color: #ffa07a;">"name="</span>,hash[<span style="color: #ffa07a;">"name"</span>])
<span class="linenr">8: </span>println(<span style="color: #ffa07a;">"age ="</span>,hash[<span style="color: #ffa07a;">"age"</span>])
</pre>
</div>

<pre class="example">
Dict{String,Any}
hash=Dict{String,Any}(Pair{String,Any}("name","Frodo"),Pair{String,Any}("age",33))
name=Frodo
age =33
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-2" class="outline-4">
<h4 id="sec-1-6-2"><span class="section-number-4">1.6.2</span> perl</h4>
<div class="outline-text-4" id="text-1-6-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">Data::Dumper</span>;
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$hash</span>={<span style="color: #ffa07a;">name</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">age</span>=&gt;33};
<span class="linenr"> 5: </span><span style="color: #ff83fa;">print</span> Data::Dumper-&gt;Dump([$hash]);
<span class="linenr"> 6: </span><span style="color: #ff83fa;">print</span> $hash-&gt;{<span style="color: #ffa07a;">'name'</span>}.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">print $hash-&gt;['name']."\n";  # &#12456;&#12521;&#12540;&#12392;&#12394;&#12427;.</span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#12418;&#26360;&#12369;&#12427;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ff0000; background-color: #000080; font-weight: bold; font-style: italic;">%hash</span>=(<span style="color: #ffa07a;">name</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>, <span style="color: #ffa07a;">agen</span>=&gt;33);
<span class="linenr">10: </span><span style="color: #ff83fa;">print</span> <span style="color: #ff0000; background-color: #000080; font-weight: bold; font-style: italic;">$hash</span>{<span style="color: #ffa07a;">name</span>}.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">print </span><span style="color: #ffff00; background-color: #000080; font-weight: bold;">$hash</span><span style="color: #cd853f;">['name']."\n";    # &#12371;&#12435;&#12394;&#12405;&#12358;&#12395;&#12399;&#26360;&#12369;&#12394;&#12356;.</span>
</pre>
</div>

<pre class="example">
$VAR1 = {
          'name' =&gt; 'Frodo',
          'age' =&gt; 33
        };
Frodo
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-3" class="outline-4">
<h4 id="sec-1-6-3"><span class="section-number-4">1.6.3</span> python</h4>
<div class="outline-text-4" id="text-1-6-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #76ee00;">hash</span>={<span style="color: #ffa07a;">'name'</span>:<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">'age'</span>:33}
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">hash</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">hash</span>[<span style="color: #ffa07a;">'name'</span>])
</pre>
</div>

<pre class="example">
{'age': 33, 'name': 'Frodo'}
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-4" class="outline-4">
<h4 id="sec-1-6-4"><span class="section-number-4">1.6.4</span> ruby</h4>
<div class="outline-text-4" id="text-1-6-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span>hash = {<span style="color: #ffa07a;">'name'</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">'age'</span>=&gt;33}
<span class="linenr">2: </span><span style="color: #76ee00;">puts</span> hash
<span class="linenr">3: </span><span style="color: #76ee00;">puts</span> hash[<span style="color: #ffa07a;">'age'</span>]
</pre>
</div>

<pre class="example">
{"name"=&gt;"Frodo", "age"=&gt;33}
33
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-5" class="outline-4">
<h4 id="sec-1-6-5"><span class="section-number-4">1.6.5</span> js</h4>
<div class="outline-text-4" id="text-1-6-5">
<div class="org-src-container">

<pre class="src src-js"><span class="linenr">1: </span>hash = {<span style="color: #ffa07a;">'name'</span>:<span style="color: #ffa07a;">'Frodo'</span>,age:33}
<span class="linenr">2: </span>console.log(hash)
<span class="linenr">3: </span>console.log(hash[<span style="color: #ffa07a;">'name'</span>])
</pre>
</div>

<pre class="example">
{ name: 'Frodo', age: 33 }
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-6" class="outline-4">
<h4 id="sec-1-6-6"><span class="section-number-4">1.6.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-6-6">
<p>
以下に書き方をまとめる.<br />
R はパッケージをインストールしないとダメっぽいので省略.<br />
その代わり JavaScript をいれてみた.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">定義</th>
<th scope="col" class="left">アクセス</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">Dict(key:value)</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">{key=&gt;value}</td>
<td class="left">$hash-&gt;{key}</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">{key:value}</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">{key=&gt;value}</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">{key:value}</td>
<td class="left">hash["key"]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic file I/O</h2>
<div class="outline-text-2" id="text-2">
<p>
ファイル書き込み<br />
標準的な書き方でわかりやすい.<br />
ファイルへの書き込みは print ではなく write<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>f=open(<span style="color: #ffa07a;">"newfile.txt"</span>, <span style="color: #ffa07a;">"w"</span>)
<span class="linenr">2: </span>write(f,<span style="color: #ffa07a;">"testing\n"</span>)
<span class="linenr">3: </span>write(f,<span style="color: #ffa07a;">"more testing\n"</span>)
<span class="linenr">4: </span>close(f)
</pre>
</div>

<p>
ファイル読み込み<br />
readall(f) でファイル中身を読み込み<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>f=open(<span style="color: #ffa07a;">"newfile.txt"</span>,<span style="color: #ffa07a;">"r"</span>)
<span class="linenr">2: </span>x=readall(f)
<span class="linenr">3: </span>print(x)
<span class="linenr">4: </span>close(f)
</pre>
</div>

<pre class="example">
testing
more testing
</pre>

<p>
file 読み書きについてはまた別途.<br />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 繰り返し</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> julia</h3>
<div class="outline-text-3" id="text-3-1">
<p>
for 文は in を使って書く.<br />
python みたいにいちいち ":" を使わなくてよい.<br />
end で終わる ruby みたいな書き方.<br />
終わりがはっきりしててわかりやすいとおもう.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>actions = [<span style="color: #ffa07a;">"surf"</span>,<span style="color: #ffa07a;">"ski"</span>]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span> act <span style="color: #20b2aa; font-weight: bold;">in</span> actions
<span class="linenr">3: </span>    println(<span style="color: #ffa07a;">"Chalie don't $act"</span>)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">5: </span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3
<span class="linenr">7: </span>    println(i)
<span class="linenr">8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
Chalie don't surf
Chalie don't ski
1
2
3
</pre>

<p>
Dictionary(hash) についての繰り返しもできる.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>d = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span>=&gt;<span style="color: #ffa07a;">"Frodo"</span>,<span style="color: #ffa07a;">"age"</span>=&gt;33)
<span class="linenr">2: </span>println(keys(d))
<span class="linenr">3: </span>println(typeof(keys(d)))
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">collect &#12391; Array &#12395;&#12377;&#12427;</span>
<span class="linenr">5: </span>println(collect(keys(d)))
<span class="linenr">6: </span>println(typeof(collect(keys(d))))
</pre>
</div>

<pre class="example">
String["name","age"]
Base.KeyIterator{Dict{String,Any}}
String["name","age"]
Array{String,1}
</pre>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>d = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span>=&gt;<span style="color: #ffa07a;">"hoge"</span>,<span style="color: #ffa07a;">"age"</span>=&gt;32)
<span class="linenr">2: </span>println(keys(d))
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> k <span style="color: #20b2aa; font-weight: bold;">in</span> keys(d)
<span class="linenr">4: </span>    <span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"key=%s value=%s\n"</span>,k,d[k])
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">6: </span>println(collect(keys(d)))
<span class="linenr">7: </span><span style="color: #20b2aa; font-weight: bold;">for</span> k <span style="color: #20b2aa; font-weight: bold;">in</span> collect(keys(d))
<span class="linenr">8: </span>    <span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"key=%s value=%s\n"</span>,k,d[k])
<span class="linenr">9: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
String["name","age"]
key=name value=hoge
key=age value=32
String["name","age"]
key=name value=hoge
key=age value=32
</pre>

<p>
どっちもけっかは一緒のようだ.<br />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>x_values=[1,2,3,4]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span> x <span style="color: #20b2aa; font-weight: bold;">in</span> x_values
<span class="linenr">3: </span>    println(x*x)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">5: </span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:length(x_values)
<span class="linenr">7: </span>    println(x_values[i] * x_values[i])
<span class="linenr">8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
4
9
16
1
4
9
16
</pre>

<p>
二つの配列を同時に回すときは<br />
zip という関数を使えばよいらしいです.<br />
python の zip と同じ感じ.<br />
便利.<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>countries=(<span style="color: #ffa07a;">"Japan"</span>,<span style="color: #ffa07a;">"Korea"</span>,<span style="color: #ffa07a;">"China"</span>)
<span class="linenr">2: </span>cities   =(<span style="color: #ffa07a;">"Tokyo"</span>,<span style="color: #ffa07a;">"Seoul"</span>,<span style="color: #ffa07a;">"Beijing"</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cont,city) <span style="color: #20b2aa; font-weight: bold;">in</span> zip(countries,cities)
<span class="linenr">4: </span>    println(<span style="color: #ffa07a;">"The capital of $cont is $city"</span>)
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
The capital of Japan is Tokyo
The capital of Korea is Seoul
The capital of China is Beijing
</pre>

<p>
python enumerate と同様な感じでも書けるみたい<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>countries=(<span style="color: #ffa07a;">"Japan"</span>,<span style="color: #ffa07a;">"Korea"</span>,<span style="color: #ffa07a;">"China"</span>)
<span class="linenr">2: </span>cities   =(<span style="color: #ffa07a;">"Tokyo"</span>,<span style="color: #ffa07a;">"Seoul"</span>,<span style="color: #ffa07a;">"Beijing"</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (i,cont) <span style="color: #20b2aa; font-weight: bold;">in</span> enumerate(countries)
<span class="linenr">4: </span>    city = cities[i]
<span class="linenr">5: </span>    println(<span style="color: #ffa07a;">"The capital of $cont is $city"</span>)
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
The capital of Japan is Tokyo
The capital of Korea is Seoul
The capital of China is Beijing
</pre>

<p>
以下比較用のるーぷ<br />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9
<span class="linenr">2: </span>    println(i)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> perl</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr">3: </span>
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ar</span>=(1..9);
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ar</span>) {
<span class="linenr">6: </span>  <span style="color: #ff83fa;">print</span> $_.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">7: </span>}
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> python</h3>
<div class="outline-text-3" id="text-3-3">
<p>
range(1,10) と書くと 1 から 9 までな点にちゅういする.<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10):
<span class="linenr">2: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(i)
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> ruby</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1..9
<span class="linenr">2: </span>  <span style="color: #76ee00;">puts</span> i
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> R</h3>
<div class="outline-text-3" id="text-3-5">
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(x <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9) {
<span class="linenr">2: </span>    print(x)
<span class="linenr">3: </span>}
</pre>
</div>

<pre class="example">
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
</pre>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> js</h3>
<div class="outline-text-3" id="text-3-6">
<div class="org-src-container">

<pre class="src src-js"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">ar</span>=[]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">i</span>=1;i&lt;10;i++) {
<span class="linenr">3: </span>  ar.push(i);
<span class="linenr">4: </span>  <span style="color: #cd853f;">// </span><span style="color: #cd853f;">console.log(i)</span>
<span class="linenr">5: </span>}
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">x</span> of ar) {
<span class="linenr">7: </span>  console.log(x);
<span class="linenr">8: </span>}
<span class="linenr">9: </span>console.log(Array.from(<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">Array</span>(9),(val,index)=&gt;index+1));
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
</pre>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> まとめ</h3>
<div class="outline-text-3" id="text-3-7">
<p>
for 文のかきかたまとめ.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />

<col class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">for 文</th>
<th scope="col" class="right">range 1 から 9 まで</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">for x in ar &#x2026; end</td>
<td class="right">1:9</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">for (@ar) {}</td>
<td class="right">(1..9)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">for x in ar:</td>
<td class="right">range(1,10)</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">for x in ar &#x2026; end</td>
<td class="right">1..9</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">for(x in ar) {}</td>
<td class="right">1:9</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">for(x of ar) {}</td>
<td class="right">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> 内包表記</h3>
<div class="outline-text-3" id="text-3-8">
</div><div id="outline-container-sec-3-8-1" class="outline-4">
<h4 id="sec-3-8-1"><span class="section-number-4">3.8.1</span> julia</h4>
<div class="outline-text-4" id="text-3-8-1">
<p>
julia でのリスト内包表記いろいろ<br />
</p>
<div class="org-src-container">

<pre class="src src-julia">dbls = [2i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:4]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2x &#30340;&#12394;&#26360;&#12365;&#26041;&#12434;&#12388;&#12363;&#12387;&#12390;&#12414;&#12377;</span>
println(dbls)

anmls = [<span style="color: #ffa07a;">"dog"</span>,<span style="color: #ffa07a;">"cat"</span>,<span style="color: #ffa07a;">"bird"</span>]
pls   = [a * <span style="color: #ffa07a;">"s"</span> <span style="color: #20b2aa; font-weight: bold;">for</span> a <span style="color: #20b2aa; font-weight: bold;">in</span> anmls]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">* &#12399;&#25991;&#23383;&#21015;&#36899;&#32080;&#12398;&#24847;&#21619;&#12391;&#12354;&#12427;&#12371;&#12392;&#12395;&#27880;&#24847;</span>
println(pls)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20869;&#21253;&#34920;&#35352;&#12391;&#20108;&#27425;&#20803;&#37197;&#21015;&#12418;&#20316;&#12428;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">python &#12391;&#12418;&#20986;&#26469;&#12427;&#12435;&#12384;&#12429;&#12540;&#12363;?</span>
p = [i+j <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3, j <span style="color: #20b2aa; font-weight: bold;">in</span> 4:6]
println(p)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36766;&#26360;(hash) &#12418;&#12371;&#12428;&#12391;&#20316;&#12428;&#12427;</span>
h = [<span style="color: #ffa07a;">"$i"</span> =&gt; i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3]
println(h)
</pre>
</div>

<pre class="example">
[2,4,6,8]
String["dogs","cats","birds"]
[5 6 7; 6 7 8; 7 8 9]
Dict("1"=&gt;1,"2"=&gt;2,"3"=&gt;3)
</pre>
</div>
</div>

<div id="outline-container-sec-3-8-2" class="outline-4">
<h4 id="sec-3-8-2"><span class="section-number-4">3.8.2</span> python</h4>
<div class="outline-text-4" id="text-3-8-2">
<p>
python でのかきかた<br />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #9acd32;">dbls</span>=[ 2*i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,5)]
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dbls)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">anmls</span> = [<span style="color: #ffa07a;">"dog"</span>,<span style="color: #ffa07a;">"cat"</span>,<span style="color: #ffa07a;">"bird"</span>]
<span class="linenr"> 5: </span><span style="color: #9acd32;">pls</span>   = [ a + <span style="color: #ffa07a;">"s"</span> <span style="color: #20b2aa; font-weight: bold;">for</span> a <span style="color: #20b2aa; font-weight: bold;">in</span> anmls]
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(pls)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12399;&#28961;&#29702;&#12387;&#12413;&#12356;</span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">p = [i+j for i in range(1,4), j in range(4,7)]</span>
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12418;&#12381;&#12398;&#12414;&#12414;&#12391;&#12399;&#28961;&#29702;&#12387;&#12413;&#12356;</span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">h = [ i=&gt;i for i in range(1,4)]</span>
</pre>
</div>

<pre class="example">
[2, 4, 6, 8]
['dogs', 'cats', 'birds']
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 比較</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> julia</h3>
<div class="outline-text-3" id="text-4-1">
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span>x=1
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x==2 &#12391;&#12354;&#12427;&#12363;&#12393;&#12358;&#12363;. false</span>
<span class="linenr"> 4: </span>println(x==2)
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#12364; 3 &#12376;&#12419;&#12394;&#12356;&#12363;&#12393;&#12358;&#12363;. true</span>
<span class="linenr"> 7: </span>println(x!=3)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12418;&#26360;&#12369;&#12427;</span>
<span class="linenr">10: </span>println(1&lt;2&lt;3)
<span class="linenr">11: </span>println(1&lt;=2&lt;=3)
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#12391;&#12418;&#12363;&#12356;&#12383;&#12369;&#12393; 1 &#12399;&#33258;&#21205;&#12391; true &#12395;&#22793;&#25563;&#12375;&#12390;&#12367;&#12428;&#12394;&#12356;</span>
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,1))
<span class="linenr">15: </span>    println(<span style="color: #ffa07a;">"convert(Bool,1) is true"</span>)
<span class="linenr">16: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">and &#12392; or</span>
<span class="linenr">19: </span>println(<span style="color: #1e90ff;">true</span> &amp;&amp; <span style="color: #1e90ff;">false</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">false</span>
<span class="linenr">20: </span>println(<span style="color: #1e90ff;">true</span> || <span style="color: #1e90ff;">false</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">true</span>
</pre>
</div>

<pre class="example">
false
true
true
true
convert(Bool,1) is true
false
true
</pre>

<p>
ごく簡単なれいでくらべてみよう.<br />
</p>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> perl</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$x</span>=1;
<span class="linenr"> 4: </span><span style="color: #ff83fa;">print</span>($x==2); <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12392;, &#20309;&#12418;&#26360;&#12365;&#20986;&#12373;&#12428;&#12394;&#12356;(undef &#12387;&#12390;&#12371;&#12392;?).</span>
<span class="linenr"> 5: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr"> 6: </span><span style="color: #ff83fa;">print</span>($x!=3); <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1</span>
<span class="linenr"> 7: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">if</span>($x) {
<span class="linenr"> 9: </span>   <span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"1 is true in perl\n"</span>);
<span class="linenr">10: </span>}
<span class="linenr">11: </span><span style="color: #ff83fa;">print</span>(1 <span style="color: #9370db;">and</span> 0);   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0</span>
<span class="linenr">12: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr">13: </span><span style="color: #ff83fa;">print</span>(1 <span style="color: #9370db;">or</span>  0);   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1</span>
</pre>
</div>

<pre class="example">
1
1 is true in perl
0
1
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> python</h3>
<div class="outline-text-3" id="text-4-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #9acd32;">x</span>=1
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(x==2)
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(x!=3)
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(1&lt;2&lt;3)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(1&lt;=2&lt;=3)
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12399; true</span>
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1):
<span class="linenr"> 8: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"1 is true in python"</span>)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">and or &#12399;&#12381;&#12398;&#12414;&#12414;&#26360;&#12369;&#12400;&#12424;&#12356;.</span>
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #1e90ff;">True</span> <span style="color: #20b2aa; font-weight: bold;">and</span> <span style="color: #1e90ff;">False</span>)
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #1e90ff;">True</span> <span style="color: #20b2aa; font-weight: bold;">or</span>  <span style="color: #1e90ff;">False</span>)
</pre>
</div>

<pre class="example">
False
True
True
True
1 is true in python
False
True
</pre>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> ruby</h3>
<div class="outline-text-3" id="text-4-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span>x=1
<span class="linenr">2: </span><span style="color: #76ee00;">puts</span>(x==2)
<span class="linenr">3: </span><span style="color: #76ee00;">puts</span>(x!=3)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(x)
<span class="linenr">5: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"1 is true in ruby"</span>)
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
false
true
1 is true in ruby
</pre>
</div>
</div>

<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5"><span class="section-number-3">4.5</span> R</h3>
<div class="outline-text-3" id="text-4-5">
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>x <span style="color: #1e90ff;">&lt;-</span> 1
<span class="linenr">2: </span>x==2
<span class="linenr">3: </span>x!=3
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(x) {
<span class="linenr">5: </span>    print(<span style="color: #ffa07a;">"1 is true in R"</span>)
<span class="linenr">6: </span>}
</pre>
</div>

<pre class="example">
[1] FALSE
[1] TRUE
[1] "1 is true in R"
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 関数</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> julia</h3>
<div class="outline-text-3" id="text-5-1">
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">func</span>(a,b)
<span class="linenr"> 2: </span>    <span style="color: #20b2aa; font-weight: bold;">return</span> a*b
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12418;&#38306;&#25968;&#12434;&#23450;&#32681;&#12391;&#12365;&#12427;.</span>
<span class="linenr"> 6: </span><span style="color: #00ff7f;">f</span>(x) = sin(1/x)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">default &#20516;&#12398;&#35373;&#23450;</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">hoge</span>(x,a=1)
<span class="linenr">10: </span>     <span style="color: #20b2aa; font-weight: bold;">return</span> exp(cos(a*x))
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">keyword &#12391;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427;&#24341;&#25968;&#12398;&#25351;&#23450;. ";"</span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">a,b &#12399;&#26222;&#36890;&#12395;&#12450;&#12463;&#12475;&#12473;</span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">max, min &#12399; max=, min= &#12392;&#12375;&#12390;&#12450;&#12463;&#12475;&#12473;</span>
<span class="linenr">16: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">fuga</span>(a,b; max=5,min=2)
<span class="linenr">17: </span>    x = a + b
<span class="linenr">18: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span>(x&gt;max)
<span class="linenr">19: </span>       <span style="color: #20b2aa; font-weight: bold;">return</span> max
<span class="linenr">20: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">21: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span>(x&lt;min)
<span class="linenr">22: </span>       <span style="color: #20b2aa; font-weight: bold;">return</span> min
<span class="linenr">23: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">24: </span>    <span style="color: #20b2aa; font-weight: bold;">return</span> x
<span class="linenr">25: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span>k = func(2,5)
<span class="linenr">28: </span>p = f(1.0)
<span class="linenr">29: </span>q = hoge(pi)
<span class="linenr">30: </span>r = hoge(pi,2)
<span class="linenr">31: </span>c = fuga(2,4)
<span class="linenr">32: </span>d = fuga(2,4,max=10)
<span class="linenr">33: </span>println(k)
<span class="linenr">34: </span>println(p)
<span class="linenr">35: </span>println(q)
<span class="linenr">36: </span>println(r)
<span class="linenr">37: </span>println(c)
<span class="linenr">38: </span>println(d)
</pre>
</div>

<pre class="example">
10
0.8414709848078965
0.36787944117144233
2.718281828459045
5
6
</pre>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> まとめ</h3>
<div class="outline-text-3" id="text-5-2">
<p>
比較表だけかいてみる.<br />
perl だけちょっとちがう感じ. 引数をかっこで渡さない.<br />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="left" />

<col class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">関数定義のやり方</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">function hoge()  end</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">sub hoge { }</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">def hoge()</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">def hoge()    end</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">function hoge() {  }</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
