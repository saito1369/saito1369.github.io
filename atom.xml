<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[easy cure]]></title>
  <link href="http://saito1369.github.io/atom.xml" rel="self"/>
  <link href="http://saito1369.github.io/"/>
  <updated>2025-01-29T16:44:35+09:00</updated>
  <id>http://saito1369.github.io/</id>
  <author>
    <name><![CDATA[saito1369]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[混合二項分布の推定]]></title>
    <link href="http://saito1369.github.io/blog/2022-09-09-Mix_C.html"/>
    <updated>2022-09-09T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/Mix_C</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 二項分布</a></li>
<li><a href="#sec-2">2. 混合二項分布の推定</a>
<ul>
<li><a href="#sec-2-1">2.1. 混合二項分布の式</a></li>
<li><a href="#sec-2-2">2.2. 混合二項分布の例</a></li>
<li><a href="#sec-2-3">2.3. Stan による MCMC 計算</a></li>
<li><a href="#sec-2-4">2.4. Stan 計算結果の表示(1) 結果 summary</a></li>
<li><a href="#sec-2-5">2.5. Stan 計算結果の表示(2) 図示 bayesplot</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-09-09 Fri 18:54&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 12:51&gt;</span></span><br  />
</p>
<p>
混合二項分布の解析を通じて, cmdstanr の簡単な使い方をまとめておく.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 二項分布</h2>
<div class="outline-text-2" id="text-1">
<p>
二項分布: 1回当りの成功確率を \(p\) とし, 試行回数 \(M\), そのうちの成功回数が \(y\) 回である確率 \(P(y)\) は<br  />
$$
  P(y) = {}_M \mathrm{C}_{y} p^{y} (1-p)^{M-y}
  $$<br  />
</p>

<p>
これを以下のように書くことにしよう.<br  />
$$
  y \sim binomial(M,p)
  $$<br  />
</p>

<p>
例: テストの点数分布<br  />
100 点満点のテストの場合 \(M=100\)<br  />
テストの得点を \(y\) とすると<br  />
$$
  y \sim binomial(100,p)
  $$<br  />
</p>

<p>
未知パラメータは \(p\) (0 から 1 まで)<br  />
テストの得点データから \(p\) の値(分布)を求めるのがよくある問題設定.<br  />
</p>

<p>
注: \(p\) は 0 から 1 までなので, 別の変数 \(x\) との関係がみたいときなどは \(p = 1/(1+\exp(-a - b x))\) 的な変換がよくなされる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 混合二項分布の推定</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> 混合二項分布の式</h3>
<div class="outline-text-3" id="text-2-1">
<p>
混合二項分布(あるのか？ ネットで調べても出てこないけど)は,<br  />
２つ以上の二項分布がある割合(\(\alpha\)) で足し合わされたもの.<br  />
</p>

<p>
$$
   y \sim \alpha \times binomial(y|100,p_1) + (1-\alpha) \times binomial(y|100,p_2)
   $$<br  />
</p>

<p>
こんな感じで書ける(はず). \(\alpha\) が混合比と呼ばれるパラメータ<br  />
(混合正規分布(これはネットで調べるとたくさん出てくる)からの類推).<br  />
</p>

<p>
データ \(y\) は \(N\) 個あってそれぞれ独立だから, 同時確率は上の式の掛け算でよい.<br  />
普通は同時確率の対数をとって掛け算 &#x2013;&gt; 足し算にしてから計算する.<br  />
</p>

<p>
この値の最大値をとるパラメータ \(p_1\), \(p_2\) を求めるのが最尤法.<br  />
\(p_1\), \(p_2\) の分布を求めるのがベイズ推定.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 混合二項分布の例</h3>
<div class="outline-text-3" id="text-2-2">
<p>
テストのため, R で混合二項分布に従う乱数を生成してみる.<br  />
\(\alpha = 0.6\), \(p_1 = 0.55\), \(p_2 = 0.82\) とする混合二項分布から \(N=100\) 個の乱数を作成する<br  />
(速度は気にしないのでループを使って書く).<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #87cefa;">mix_bin</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(alpha, N, p1, p2) {
<span class="linenr"> 2: </span>    r <span style="color: #7fffd4;">&lt;-</span> runif(1,0,1)
<span class="linenr"> 3: </span>    <span style="color: #00ffff;">if</span>(r &lt; alpha) {
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>l <span style="color: #7fffd4;">&lt;-</span> 0
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>y <span style="color: #7fffd4;">&lt;-</span> rbinom(1,N,p1)
<span class="linenr"> 6: </span>    }<span style="color: #00ffff;">else</span> {
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>l <span style="color: #7fffd4;">&lt;-</span> 1
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>y <span style="color: #7fffd4;">&lt;-</span> rbinom(1,N,p2)
<span class="linenr"> 9: </span>    }
<span class="linenr">10: </span>    <span style="color: #00ffff;">return</span>(c(y,l))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>N <span style="color: #7fffd4;">&lt;-</span> 100
<span class="linenr">13: </span>alpha <span style="color: #7fffd4;">&lt;-</span> 0.6
<span class="linenr">14: </span>p1 <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">15: </span>p2 <span style="color: #7fffd4;">&lt;-</span> 0.82
<span class="linenr">16: </span>
<span class="linenr">17: </span>Num <span style="color: #7fffd4;">&lt;-</span> 100
<span class="linenr">18: </span>ys <span style="color: #7fffd4;">&lt;-</span> c()
<span class="linenr">19: </span>ls <span style="color: #7fffd4;">&lt;-</span> c()
<span class="linenr">20: </span><span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:Num) {
<span class="linenr">21: </span>    ret <span style="color: #7fffd4;">&lt;-</span> mix_bin(alpha,N,p1,p2)
<span class="linenr">22: </span>    y <span style="color: #7fffd4;">&lt;-</span> ret[1]
<span class="linenr">23: </span>    l <span style="color: #7fffd4;">&lt;-</span> ret[2]
<span class="linenr">24: </span>    ys <span style="color: #7fffd4;">&lt;-</span> c(ys,y)
<span class="linenr">25: </span>    ls <span style="color: #7fffd4;">&lt;-</span> c(ls,l)
<span class="linenr">26: </span>}
<span class="linenr">27: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(ys)</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span>df <span style="color: #7fffd4;">&lt;-</span> data.frame(score=ys, label=ls)
<span class="linenr">30: </span>head(df)
<span class="linenr">31: </span>
<span class="linenr">32: </span>write.table(df,<span style="color: #ffa07a;">'mix_biom_test.csv'</span>,sep=<span style="color: #ffa07a;">','</span>, quote=F,row.names=F,col.names=T)
</pre>
</div>

<pre class="example">
  score label
1    76     1
2    80     1
3    88     1
4    45     0
5    67     0
6    79     1
</pre>

<p>
図示してみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>, header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr">2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">3: </span>
<span class="linenr">4: </span>g <span style="color: #7fffd4;">&lt;-</span> ggplot(data=df,mapping=aes(x=score,y=..density..)) + geom_density(alpha=0.4) + geom_histogram(alpha=0.2,color=<span style="color: #ffa07a;">'black'</span>) + xlim(0,100)
<span class="linenr">5: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test.png'</span>
<span class="linenr">6: </span>ggsave(file=fname, plot=g, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test.png" alt="Mix_C-mix_biom_test.png" /><br  />
</p>
</div>

<p>
このデータを使って, \(\alpha\), \(p_1\), \(p_2\) の値(と分布)を推定したい.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Stan による MCMC 計算</h3>
<div class="outline-text-3" id="text-2-3">
<p>
まずは Stan コードを以下のように書いてみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">vector</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt;[2] <span style="color: #eedd82;">p</span>;
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(<span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]),
<span style="background-color: #222222;">                        </span>  <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]));
  }
}
</pre>
</div>

<p>
注: array の書き方が変わるらしい <a href="https://mc-stan.org/docs/2_28/reference-manual/brackets-array-syntax.html">13.12 Brackets array syntax | Stan Reference Manual</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr">2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr">3: </span>  array[N] <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>;
<span class="linenr">4: </span>}
</pre>
</div>
<p>
こんな感じ？ とりあえず今は旧版の書き方でいく.<br  />
</p>

<p>
暗黙のうちに p[ 1 ] &lt; p[ 2 ] を期待しているが, プログラム上でこの制約を定義できていないので<br  />
値がうまく計算できなくなることがある.<br  />
改良する.<br  />
</p>

<p>
 p の値を ordered にしたいが, ordered は値の範囲を指定できない.<br  />
<a href="https://hoxo-m.hatenablog.com/entry/20150930/p1"> Stan でパラメータに大小関係の制約をつける - ほくそ笑む</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #ff7f24;"># ordered&lt;lower=0,upper=1&gt;[2] p;  # &#12456;&#12521;&#12540;&#12392;&#12394;&#12387;&#12390;&#12375;&#12414;&#12358;&#65281;&#65281;</span>
  <span style="color: #98fb98;">ordered</span>[2] <span style="color: #eedd82;">p_inv</span>;
}

<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0, <span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">p</span>[2];
  p[1] <span style="color: #ffc0cb; font-weight: bold;">&lt;-</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[1]);
  p[2] <span style="color: #ffc0cb; font-weight: bold;">&lt;-</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[2]);
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(<span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]),
<span style="background-color: #222222;">                        </span>  <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]));
  }
}
</pre>
</div>

<p>
ロジスティック関数を使って 0 から 1 の範囲に無理やりする.<br  />
</p>

<p>
ついでに, generated quantities で,  得点 1 - 100 点に対して最初の分布に属する確率を計算するような式を追加する.<br  />
ここをうまく使うと, 知りたいことの分布(乱数列)を直接的に生成できる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">Y</span>[N];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0,<span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">ordered</span>[2] <span style="color: #eedd82;">p_inv</span>;
}

<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0, <span style="color: #00ffff;">upper</span><span style="color: #7fffd4;">=</span>1&gt; <span style="color: #eedd82;">p</span>[2];
  p[1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[1]);
  p[2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">inv_logit</span>(p_inv[2]);

  <span style="color: #98fb98;">vector</span>[2] <span style="color: #eedd82;">lp</span>[N];
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    lp[n,1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[1]);
    lp[n,2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(Y[n] | 100, p[2]);
  }
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:N) {
    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log_sum_exp</span>(lp[n]);
  }
}

<span style="color: #00ffff;">generated quantities</span> {
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#12487;&#12540;&#12479;&#12398;&#20104;&#28204;&#20998;&#24067;&#12434;&#20316;&#12427;&#22580;&#21512;</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">vector[N] pi;</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">for(n in 1:N) {</span>
  <span style="color: #ff7f24;">//  </span><span style="color: #ff7f24;">pi[n] = softmax(lp[n])[1];</span>
  <span style="color: #ff7f24;">//</span><span style="color: #ff7f24;">}</span>
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">1 - 100 &#28857;&#12414;&#12391;&#12434;&#20351;&#12358;&#22580;&#21512;</span>
  <span style="color: #98fb98;">vector</span>[2] <span style="color: #eedd82;">lx</span>[100];
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:100) {
    lx[n,1] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(a)   + <span style="color: #87cefa;">binomial_lpmf</span>(n | 100, p[1]);
    lx[n,2] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log1m</span>(a) + <span style="color: #87cefa;">binomial_lpmf</span>(n | 100, p[2]);
  }
  <span style="color: #98fb98;">vector</span>[100] <span style="color: #eedd82;">px</span>;
  <span style="color: #00ffff;">for</span>(n <span style="color: #00ffff;">in</span> 1:100) {
    px[n] <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">softmax</span>(lx[n])[1];
  }
}
</pre>
</div>

<p>
rstan はもう古いらしいので, cmdstanr を使ってパラメータをベイズ推定する<br  />
<a href="https://www.slideshare.net/simizu706/cmdstanrreducesum">Cmdstanr入門とreduce_sum()解説</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>df <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>, header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr">3: </span>data <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(df), Y=df$score)
<span class="linenr">4: </span>model <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'mix_biom_test.stan'</span>)
<span class="linenr">5: </span>fit <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">6: </span>fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'mix_biom_test'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
Chain 1 Iteration:  300 / 2000 [ 15%]  (Warmup) 
Chain 1 Iteration:  400 / 2000 [ 20%]  (Warmup) 
....
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.7 seconds.
Chain 2 finished in 0.6 seconds.
Chain 3 finished in 0.6 seconds.
Chain 4 finished in 0.6 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.6 seconds.
Total execution time: 0.8 seconds.
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> Stan 計算結果の表示(1) 結果 summary</h3>
<div class="outline-text-3" id="text-2-4">
<p>
結果ファイルの読み込みと基本的な情報の書き出し<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">df &lt;- read.csv('mix_biom_test.csv', header=TRUE)</span>
<span class="linenr"> 2: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">head(df)</span>
<span class="linenr"> 3: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 4: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 8: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 9: </span>fit$summary(c(<span style="color: #ffa07a;">"a"</span>,<span style="color: #ffa07a;">"p"</span>))
<span class="linenr">10: </span>fit$summary(c(<span style="color: #ffa07a;">"px[1]"</span>,<span style="color: #ffa07a;">"px[2]"</span>,<span style="color: #ffa07a;">"px[3]"</span>,<span style="color: #ffa07a;">"px[4]"</span>,<span style="color: #ffa07a;">"px[5]"</span>,<span style="color: #ffa07a;">"px[6]"</span>))
</pre>
</div>

<pre class="example">
# A tibble: 3 × 10
  variable  mean median      sd     mad    q5   q95  rhat ess_bulk ess_tail
  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 a        0.549  0.549 0.0493  0.0505  0.469 0.631 0.999    2972.    2834.
2 p[1]     0.546  0.546 0.00680 0.00676 0.535 0.557 1.00     2517.    2658.
3 p[2]     0.819  0.819 0.00587 0.00597 0.809 0.828 1.00     4432.    3389.
# A tibble: 6 × 10
  variable  mean median    sd   mad    q5   q95  rhat ess_bulk ess_tail
  &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 px[1]        1      1     0     0     1     1    NA       NA       NA
2 px[2]        1      1     0     0     1     1    NA       NA       NA
3 px[3]        1      1     0     0     1     1    NA       NA       NA
4 px[4]        1      1     0     0     1     1    NA       NA       NA
5 px[5]        1      1     0     0     1     1    NA       NA       NA
6 px[6]        1      1     0     0     1     1    NA       NA       NA
</pre>

<p>
rhat &lt; 1.1 なので収束は問題なし.<br  />
\(a = 0.55\) (\(0.47 < a < 0.63\))   # 実際は 0.6 なので微妙かも&#x2026;<br  />
\(p_1 = 0.55\)  これは結構ぴったり<br  />
\(p_2 = 0.82\)  これもぴったりかも.<br  />
</p>

<p>
2.5% - 97.5% の quantile を知りたいときは, 自分で関数を作る必要がある.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#33258;&#20316;&#38306;&#25968;</span>
<span class="linenr">8: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#33258;&#20316;&#38306;&#25968; q95 &#12434;&#21547;&#12416;&#12356;&#12367;&#12388;&#12363;&#12398;&#20195;&#34920;&#20516;&#12434;&#34920;&#31034;&#12373;&#12379;&#12427;</span>
<span class="linenr">9: </span>fit$summary(c(<span style="color: #ffa07a;">"a"</span>,<span style="color: #ffa07a;">"p"</span>), <span style="color: #ffa07a;">'mean'</span>, <span style="color: #ffa07a;">'sd'</span>, <span style="color: #ffa07a;">'median'</span>, q95, <span style="color: #ffa07a;">'rhat'</span>)
</pre>
</div>

<pre class="example">
# A tibble: 3 × 10
  variable  mean      sd median `2.5%` `25%` `50%` `75%` `97.5%`  rhat
  &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
1 a        0.549 0.0493   0.549  0.454 0.514 0.549 0.582   0.645 0.999
2 p[1]     0.546 0.00680  0.546  0.533 0.542 0.546 0.551   0.560 1.00 
3 p[2]     0.819 0.00587  0.819  0.807 0.815 0.819 0.823   0.830 1.00 
</pre>

<p>
RStan の資産を使いたいとき<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(rstan)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 6: </span>rstanfit <span style="color: #7fffd4;">&lt;-</span> rstan::read_stan_csv(files)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rstan &#12398; fit object &#12364;&#20316;&#25104;&#12391;&#12365;&#12383;. &#12371;&#12428;&#12434;&#20351;&#12358;.</span>
<span class="linenr"> 7: </span><span style="color: #7fffd4;">options</span>(width=180)
<span class="linenr"> 8: </span>summary(rstanfit)$summary[c(<span style="color: #ffa07a;">'px[60]'</span>,<span style="color: #ffa07a;">'px[90]'</span>),]
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#26360;&#12365;&#20986;&#12377;&#30906;&#29575;&#12434;&#22793;&#12360;&#12383;&#12356;&#12392;&#12365;</span>
<span class="linenr">10: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">summary(rstanfit, probs=c(0.1,0.5,0.9))$summary[c('px[60]','px[90]'),]</span>
<span class="linenr">11: </span>summary(rstanfit, pars=c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>))$summary
</pre>
</div>

<pre class="example">
               mean      se_mean           sd          10%         50%          90%    n_eff     Rhat
px[60] 9.999951e-01 7.913990e-08 5.046006e-06 9.999890e-01 9.99997e-01 9.999990e-01 4065.411 0.999612
px[90] 3.111517e-12 9.539589e-14 4.091990e-12 4.786479e-13 1.83679e-12 6.993533e-12 1839.966 1.001073
          mean      se_mean          sd      2.5%       25%      50%       75%     97.5%    n_eff      Rhat
a    0.5490803 8.938196e-04 0.049338188 0.4536839 0.5143332 0.548623 0.5823223 0.6453881 3046.959 0.9991678
p[1] 0.5463507 1.357109e-04 0.006801235 0.5326670 0.5417878 0.546397 0.5508498 0.5596871 2511.574 1.0010315
p[2] 0.8186793 8.864559e-05 0.005869632 0.8069147 0.8146545 0.818802 0.8226557 0.8300441 4384.372 0.9994753
</pre>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> Stan 計算結果の表示(2) 図示 bayesplot</h3>
<div class="outline-text-3" id="text-2-5">
<p>
パラメータの分布<br  />
fit$draws で MCMC データを extract する.<br  />
mcmc_dens<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">p &lt;- bayesplot::mcmc_hist(fit$draws(c('a','p')))  # &#12498;&#12473;&#12488;&#12464;&#12521;&#12512;&#12434;&#25551;&#12367;&#22580;&#21512;</span>
<span class="linenr">10: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_dens.png'</span>
<span class="linenr">11: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_dens.png" alt="Mix_C-mix_biom_test_dens.png" /><br  />
</p>
</div>

<p>
chain ごとの density<br  />
mcmc_dens_overlay<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens_overlay(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_dens_overlay.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_dens_overlay.png" alt="Mix_C-mix_biom_test_dens_overlay.png" /><br  />
</p>
</div>

<p>
ヒストグラム(対角線上)及びパラメータ間の相関<br  />
mcmc_pairs<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_pairs(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_pairs.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_pairs.png" alt="Mix_C-mix_biom_test_pairs.png" /><br  />
</p>
</div>

<p>
一応 traceplot も見ておく<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_trace(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'p'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_trace.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_trace.png" alt="Mix_C-mix_biom_test_trace.png" /><br  />
</p>
</div>

<p>
データと推定結果の重ね合わせ.<br  />
\(\alpha = 0.55\) とする.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(<span style="color: #ffa07a;">'mix_biom_test.csv'</span>,header=<span style="color: #98fb98;">TRUE</span>)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=d,mapping=aes(x=score,y=..density..))
<span class="linenr"> 5: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_histogram(fill=<span style="color: #ffa07a;">'white'</span>,color=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr"> 6: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_density(fill=<span style="color: #ffa07a;">'black'</span>,alpha=0.3)
<span class="linenr"> 7: </span>p <span style="color: #7fffd4;">&lt;-</span> p + xlim(0,100)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span>x <span style="color: #7fffd4;">&lt;-</span> seq(0,100, by=1)
<span class="linenr">10: </span>alpha <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">11: </span>p1 <span style="color: #7fffd4;">&lt;-</span> 0.55
<span class="linenr">12: </span>y1 <span style="color: #7fffd4;">&lt;-</span> alpha * dbinom(x, 100, p1)
<span class="linenr">13: </span>dy1 <span style="color: #7fffd4;">&lt;-</span> data.frame(x=x,y1=y1)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=dy1,mapping=aes(x=x,y=y1),colour=<span style="color: #ffa07a;">'green'</span>,size=2, linetype=<span style="color: #ffa07a;">'dashed'</span>)
<span class="linenr">15: </span>
<span class="linenr">16: </span>p2 <span style="color: #7fffd4;">&lt;-</span> 0.82
<span class="linenr">17: </span>y2 <span style="color: #7fffd4;">&lt;-</span> (1 - alpha) * dbinom(x, 100, p2)
<span class="linenr">18: </span>dy2 <span style="color: #7fffd4;">&lt;-</span> data.frame(x=x,y2=y2)
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=dy2,mapping=aes(x=x,y=y2),colour=<span style="color: #ffa07a;">'blue'</span>,size=2, linetype=<span style="color: #ffa07a;">'dashed'</span>)
<span class="linenr">20: </span>
<span class="linenr">21: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_binom_test_hist.png'</span>
<span class="linenr">22: </span>ggsave(plot=p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_binom_test_hist.png" alt="Mix_C-mix_binom_test_hist.png" /><br  />
</p>
</div>

<p>
score(1 〜 100) が黄緑のクラスタに入っている確率を図示する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'mix_biom_test-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'mix_biom_test-4.csv'</span>)
<span class="linenr"> 6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 7: </span>mat <span style="color: #7fffd4;">&lt;-</span> fit$summary(c(<span style="color: #ffa07a;">"px"</span>), <span style="color: #ffa07a;">"median"</span>,<span style="color: #ffa07a;">"rhat"</span>)
<span class="linenr"> 8: </span>mat$score <span style="color: #7fffd4;">&lt;-</span> 1:100
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=mat) + geom_point(mapping=aes(x=score, y=median)) + xlim(0,100)
<span class="linenr">12: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'mix_biom_test_pred.png'</span>
<span class="linenr">13: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Mix_C-mix_biom_test_pred.png" alt="Mix_C-mix_biom_test_pred.png" /><br  />
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stan と R でベイズ統計モデリング 第四章]]></title>
    <link href="http://saito1369.github.io/blog/2022-03-18-Stan04.html"/>
    <updated>2022-03-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/Stan04</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Stan の基本的文法</a>
<ul>
<li><a href="#sec-1-1">1.1. ブロック構成</a></li>
<li><a href="#sec-1-2">1.2. コーディング規約</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Stan の lp__ と target</a></li>
<li><a href="#sec-3">3. 単回帰</a>
<ul>
<li><a href="#sec-3-1">3.1. データの図示</a></li>
<li><a href="#sec-3-2">3.2. 単回帰(lm)</a></li>
<li><a href="#sec-3-3">3.3. Stan で実装 (1) cmdstanr</a></li>
<li><a href="#sec-3-4">3.4. Stan 結果解析</a></li>
<li><a href="#sec-3-5">3.5. ベイズ信頼区間</a></li>
<li><a href="#sec-3-6">3.6. ベイズ予測区間</a></li>
<li><a href="#sec-3-7">3.7. transformed parametes 及び generated quantities ブロック</a></li>
<li><a href="#sec-3-8">3.8. Stan で実装(2) cmdstanpy</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-03-18 Fri 17:42&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 12:57&gt;</span></span><br  />
</p>
<p>
<a href="https://amzn.to/3eLjQip">Stan と R でベイズ統計モデリング</a> (第四章)の学習記録<br  />
</p>

<p>
この本は素晴らしい. めちゃんこ賢い人が書いた本って感じがする.<br  />
疑問に思いそうなところをちゃんと先回りしてわかりやすく解説してくれているし,<br  />
書き方に統一感があって, 読み進めていくうちに自然に身につくような構成となっている.<br  />
</p>

<p>
この本では RStan を使った解説が行われているが,<br  />
これからは cmdstanr/cmdstanpy らしい( <a href="https://www.slideshare.net/simizu706/cmdstanrreducesum">Cmdstanr入門とreduce_sum()解説</a> ) のでこれらを用いて書き直してみる.<br  />
</p>


<p>
<!-- more --><br  />
</p>

<p>
基礎となる単回帰の説明がある第四章を見てみる.<br  />
自分用メモ.<br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Stan の基本的文法</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> ブロック構成</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Stan の最も簡単なプログラム例.<br  />
データ Y は正規分布する.<br  />
求めたいパラメータは平均値 mu. の場合.<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr"> 1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr"> 2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr"> 3: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
<span class="linenr"> 4: </span>}
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #00ffff;">parameters</span> {
<span class="linenr"> 7: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">mu</span>;
<span class="linenr"> 8: </span>}
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">11: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">12: </span>    Y[N] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(mu,1)
<span class="linenr">13: </span>  }
<span class="linenr">14: </span>  mu <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(0,100);
<span class="linenr">15: </span>}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> コーディング規約</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>インデント<br  />
</li>
<li>データ変数は大文字から, パラメータは小文字から始める.<br  />
</li>
<li>ブロックの間は1行あける.<br  />
</li>
<li>変数名は snake_case にする.<br  />
</li>
<li>~ 及び = の前後はスペースあける.<br  />
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Stan の lp__ と target</h2>
<div class="outline-text-2" id="text-2">
<p>
事後確率は以下のように計算できる.<br  />
$$
  p(\theta|Y) \propto p(Y|\theta) p(\theta)
  $$<br  />
</p>

<p>
対数事後確率は<br  />
$$
  \log p(\theta|Y) \propto \log p(Y|\theta) + \log p(\theta)
  $$<br  />
</p>

<p>
Stan の結果データの中に出てくる lp__ (log posterior) は, 各 MCMC step でパラメータ \(\theta\) に何か具体的な値 \(\theta^{\star}\) を入れたときの \(\log p(\theta^{\star}|Y)\) の値.<br  />
</p>

<p>
$$
  lp\_\_ = \log p(\theta^{\star}|Y)  \propto \log p(Y|\theta^{\star}) + \log p(\theta^{\star})
  $$<br  />
</p>

<p>
データが \(N\) 個あれば以下のようになる. もちろん \(Y_i\) には何らかの具体的な数値が入っている.<br  />
</p>

<p>
$$
  lp\_\_ = \log p(\theta^{\star}|Y)  \propto \sum_{i=1}^{N} \log p(Y_i|\theta^{\star}) + \log p(\theta^{\star})
  $$<br  />
</p>

<p>
Stan の model ブロックでの \(Y \sim dist(\theta)\) という書き方は,<br  />
内部的には以下のように計算されている.<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #ffc0cb; font-weight: bold;">lp__</span> <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">log</span>(p(theta));   <span style="color: #ff7f24;"># &#20107;&#21069;&#20998;&#24067;(&#12398; log)</span>
<span class="linenr">2: </span><span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>  <span style="color: #ffc0cb; font-weight: bold;">lp__</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">log</span>(p(Y[i]|theta));  <span style="color: #ff7f24;"># &#12487;&#12540;&#12479;&#12399;&#29420;&#31435;&#12394;&#12398;&#12391;&#30906;&#29575;&#12434;&#25499;&#12369;&#31639;(log &#12394;&#12398;&#12391;&#36275;&#12375;&#31639;&#12395;&#12394;&#12427;)</span>
<span class="linenr">4: </span>}
</pre>
</div>

<p>
target は lp__ の別名である.<br  />
Stan では, target に \(\log p(Y|\theta)\) を足し込んでいく上のような書き方が出来るようになっている.<br  />
特に複雑な尤度計算を行う際にはこっちの書き方をする場合がある.<br  />
</p>

<p>
普通の書き方<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">2: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(mu,1);
<span class="linenr">4: </span>  }
<span class="linenr">5: </span>  mu <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(0,100);
<span class="linenr">6: </span>}
</pre>
</div>

<p>
を target に足し込む形式で書くと以下のようになる.<br  />
normal_ldf(Y[i]|mu, sigma)  は \(\log normal(Y[i]|\mu, sigma)\) を表す便利な関数.<br  />
(ldf は log probability density function. log 確率密度関数)<br  />
</p>

<div class="org-src-container">

<pre class="src src-stan"><span class="linenr">1: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">2: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">3: </span>    <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">normal_lpdf</span>(Y[i]|mu,1);
<span class="linenr">4: </span>  }
<span class="linenr">5: </span>  <span style="color: #00ffff;">target</span> <span style="color: #7fffd4;">+=</span> <span style="color: #87cefa;">normal_lpdf</span>(mu|0,100);
<span class="linenr">6: </span>}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 単回帰</h2>
<div class="outline-text-2" id="text-3">
<p>
これが全ての基礎. よくわかんなくなったらここに戻ってくること.<br  />
単回帰の例で Stan 及び cmdstanr/cmdstanpy の典型的な使い方を見てみる.<br  />
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> データの図示</h3>
<div class="outline-text-3" id="text-3-1">
<p>
データファイル: data-salary.txt (X 列, Y 列がある. X 列の値から Y の値をよそくしたい！！)<br  />
ggplot2 で図を描いてみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">3: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot(data=d) + geom_point(mapping=aes(x=X,y=Y),shape=1, size=3)
<span class="linenr">4: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'04_01_fig.png'</span>
<span class="linenr">5: </span>ggsave(file=fname, plot=p, dpi=50)   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">dpi &#12391;&#22259;&#12398;&#22823;&#12365;&#12373;(&#35299;&#20687;&#24230;)&#12434;&#25351;&#23450;</span>
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-04_01_fig.png" alt="Stan04-04_01_fig.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> 単回帰(lm)</h3>
<div class="outline-text-3" id="text-3-2">
<p>
lm 関数を使って単回帰を行う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr">3: </span>summary(res)
</pre>
</div>

<pre class="example">
Call:
lm(formula = Y ~ X, data = d)

Residuals:
     Min       1Q   Median       3Q      Max 
-155.471  -51.523   -6.663   52.822  141.349 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept) -119.697     68.148  -1.756    0.096 .  
X             21.904      1.518  14.428 2.47e-11 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 79.1 on 18 degrees of freedom
Multiple R-squared:  0.9204,	Adjusted R-squared:  0.916 
F-statistic: 208.2 on 1 and 18 DF,  p-value: 2.466e-11
</pre>

<p>
信頼区間<br  />
coord_cartesian(xlim=Xの範囲, ylim=Yの範囲)<br  />
scale_y_continuous() で Y の補助目盛りの設定など<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr"> 2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>X_new <span style="color: #7fffd4;">&lt;-</span> data.frame(X=23:60)
<span class="linenr"> 5: </span>conf_95 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'confidence'</span>, level=0.95)
<span class="linenr"> 6: </span>conf_50 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'confidence'</span>, level=0.50)
<span class="linenr"> 7: </span>conf_95 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,conf_95)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517; = (X,fit,lwr,upr)</span>
<span class="linenr"> 8: </span>conf_50 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,conf_50)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">12: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf_95, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=1/6)
<span class="linenr">13: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf_50, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=3/6)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=conf_50,aes(x=X,y=fit),size=1) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">15: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point(data=d, aes(x=X, y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">16: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">17: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">18: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-3-left.png'</span>
<span class="linenr">19: </span>ggsave(file=fname, plot=p, dpi=50)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-3-left.png" alt="Stan04-fig4-3-left.png" /><br  />
</p>
</div>

<p>
予測区間を描く.<br  />
confidence &#x2013;&gt; prediction にする.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr"> 2: </span>res <span style="color: #7fffd4;">&lt;-</span> lm(Y ~ X, data=d)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>X_new <span style="color: #7fffd4;">&lt;-</span> data.frame(X=23:60)
<span class="linenr"> 5: </span>pred_95 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'prediction'</span>, level=0.95)
<span class="linenr"> 6: </span>pred_50 <span style="color: #7fffd4;">&lt;-</span> predict(res, X_new, interval=<span style="color: #ffa07a;">'prediction'</span>, level=0.50)
<span class="linenr"> 7: </span>pred_95 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,pred_95)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517; = (X,fit,lwr,upr)</span>
<span class="linenr"> 8: </span>pred_50 <span style="color: #7fffd4;">&lt;-</span> data.frame(X_new,pred_50)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr">11: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">12: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=pred_95, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=1/6)
<span class="linenr">13: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=pred_50, mapping=aes(x=X,ymin=lwr,ymax=upr), alpha=3/6)
<span class="linenr">14: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=pred_50,aes(x=X,y=fit),size=1) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">15: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point(data=d, aes(x=X, y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">16: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">17: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">18: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-3-right.png'</span>
<span class="linenr">19: </span>ggsave(file=fname, plot=p, dpi=50)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-3-right.png" alt="Stan04-fig4-3-right.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Stan で実装 (1) cmdstanr</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-stan"><span class="linenr"> 1: </span><span style="color: #00ffff;">data</span> {
<span class="linenr"> 2: </span>  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
<span class="linenr"> 3: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X</span>[N];
<span class="linenr"> 4: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
<span class="linenr"> 5: </span>}
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #00ffff;">parameters</span> {
<span class="linenr"> 8: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">a</span>;
<span class="linenr"> 9: </span>  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">b</span>;
<span class="linenr">10: </span>  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0&gt; <span style="color: #eedd82;">sigma</span>;
<span class="linenr">11: </span>}
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #00ffff;">model</span> {
<span class="linenr">14: </span>  <span style="color: #00ffff;">for</span>(i <span style="color: #00ffff;">in</span> 1:N) {
<span class="linenr">15: </span>    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(a + b*X[i], sigma);
<span class="linenr">16: </span>  }
<span class="linenr">17: </span>}
</pre>
</div>

<p>
これをキックする R コードを書く.<br  />
本にある RStan ではなく comdstanr で書いてみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">3: </span>data <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(d), X=d$X, Y=d$Y)
<span class="linenr">4: </span>model  <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'model4-5.stan'</span>)
<span class="linenr">5: </span>fit <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">6: </span>fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'model4-5'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
...
Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling) 
Chain 1 Iteration: 1100 / 2000 [ 55%]  (Sampling) 
Chain 1 Iteration: 1200 / 2000 [ 60%]  (Sampling) 
Chain 1 Iteration: 1300 / 2000 [ 65%]  (Sampling) 
Chain 1 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 1 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 1 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 1 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 1 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling) 
.....
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.1 seconds.
Chain 2 finished in 0.1 seconds.
Chain 3 finished in 0.1 seconds.
Chain 4 finished in 0.1 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.1 seconds.
Total execution time: 0.3 seconds.
</pre>

<p>
csv ファイルからの読み込み<br  />
結果を見てみる.<br  />
<a href="https://mc-stan.org/cmdstanr/reference/read_cmdstan_csv.html">Read CmdStan CSV files into R — read_cmdstan_csv • cmdstanr</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>fit$summary()
</pre>
</div>

<pre class="example">
# A tibble: 4 × 10
  variable   mean median    sd   mad     q5    q95  rhat ess_bulk ess_tail
  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 lp__      -93.6  -93.3  1.26  1.04  -96.1 -92.2   1.01    1304.    1691.
2 a        -117.  -119.  71.3  68.7  -236.    2.08  1.00    1377.    1556.
3 b          21.9   21.9  1.60  1.54   19.2  24.5   1.00    1349.    1501.
4 sigma      84.5   82.4 15.2  14.3    63.8 112.    1.01    1615.    1361.
</pre>


<p>
lm では a = -119.7, b = 21.9 と推定されていたのでほぼ同じ結果が出たと言って良いだろう.<br  />
</p>

<p>
RStan の形式で見るには以下のようにする.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(rstan)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>rstanfit <span style="color: #7fffd4;">&lt;-</span> rstan::read_stan_csv(files)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">rstan &#12398; fit object &#12364;&#20316;&#25104;&#12391;&#12365;&#12383;. &#12371;&#12428;&#12434;&#20351;&#12358;.</span>
<span class="linenr">7: </span><span style="color: #7fffd4;">options</span>(width=180)
<span class="linenr">8: </span>summary(rstanfit)$summary
</pre>
</div>

<pre class="example">
            mean    se_mean        sd       2.5%        25%        50%       75%     97.5%    n_eff     Rhat
a     -117.45496 1.93495619 71.307379 -257.65965 -164.64975 -119.17350 -71.97750  23.16816 1358.084 1.000974
b       21.85965 0.04379069  1.597700   18.67989   20.82737   21.88625  22.90630  24.97104 1331.149 1.001300
sigma   84.50608 0.40945078 15.213551   61.08729   73.71800   82.41410  93.17735 120.02752 1380.568 1.005035
lp__   -93.60737 0.03683109  1.256416  -96.86346  -94.18972  -93.27450 -92.69150 -92.13598 1163.691 1.007309
</pre>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Stan 結果解析</h3>
<div class="outline-text-3" id="text-3-4">
<p>
MCMC データの extract は fit$draws<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'matrix'</span>)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">chain &#12434;&#19968;&#12388;&#12395;&#12414;&#12392;&#12417;&#12427;</span>
<span class="linenr">8: </span>dim(ms)
<span class="linenr">9: </span>head(ms)
</pre>
</div>

<pre class="example">
[1] 4000    4
# A draws_matrix: 6 iterations, 1 chains, and 4 variables
    variable
draw lp__      a  b sigma
   1  -93  -94.6 21    72
   2  -93  -79.0 21    87
   3  -94  -34.5 21    95
   4  -93  -50.5 20    96
   5  -94    6.4 19    90
   6  -92 -133.7 22    81
</pre>

<p>
パラメータの分布を図示<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_dens.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens.png" alt="Stan04-model4-5_param_dens.png" /><br  />
</p>
</div>

<p>
ヒストグラムで描くと<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_hist(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_hist.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_hist.png" alt="Stan04-model4-5_param_hist.png" /><br  />
</p>
</div>

<p>
trace plot<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_trace(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_trace.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_trace.png" alt="Stan04-model4-5_param_trace.png" /><br  />
</p>
</div>

<p>
mcmc_dens_overlay<br  />
chain ごとに描く.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_dens_overlay(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>,<span style="color: #ffa07a;">'sigma'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_dens_overlay.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens_overlay.png" alt="Stan04-model4-5_param_dens_overlay.png" /><br  />
</p>
</div>

<p>
mcmc_pairs<br  />
パラメータ間の関係をみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>p <span style="color: #7fffd4;">&lt;-</span> bayesplot::mcmc_pairs(fit$draws(c(<span style="color: #ffa07a;">'a'</span>,<span style="color: #ffa07a;">'b'</span>)))
<span class="linenr"> 9: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'model4-5_param_pairs.png'</span>
<span class="linenr">10: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_pairs.png" alt="Stan04-model4-5_param_pairs.png" /><br  />
</p>
</div>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 7: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 8: </span>head(ms)
<span class="linenr"> 9: </span>head(ms$a)
<span class="linenr">10: </span>length(ms$a)
<span class="linenr">11: </span>quantile(ms$b, probs=c(0.025,0.975))
</pre>
</div>

<pre class="example">
# A draws_df: 6 iterations, 1 chains, and 4 variables
  lp__      a  b sigma
1  -93  -94.6 21    72
2  -93  -79.0 21    87
3  -94  -34.5 21    95
4  -93  -50.5 20    96
5  -94    6.4 19    90
6  -92 -133.7 22    81
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
[1]  -94.58260  -79.03710  -34.45430  -50.53660    6.44861 -133.72600
[1] 4000
    2.5%    97.5% 
18.67989 24.97104
</pre>

<p>
mcmc_pairs に似た図を ggplot を用いて描いてみる<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>df_mcmc <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#25955;&#24067;&#22259;</span>
<span class="linenr">10: </span>p_xy <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc,aes(x=a,y=b)) +
<span class="linenr">11: </span>    geom_point(alpha=1/4,size=2,shape=1) +
<span class="linenr">12: </span>    scale_x_continuous(breaks=seq(-400,200,200), limits=c(-420,210)) +
<span class="linenr">13: </span>    scale_y_continuous(breaks=seq(15,25,5),limits=c(14.5,29))
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">a &#12398;&#20998;&#24067;&#22259;</span>
<span class="linenr">16: </span>p_x <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc,aes(x=a)) + theme_bw(base_size=18) + theme(legend.position=<span style="color: #ffa07a;">'none'</span>) +
<span class="linenr">17: </span>    geom_histogram(aes(y=..density..),color=<span style="color: #ffa07a;">'black'</span>,fill=<span style="color: #ffa07a;">'white'</span>) +
<span class="linenr">18: </span>    geom_density(alpha=0.3,fill=<span style="color: #ffa07a;">'gray20'</span>) +
<span class="linenr">19: </span>    scale_x_continuous(breaks=seq(-400,200,200),limits=c(-420,210))+
<span class="linenr">20: </span>    labs(x=<span style="color: #ffa07a;">''</span>,y=<span style="color: #ffa07a;">''</span>)
<span class="linenr">21: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">b &#12398;&#20998;&#24067;&#22259;</span>
<span class="linenr">22: </span>p_y <span style="color: #7fffd4;">&lt;-</span> ggplot(df_mcmc, aes(x=b)) + theme_bw(base_size=18) + theme(legend.position=<span style="color: #ffa07a;">'none'</span>) +
<span class="linenr">23: </span>    coord_flip() +
<span class="linenr">24: </span>    geom_histogram(aes(y=..density..), colour=<span style="color: #ffa07a;">'black'</span>, fill=<span style="color: #ffa07a;">'white'</span>) +
<span class="linenr">25: </span>    geom_density(alpha=0.3, fill=<span style="color: #ffa07a;">'gray20'</span>) +
<span class="linenr">26: </span>    scale_x_continuous(breaks=seq(15, 25, 5), limits=c(14.5, 29)) +
<span class="linenr">27: </span>    labs(x=<span style="color: #ffa07a;">''</span>, y=<span style="color: #ffa07a;">''</span>)
<span class="linenr">28: </span>
<span class="linenr">29: </span>p_emp <span style="color: #7fffd4;">&lt;-</span> ggplot(data.frame(0,0)) + theme(rect=element_rect(fill=<span style="color: #ffa07a;">'white'</span>), panel.border=element_blank())
<span class="linenr">30: </span>
<span class="linenr">31: </span>g_xy  <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_xy)
<span class="linenr">32: </span>g_x   <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_x)
<span class="linenr">33: </span>g_y   <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_y)
<span class="linenr">34: </span>g_emp <span style="color: #7fffd4;">&lt;-</span> ggplotGrob(p_emp)
<span class="linenr">35: </span>
<span class="linenr">36: </span>g1 <span style="color: #7fffd4;">&lt;-</span> cbind(g_x,  g_emp, size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">37: </span>g2 <span style="color: #7fffd4;">&lt;-</span> cbind(g_xy, g_y,   size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">38: </span>g  <span style="color: #7fffd4;">&lt;-</span> rbind(g1,   g2,    size=<span style="color: #ffa07a;">'first'</span>)
<span class="linenr">39: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-7.png'</span>
<span class="linenr">40: </span>ggsave(file=fname, plot=g, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-7.png" alt="Stan04-fig4-7.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> ベイズ信頼区間</h3>
<div class="outline-text-3" id="text-3-5">
<p>
ベイズ信頼区間(R の中での計算の例)<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">11: </span>N_X <span style="color: #7fffd4;">&lt;-</span> length(X_new)
<span class="linenr">12: </span>N_mcmc <span style="color: #7fffd4;">&lt;-</span> length(ms$lp__)
<span class="linenr">13: </span>
<span class="linenr">14: </span>set.seed(1234)
<span class="linenr">15: </span>y_base_mcmc <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">16: </span>y_mcmc      <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">i &#21015;&#30446;&#12398;&#12487;&#12540;&#12479;&#12434;&#20316;&#12427;</span>
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_X) {
<span class="linenr">20: </span>    y_base_mcmc[,i] <span style="color: #7fffd4;">&lt;-</span> ms$a + ms$b * X_new[i]
<span class="linenr">21: </span>    y_mcmc[,i]      <span style="color: #7fffd4;">&lt;-</span> rnorm(n=N_mcmc,mean=y_base_mcmc[,i],sd=ms$sigma)
<span class="linenr">22: </span>}
<span class="linenr">23: </span>conf <span style="color: #7fffd4;">&lt;-</span> data.frame(X=X_new,t(apply(y_base_mcmc,2,quantile,probs=c(0.025,0.25,0.50,0.75,0.975))))
<span class="linenr">24: </span>colnames(conf) <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'X'</span>,<span style="color: #ffa07a;">'p025'</span>,<span style="color: #ffa07a;">'p250'</span>,<span style="color: #ffa07a;">'p500'</span>,<span style="color: #ffa07a;">'p750'</span>,<span style="color: #ffa07a;">'p975'</span>)
<span class="linenr">25: </span>
<span class="linenr">26: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">27: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">28: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p025,ymax=p975),alpha=1/6)
<span class="linenr">29: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p250,ymax=p750),alpha=2/6)
<span class="linenr">30: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(  data=conf,aes(x=X,y=p500),size=0.2) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">31: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point( data=d,   aes(x=X,y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">32: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">33: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">34: </span>
<span class="linenr">35: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-left.png'</span>
<span class="linenr">36: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left.png" alt="Stan04-fig4-8-left.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> ベイズ予測区間</h3>
<div class="outline-text-3" id="text-3-6">
<p>
ベイズ予測区間(R の中での計算の例)<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-5-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-5-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>ms <span style="color: #7fffd4;">&lt;-</span> fit$draws(format=<span style="color: #ffa07a;">'df'</span>)
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">11: </span>N_X <span style="color: #7fffd4;">&lt;-</span> length(X_new)
<span class="linenr">12: </span>N_mcmc <span style="color: #7fffd4;">&lt;-</span> length(ms$lp__)
<span class="linenr">13: </span>
<span class="linenr">14: </span>set.seed(1234)
<span class="linenr">15: </span>y_base_mcmc <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">16: </span>y_mcmc      <span style="color: #7fffd4;">&lt;-</span> as.data.frame(matrix(nrow=N_mcmc,ncol=N_X))
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">i &#21015;&#30446;&#12398;&#12487;&#12540;&#12479;&#12434;&#20316;&#12427;</span>
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_X) {
<span class="linenr">20: </span>    y_base_mcmc[,i] <span style="color: #7fffd4;">&lt;-</span> ms$a + ms$b * X_new[i]
<span class="linenr">21: </span>    y_mcmc[,i]      <span style="color: #7fffd4;">&lt;-</span> rnorm(n=N_mcmc,mean=y_base_mcmc[,i],sd=ms$sigma)
<span class="linenr">22: </span>}
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">y_base_mcmc --&gt; y_mcmc &#12395;&#22793;&#26356;&#12375;&#12383;&#12384;&#12369;</span>
<span class="linenr">25: </span>conf <span style="color: #7fffd4;">&lt;-</span> data.frame(X=X_new,t(apply(y_mcmc,2,quantile,probs=c(0.025,0.25,0.50,0.75,0.975))))
<span class="linenr">26: </span>colnames(conf) <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'X'</span>,<span style="color: #ffa07a;">'p025'</span>,<span style="color: #ffa07a;">'p250'</span>,<span style="color: #ffa07a;">'p500'</span>,<span style="color: #ffa07a;">'p750'</span>,<span style="color: #ffa07a;">'p975'</span>)
<span class="linenr">27: </span>
<span class="linenr">28: </span>d <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data-salary.txt'</span>)
<span class="linenr">29: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot()
<span class="linenr">30: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p025,ymax=p975),alpha=1/6)
<span class="linenr">31: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=conf,aes(x=X,ymin=p250,ymax=p750),alpha=2/6)
<span class="linenr">32: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(  data=conf,aes(x=X,y=p500),size=0.2) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#32218;</span>
<span class="linenr">33: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_point( data=d,   aes(x=X,y=Y), shape=1, size=3) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12414;&#12427;</span>
<span class="linenr">34: </span>p <span style="color: #7fffd4;">&lt;-</span> p + labs(x=<span style="color: #ffa07a;">'X'</span>, y=<span style="color: #ffa07a;">'Y'</span>) + coord_cartesian(xlim=c(22, 61), ylim=c(200, 1400))
<span class="linenr">35: </span>p <span style="color: #7fffd4;">&lt;-</span> p + scale_y_continuous(breaks=seq(from=200, to=1400, by=400))
<span class="linenr">36: </span>
<span class="linenr">37: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-right.png'</span>
<span class="linenr">38: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right.png" alt="Stan04-fig4-8-right.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> transformed parametes 及び generated quantities ブロック</h3>
<div class="outline-text-3" id="text-3-7">
<p>
処理は出来るだけ Stan 側でやらせたい.<br  />
R では出てきたデータの解析と図示に使う.<br  />
</p>

<p>
ベイズ信頼区間, 予測区間など, サンプルから派生する乱数計算部分を Stan に任せる.<br  />
(model4-4.stan)<br  />
</p>
<div class="org-src-container">

<pre class="src src-stan"><span style="color: #00ffff;">data</span> {
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X</span>[N];
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">Y</span>[N];
  <span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#36861;&#21152;&#37096;&#20998;</span>
  <span style="color: #98fb98;">int</span> <span style="color: #eedd82;">N_new</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">X_new</span>[N_new];
}

<span style="color: #00ffff;">parameters</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">a</span>;
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">b</span>;
  <span style="color: #98fb98;">real</span>&lt;<span style="color: #00ffff;">lower</span><span style="color: #7fffd4;">=</span>0&gt; <span style="color: #eedd82;">sigma</span>;
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">transformed parameters &#12391;&#12399;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">data, parameter &#12434;&#32068;&#12415;&#21512;&#12431;&#12379;&#12390;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#26032;&#12375;&#12356;&#12469;&#12531;&#12503;&#12522;&#12531;&#12464;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#20316;&#25104;&#20986;&#26469;&#12427;.</span>
<span style="color: #00ffff;">transformed parameters</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_base</span>[N];
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N) {
    y_base[i] <span style="color: #7fffd4;">=</span> a + b*X[i];
  }
}

<span style="color: #00ffff;">model</span> {
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N) {
    Y[i] <span style="color: #7fffd4;">~</span> <span style="color: #87cefa;">normal</span>(y_base[i],sigma);
  }
}

<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">generated quantities &#12391;&#12399;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">data, parameter, transformed parameter &#12434;&#20351;&#12387;&#12390;,</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#26032;&#12375;&#12356;&#12469;&#12531;&#12503;&#12522;&#12531;&#12464;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#20316;&#25104;&#20986;&#26469;&#12427;.</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">&#20998;&#24067;&#12395;&#24467;&#12358;&#20081;&#25968;&#20316;&#25104;&#12398;&#38555;&#12395;&#12399;, ~ &#12391;&#12399;&#12394;&#12367;</span>
<span style="color: #ff7f24;">// </span><span style="color: #ff7f24;">y = &#20998;&#24067;&#21517;_rng(parameter) &#12392;&#12356;&#12358;&#24418;&#12391; = &#12391;&#20195;&#20837;&#12377;&#12427;&#28857;&#12395;&#27880;&#24847;&#12377;&#12427;.</span>
<span style="color: #00ffff;">generated quantities</span> {
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_base_new</span>[N_new];
  <span style="color: #98fb98;">real</span> <span style="color: #eedd82;">y_new</span>[N_new];
  <span style="color: #00ffff;">for</span> (i <span style="color: #00ffff;">in</span> 1:N_new) {
    y_base_new[i] <span style="color: #7fffd4;">=</span> a + b*X_new[i];
    y_new[i]      <span style="color: #7fffd4;">=</span> <span style="color: #87cefa;">normal_rng</span>(y_base_new[i],sigma);
  }
}
</pre>
</div>

<p>
cmdstanr を用いてキックする R code を作成する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span style="color: #7fffd4;">library</span>(cmdstanr)
d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
data  <span style="color: #7fffd4;">&lt;-</span> list(N=nrow(d),X=d$X,Y=d$Y,N_new=length(X_new),X_new=X_new)
model <span style="color: #7fffd4;">&lt;-</span> cmdstan_model(<span style="color: #ffa07a;">'model4-4.stan'</span>)
fit   <span style="color: #7fffd4;">&lt;-</span> model$sample(data=data, chains=4, parallel_chains=4, seed=1234)
fit$save_output_files(dir=<span style="color: #ffa07a;">"./"</span>, basename=<span style="color: #ffa07a;">'model4-4'</span>, timestamp=<span style="color: #98fb98;">FALSE</span>, random=<span style="color: #98fb98;">FALSE</span>)
</pre>
</div>

<pre class="example">
Running MCMC with 4 parallel chains...

Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup) 
Chain 1 Iteration:  100 / 2000 [  5%]  (Warmup) 
Chain 1 Iteration:  200 / 2000 [ 10%]  (Warmup) 
....
Chain 4 Iteration: 1400 / 2000 [ 70%]  (Sampling) 
Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling) 
Chain 4 Iteration: 1600 / 2000 [ 80%]  (Sampling) 
Chain 4 Iteration: 1700 / 2000 [ 85%]  (Sampling) 
Chain 4 Iteration: 1800 / 2000 [ 90%]  (Sampling) 
Chain 4 Iteration: 1900 / 2000 [ 95%]  (Sampling) 
Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling) 
Chain 1 finished in 0.1 seconds.
Chain 2 finished in 0.1 seconds.
Chain 3 finished in 0.1 seconds.
Chain 4 finished in 0.1 seconds.

All 4 chains finished successfully.
Mean chain execution time: 0.1 seconds.
Total execution time: 0.3 seconds.
</pre>

<p>
ちょっとテスト. df の中身を確認.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, <span style="color: #ffa07a;">'quantile'</span>, <span style="color: #ffa07a;">'rhat'</span>,<span style="color: #ffa07a;">'ess_bulk'</span>,<span style="color: #ffa07a;">'ess_tail'</span>)
<span class="linenr">8: </span>head(df)
</pre>
</div>

<pre class="example">
# A tibble: 6 × 11
  variable     mean    sd  `0%` `25%` `50%` `75%` `100%`  rhat ess_bulk ess_tail
  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
1 y_base_new…  386.  40.9  217.  360.  386.  412.   575.  1.00    1366.    1353.
2 y_base_new…  408.  39.3  246.  383.  407.  432.   588.  1.00    1382.    1303.
3 y_base_new…  429.  37.8  274.  405.  429.  453.   602.  1.00    1401.    1419.
4 y_base_new…  451.  36.3  303.  428.  451.  474.   616.  1.00    1421.    1414.
5 y_base_new…  473.  34.9  331.  451.  473.  495.   630.  1.00    1444.    1395.
6 y_base_new…  495.  33.4  359.  474.  495.  516.   644.  1.00    1473.    1438.
</pre>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 3: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 4: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 5: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 6: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr"> 7: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr"> 8: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr"> 9: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">10: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">11: </span>print(df)
<span class="linenr">12: </span>print(class(df$<span style="color: #ffa07a;">"50%"</span>))  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#26360;&#12365;&#20986;&#12377;&#12392;&#12365;&#12399;&#12371;&#12428;&#12391;&#12418;OK&#12384;&#12364;.</span>
<span class="linenr">13: </span>print(df$<span style="color: #000000; background-color: #ffffff;">`50%`</span>)  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">ggplot &#12398; aes &#12391;&#20351;&#12358;&#12392;&#12365;&#12399; `50%` (back quote?) &#12434;&#20351;&#12358;</span>
<span class="linenr">14: </span>print(X_new)
</pre>
</div>

<pre class="example">
# A tibble: 38 × 9
   variable        mean    sd `2.5%` `25%` `50%` `75%` `97.5%` X_new
   &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;
 1 y_base_new[1]   386.  40.9   305.  360.  386.  412.    466.    23
 2 y_base_new[2]   408.  39.3   329.  383.  407.  432.    485.    24
 3 y_base_new[3]   429.  37.8   354.  405.  429.  453.    504.    25
 4 y_base_new[4]   451.  36.3   379.  428.  451.  474.    522.    26
 5 y_base_new[5]   473.  34.9   403.  451.  473.  495.    541.    27
 6 y_base_new[6]   495.  33.4   428.  474.  495.  516.    561.    28
 7 y_base_new[7]   517.  32.0   453.  497.  516.  537.    580.    29
 8 y_base_new[8]   538.  30.7   477.  519.  538.  558.    599.    30
 9 y_base_new[9]   560.  29.3   502.  542.  560.  579.    619.    31
10 y_base_new[10]  582.  28.0   526.  564.  582.  600.    638.    32
# … with 28 more rows
[1] "numeric"
 [1]  385.5130  407.4335  429.0850  451.3160  472.9815  494.5715  516.3015
 [8]  537.9880  559.8315  581.7540  603.2995  625.3255  647.2970  669.3170
[15]  691.0870  713.0220  734.9595  756.7530  778.5770  800.3400  822.2360
[22]  844.0335  865.6885  887.4945  909.2655  931.0180  953.1985  975.1065
[29]  996.8525 1018.6000 1040.5050 1062.1500 1084.0350 1105.8150 1127.7300
[36] 1149.6500 1171.4100 1193.2600
 [1] 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[26] 48 49 50 51 52 53 54 55 56 57 58 59 60
</pre>

<p>
ベイズ信頼区間の図を描いてみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">95% &#20449;&#38972;&#21306;&#38291;</span>
<span class="linenr"> 5: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 6: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 9: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">10: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">11: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_base_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr">12: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">13: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20803;&#12487;&#12540;&#12479;</span>
<span class="linenr">16: </span>d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#22259;</span>
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot() + geom_point(data=d, mapping=aes(x=X,y=Y), shape=1, size=3)
<span class="linenr">20: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=df,mapping=aes(x=X_new,y=<span style="color: #000000; background-color: #ffffff;">`50%`</span>))
<span class="linenr">21: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`97.5%`</span>,ymin=<span style="color: #000000; background-color: #ffffff;">`2.5%`</span>),alpha=1/6)
<span class="linenr">22: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`75%`</span>  ,ymin=<span style="color: #000000; background-color: #ffffff;">`25%`</span> ),alpha=2/6)
<span class="linenr">23: </span>
<span class="linenr">24: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-left_cmdstan.png'</span>
<span class="linenr">25: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left_cmdstan.png" alt="Stan04-fig4-8-left_cmdstan.png" /><br  />
</p>
</div>

<p>
ベイズ予測区間<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr"> 2: </span><span style="color: #7fffd4;">library</span>(ggplot2)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">95% &#20449;&#38972;&#21306;&#38291;</span>
<span class="linenr"> 5: </span><span style="color: #87cefa;">q95</span> <span style="color: #7fffd4;">&lt;-</span> <span style="color: #00ffff;">function</span>(x) quantile(x, probs=c(0.025, 0.25, 0.5, 0.75, 0.975))
<span class="linenr"> 6: </span>files <span style="color: #7fffd4;">&lt;-</span> c(<span style="color: #ffa07a;">'model4-4-1.csv'</span>,
<span class="linenr"> 7: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-2.csv'</span>,
<span class="linenr"> 8: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-3.csv'</span>,
<span class="linenr"> 9: </span><span style="background-color: #222222;">        </span>   <span style="color: #ffa07a;">'model4-4-4.csv'</span>)
<span class="linenr">10: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">11: </span>df <span style="color: #7fffd4;">&lt;-</span> fit$summary(variables=c(<span style="color: #ffa07a;">'y_new'</span>),<span style="color: #ffa07a;">'mean'</span>,<span style="color: #ffa07a;">'sd'</span>, q95)
<span class="linenr">12: </span>X_new <span style="color: #7fffd4;">&lt;-</span> 23:60
<span class="linenr">13: </span>df$X_new <span style="color: #7fffd4;">&lt;-</span> X_new
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20803;&#12487;&#12540;&#12479;</span>
<span class="linenr">16: </span>d     <span style="color: #7fffd4;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data-salary.txt"</span>)
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#22259;</span>
<span class="linenr">19: </span>p <span style="color: #7fffd4;">&lt;-</span> ggplot() + geom_point(data=d, mapping=aes(x=X,y=Y), shape=1, size=3)
<span class="linenr">20: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_line(data=df,mapping=aes(x=X_new,y=<span style="color: #000000; background-color: #ffffff;">`50%`</span>))
<span class="linenr">21: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`97.5%`</span>,ymin=<span style="color: #000000; background-color: #ffffff;">`2.5%`</span>),alpha=1/6)
<span class="linenr">22: </span>p <span style="color: #7fffd4;">&lt;-</span> p + geom_ribbon(data=df, mapping=aes(x=X_new, ymax=<span style="color: #000000; background-color: #ffffff;">`75%`</span>  ,ymin=<span style="color: #000000; background-color: #ffffff;">`25%`</span> ),alpha=2/6)
<span class="linenr">23: </span>
<span class="linenr">24: </span>fname <span style="color: #7fffd4;">&lt;-</span> <span style="color: #ffa07a;">'fig4-8-right_cmdstan.png'</span>
<span class="linenr">25: </span>ggsave(file=fname, plot=p, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right_cmdstan.png" alt="Stan04-fig4-8-right_cmdstan.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> Stan で実装(2) cmdstanpy</h3>
<div class="outline-text-3" id="text-3-8">
<p>
Stan code は generated quantities がある model4-4.stan を用いよう.<br  />
キックする Python script (cmdstanpy) を書く.<br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #00ffff;">from</span> cmdstanpy <span style="color: #00ffff;">import</span> CmdStanModel
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 5: </span><span style="color: #eedd82;">N</span> = <span style="color: #b0c4de;">len</span>(d)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d.iloc[:,0]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d.iloc[:,1]
<span class="linenr"> 8: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr"> 9: </span><span style="color: #eedd82;">N_new</span> = <span style="color: #b0c4de;">len</span>(X_new)
<span class="linenr">10: </span><span style="color: #eedd82;">data</span> = {<span style="color: #ffa07a;">'N'</span>: N, <span style="color: #ffa07a;">'X'</span>: X,  <span style="color: #ffa07a;">'Y'</span>: Y, <span style="color: #ffa07a;">'N_new'</span>: N_new, <span style="color: #ffa07a;">'X_new'</span>: X_new}
<span class="linenr">11: </span><span style="color: #eedd82;">model</span> = CmdStanModel(stan_file=<span style="color: #ffa07a;">'model4-4.stan'</span>,model_name=<span style="color: #ffa07a;">'model4-4'</span>)
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = model.sample(data=data, chains=4, parallel_chains=4, seed=1234)
<span class="linenr">13: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#25351;&#23450;&#12391;&#12365;&#12394;&#12356;... timestamp &#12392;&#12363;&#35201;&#12425;&#12394;&#12356;&#12435;&#12384;&#12364;.</span>
<span class="linenr">14: </span>fit.save_csvfiles(<span style="color: #b0c4de;">dir</span>=<span style="color: #ffa07a;">'./'</span>)
<span class="linenr">15: </span><span style="color: #eedd82;">fpd</span> = fit.summary()
<span class="linenr">16: </span><span style="color: #00ffff;">print</span>(fpd.head(50))
</pre>
</div>

<pre class="example">
                  Mean   MCSE  StdDev      5%  ...     95%   N_Eff  N_Eff/s  R_hat
name                                           ...                                
lp__             -94.0  0.049     1.5   -96.0  ...   -92.0   910.0   3300.0    1.0
a               -120.0  2.300    79.0  -240.0  ...    10.0  1200.0   4400.0    1.0
b                 22.0  0.050     1.7    19.0  ...    25.0  1200.0   4400.0    1.0
sigma             85.0  0.460    16.0    64.0  ...   110.0  1300.0   4600.0    1.0
y_base[1]        408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base[2]        408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base[3]        451.0  0.980    36.0   394.0  ...   510.0  1376.0   5004.0    1.0
y_base[4]        582.0  0.700    28.0   537.0  ...   627.0  1598.0   5810.0    1.0
y_base[5]        604.0  0.660    27.0   561.0  ...   647.0  1667.0   6061.0    1.0
y_base[6]        648.0  0.570    25.0   608.0  ...   687.0  1859.0   6759.0    1.0
y_base[7]        713.0  0.440    22.0   677.0  ...   748.0  2443.0   8884.0    1.0
y_base[8]        757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base[9]        757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base[10]       822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base[11]       822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base[12]       844.0  0.290    19.0   812.0  ...   875.0  4461.0  16224.0    1.0
y_base[13]       931.0  0.320    21.0   897.0  ...   965.0  4192.0  15242.0    1.0
y_base[14]      1019.0  0.460    24.0   979.0  ...  1058.0  2781.0  10114.0    1.0
y_base[15]      1106.0  0.630    29.0  1058.0  ...  1154.0  2127.0   7734.0    1.0
y_base[16]      1106.0  0.630    29.0  1058.0  ...  1154.0  2127.0   7734.0    1.0
y_base[17]      1128.0  0.680    30.0  1078.0  ...  1178.0  2026.0   7367.0    1.0
y_base[18]      1150.0  0.720    32.0  1097.0  ...  1202.0  1941.0   7058.0    1.0
y_base[19]      1171.0  0.770    33.0  1117.0  ...  1226.0  1869.0   6796.0    1.0
y_base[20]      1171.0  0.770    33.0  1117.0  ...  1226.0  1869.0   6796.0    1.0
y_base_new[1]    386.0  1.100    41.0   320.0  ...   452.0  1322.0   4807.0    1.0
y_base_new[2]    408.0  1.100    39.0   345.0  ...   471.0  1337.0   4863.0    1.0
y_base_new[3]    429.0  1.000    38.0   370.0  ...   491.0  1355.0   4929.0    1.0
y_base_new[4]    451.0  0.980    36.0   394.0  ...   510.0  1376.0   5004.0    1.0
y_base_new[5]    473.0  0.930    35.0   418.0  ...   529.0  1400.0   5092.0    1.0
y_base_new[6]    495.0  0.890    33.0   442.0  ...   548.0  1427.0   5187.0    1.0
y_base_new[7]    517.0  0.840    32.0   466.0  ...   568.0  1458.0   5302.0    1.0
y_base_new[8]    538.0  0.790    31.0   489.0  ...   588.0  1496.0   5440.0    1.0
y_base_new[9]    560.0  0.750    29.0   514.0  ...   607.0  1542.0   5607.0    1.0
y_base_new[10]   582.0  0.700    28.0   537.0  ...   627.0  1598.0   5810.0    1.0
y_base_new[11]   604.0  0.660    27.0   561.0  ...   647.0  1667.0   6061.0    1.0
y_base_new[12]   626.0  0.610    26.0   585.0  ...   667.0  1752.0   6371.0    1.0
y_base_new[13]   648.0  0.570    25.0   608.0  ...   687.0  1859.0   6759.0    1.0
y_base_new[14]   669.0  0.530    23.0   631.0  ...   708.0  1996.0   7257.0    1.0
y_base_new[15]   691.0  0.480    23.0   654.0  ...   728.0  2191.0   7966.0    1.0
y_base_new[16]   713.0  0.440    22.0   677.0  ...   748.0  2443.0   8884.0    1.0
y_base_new[17]   735.0  0.400    21.0   700.0  ...   769.0  2771.0  10077.0    1.0
y_base_new[18]   757.0  0.360    20.0   723.0  ...   789.0  3216.0  11694.0    1.0
y_base_new[19]   779.0  0.330    20.0   746.0  ...   811.0  3615.0  13145.0    1.0
y_base_new[20]   800.0  0.310    20.0   768.0  ...   832.0  4045.0  14708.0    1.0
y_base_new[21]   822.0  0.300    19.0   791.0  ...   853.0  4285.0  15580.0    1.0
y_base_new[22]   844.0  0.290    19.0   812.0  ...   875.0  4461.0  16224.0    1.0
y_base_new[23]   866.0  0.290    20.0   834.0  ...   897.0  4526.0  16458.0    1.0
y_base_new[24]   888.0  0.300    20.0   855.0  ...   919.0  4470.0  16255.0    1.0
y_base_new[25]   909.0  0.310    20.0   876.0  ...   942.0  4314.0  15689.0    1.0
y_base_new[26]   931.0  0.320    21.0   897.0  ...   965.0  4192.0  15242.0    1.0

[50 rows x 9 columns]
</pre>

<p>
csv ファイルからロードできる.<br  />
<a href="https://discourse.mc-stan.org/t/what-is-the-proper-way-to-save-a-cmdstanpy-model-after-a-fit-has-been-complete/25020/2">What is the proper way to save a cmdstanpy model after a fit has been complete? - General - The Stan Forums</a><br  />
<a href="https://cmdstanpy.readthedocs.io/en/v1.0.0rc1/api.html#cmdstanpy.from_csv">API Reference — CmdStanPy 1.0.0rc1 documentation</a><br  />
<a href="https://mc-stan.org/cmdstanpy/api.html">API Reference — CmdStanPy 1.0.1 documentation</a><br  />
<a href="https://mc-stan.org/cmdstanpy/index.html">cmdstanpy – Python interface to CmdStan — CmdStanPy 1.0.1 documentation</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 2: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#20309;&#12363;&#38754;&#20498;</span>
<span class="linenr"> 3: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 4: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 5: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr"> 8: </span><span style="color: #eedd82;">df</span> = fit.summary(percentiles=(2.5, 50, 97.5))
<span class="linenr"> 9: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">type</span>(df))   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">pandas dataframe &#12392;&#12375;&#12390;&#20445;&#23384;&#12373;&#12428;&#12390;&#12356;&#12427;&#27096;&#23376;.</span>
<span class="linenr">10: </span><span style="color: #00ffff;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
&lt;class 'pandas.core.frame.DataFrame'&gt;
            Mean   MCSE  StdDev   2.5%    50%  97.5%   N_Eff  N_Eff/s  R_hat
name                                                                        
lp__       -94.0  0.049     1.5  -98.0  -93.0  -92.0   910.0   3100.0    1.0
a         -120.0  2.300    79.0 -290.0 -120.0   32.0  1200.0   4100.0    1.0
b           22.0  0.050     1.7   18.0   22.0   25.0  1200.0   4100.0    1.0
sigma       85.0  0.460    16.0   60.0   83.0  120.0  1300.0   4200.0    1.0
y_base[1]  408.0  1.100    39.0  323.0  407.0  482.0  1337.0   4503.0    1.0
</pre>

<p>
cmdstanpy の計算結果 csv ファイルを R (cmdstanr) で読み込むことも可能<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #7fffd4;">library</span>(cmdstanr)
<span class="linenr">2: </span>files <span style="color: #7fffd4;">&lt;-</span>c(<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr">3: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">4: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">5: </span><span style="background-color: #222222;">        </span>  <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>)
<span class="linenr">6: </span>fit <span style="color: #7fffd4;">&lt;-</span> as_cmdstan_fit(files)
<span class="linenr">7: </span>fit$summary()
</pre>
</div>

<pre class="example">
# A tibble: 100 × 10
   variable    mean median    sd   mad     q5    q95  rhat ess_bulk ess_tail
   &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
 1 lp__       -93.7  -93.3  1.46  1.12  -96.5 -92.2   1.00    1133.    1216.
 2 a         -116.  -117.  78.6  74.3  -242.    9.99  1.00    1248.    1240.
 3 b           21.8   21.8  1.75  1.62   19.0  24.6   1.00    1253.    1232.
 4 sigma       85.3   82.9 16.4  14.2    63.7 114.    1.00    1523.    1343.
 5 y_base[1]  408.   407.  39.3  37.1   346.  471.    1.00    1382.    1303.
 6 y_base[2]  408.   407.  39.3  37.1   346.  471.    1.00    1382.    1303.
 7 y_base[3]  451.   451.  36.3  34.0   394.  510.    1.00    1421.    1414.
 8 y_base[4]  582.   582.  28.0  26.6   537.  627.    1.00    1662.    1715.
 9 y_base[5]  604.   603.  26.8  25.5   561.  647.    1.00    1736.    1745.
10 y_base[6]  648.   647.  24.5  23.1   608.  687.    1.00    1939.    1927.
# … with 90 more rows
</pre>

<p>
パラメータの分布(密度グラフ)<br  />
<a href="https://www.delftstack.com/ja/howto/matplotlib/matplotlib-density-plot/">Matplotlib 密度プロット | Delft スタック</a><br  />
from scipy.stats import kde<br  />
density = kde.gaussian_kde(データ)<br  />
x = np.linspace(x最小, x最大, 分割数)<br  />
y = density(x)  # 密度値の推定<br  />
ax.plot(x,y)<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #eedd82;">adens</span> = kde.gaussian_kde(adraw)
<span class="linenr">17: </span><span style="color: #eedd82;">x</span> = np.linspace(-350,150,100)
<span class="linenr">18: </span><span style="color: #eedd82;">y</span> = adens(x)
<span class="linenr">19: </span>
<span class="linenr">20: </span><span style="color: #eedd82;">bdens</span> = kde.gaussian_kde(bdraw)
<span class="linenr">21: </span><span style="color: #eedd82;">bx</span> = np.linspace(15,30,100)
<span class="linenr">22: </span><span style="color: #eedd82;">by</span> = bdens(bx)
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #eedd82;">sdens</span> = kde.gaussian_kde(sdraw)
<span class="linenr">25: </span><span style="color: #eedd82;">sx</span> = np.linspace(50,170,100)
<span class="linenr">26: </span><span style="color: #eedd82;">sy</span> = sdens(sx)
<span class="linenr">27: </span>
<span class="linenr">28: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">29: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">30: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">31: </span>ax.plot(x,y)
<span class="linenr">32: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">33: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">34: </span>ax2.plot(bx,by)
<span class="linenr">35: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">36: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">37: </span>ax3.plot(sx,sy)
<span class="linenr">38: </span>
<span class="linenr">39: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">40: </span>plt.tight_layout()
<span class="linenr">41: </span>
<span class="linenr">42: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_dens_py.png'</span>
<span class="linenr">43: </span>fig.show()
<span class="linenr">44: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_dens_py.png" alt="Stan04-model4-5_param_dens_py.png" /><br  />
</p>
</div>

<p>
<a href="https://pythondatascience.plavox.info/matplotlib/%E3%83%92%E3%82%B9%E3%83%88%E3%82%B0%E3%83%A9%E3%83%A0">matplotlib でヒストグラムを描く – Python でデータサイエンス</a><br  />
ヒストグラムのパラメータ<br  />
  plt.hist(x, bins=16) # 棒の数を 16 に<br  />
  plt.hist(x, range(50,100))  # 50 - 100 まで<br  />
  plt.hist(x, normed=True)    # 正規化<br  />
  plt.hist(x, rwidth=0.8)     # 棒の幅<br  />
  plt.hist(x, color="red")    # 棒の色<br  />
</p>

<p>
パラメータの分布(ヒストグラム)<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">17: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">18: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">19: </span>ax.hist(adraw)
<span class="linenr">20: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">21: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">22: </span>ax2.hist(bdraw)
<span class="linenr">23: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">24: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">25: </span>ax3.hist(sdraw)
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">28: </span>plt.tight_layout()
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_hist_py.png'</span>
<span class="linenr">31: </span>fig.show()
<span class="linenr">32: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_hist_py.png" alt="Stan04-model4-5_param_hist_py.png" /><br  />
</p>
</div>

<p>
trace plot<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 6: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">10: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">13: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">xmax</span> = <span style="color: #b0c4de;">len</span>(adraw)
<span class="linenr">15: </span><span style="color: #00ffff;">print</span>(xmax)
<span class="linenr">16: </span><span style="color: #eedd82;">rng</span> = <span style="color: #b0c4de;">range</span>(0, xmax)
<span class="linenr">17: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(rng))
</pre>
</div>

<pre class="example">
4000
4000
</pre>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">from</span> scipy.stats <span style="color: #00ffff;">import</span> kde
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">adraw</span> = la[<span style="color: #ffa07a;">'a'</span>]
<span class="linenr">13: </span><span style="color: #eedd82;">bdraw</span> = la[<span style="color: #ffa07a;">'b'</span>]
<span class="linenr">14: </span><span style="color: #eedd82;">sdraw</span> = la[<span style="color: #ffa07a;">'sigma'</span>]
<span class="linenr">15: </span><span style="color: #eedd82;">x</span> = <span style="color: #b0c4de;">range</span>(0, <span style="color: #b0c4de;">len</span>(adraw))
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(7,3))
<span class="linenr">18: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,3,1)
<span class="linenr">19: </span>ax.set_title(<span style="color: #ffa07a;">'a'</span>)
<span class="linenr">20: </span>ax.plot(x,adraw)
<span class="linenr">21: </span><span style="color: #eedd82;">ax2</span> = fig.add_subplot(1,3,2)
<span class="linenr">22: </span>ax2.set_title(<span style="color: #ffa07a;">'b'</span>)
<span class="linenr">23: </span>ax2.plot(x,bdraw)
<span class="linenr">24: </span><span style="color: #eedd82;">ax3</span> = fig.add_subplot(1,3,3)
<span class="linenr">25: </span>ax3.set_title(<span style="color: #ffa07a;">'sigma'</span>)
<span class="linenr">26: </span>ax3.plot(x,sdraw)
<span class="linenr">27: </span>
<span class="linenr">28: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">plt.rcParams['font.size'] = 5</span>
<span class="linenr">29: </span>plt.tight_layout()
<span class="linenr">30: </span>
<span class="linenr">31: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'model4-5_param_trace_py.png'</span>
<span class="linenr">32: </span>fig.show()
<span class="linenr">33: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-model4-5_param_trace_py.png" alt="Stan04-model4-5_param_trace_py.png" /><br  />
</p>
</div>

<p>
ベイズ信頼区間<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 6: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 7: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(d[<span style="color: #ffa07a;">'X'</span>]))
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(type(la))   # dict</span>
<span class="linenr">16: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base'</span>]
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #eedd82;">p</span> = np.percentile(ybase[:,0], q=[2.5, 25, 50, 75, 97.5]) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">[329.275975 382.54375  407.4335   432.47275  484.563225]</span>
<span class="linenr">19: </span><span style="color: #ff7f24;">#</span><span style="color: #ff7f24;">print(p)</span>
<span class="linenr">20: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">21: </span><span style="color: #eedd82;">i</span> = 42
<span class="linenr">22: </span><span style="color: #eedd82;">df</span>[23] = np.percentile(ybase[:,0], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">23: </span><span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i-23], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#36578;&#32622;</span>
<span class="linenr">25: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">26: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#21015;&#21517;&#12398;&#35373;&#23450;</span>
<span class="linenr">27: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">28: </span><span style="color: #00ffff;">print</span>(df3)
</pre>
</div>

<pre class="example">
20
           p2.5         p25        p50         p75        p97.5
23   329.275975   382.54375   407.4335   432.47275   484.563225
42  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
</pre>

<p>
<a href="https://note.nkmk.me/python-pandas-dataframe-rename/">pandas.DataFrameの行名・列名の変更 | note.nkmk.me</a><br  />
列名付け替え<br  />
  df.set_axis(['col1', 'col2'], axis='columns')<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">&#12486;&#12473;&#12488;&#12503;&#12525;&#12464;&#12521;&#12512;2</span>
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 5: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 6: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 7: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base'</span>]
<span class="linenr">16: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">17: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X)):
<span class="linenr">18: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">19: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">20: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">21: </span><span style="color: #00ffff;">print</span>(df3)
</pre>
</div>

<pre class="example">
           p2.5         p25        p50         p75        p97.5
0    329.275975   382.54375   407.4335   432.47275   484.563225
1    329.275975   382.54375   407.4335   432.47275   484.563225
2    379.150450   428.25850   451.3160   474.11425   522.375525
3    526.263225   564.34250   581.7540   599.98400   638.039400
4    550.385900   586.78125   603.2995   621.00875   657.497800
5    598.459200   631.78200   647.2970   663.10925   696.845625
6    670.206100   699.27075   713.0220   726.92225   755.416825
7    716.318075   743.69250   756.7530   769.93875   796.053550
8    716.318075   743.69250   756.7530   769.93875   796.053550
9    782.588625   809.31350   822.2360   834.73925   860.563200
10   782.588625   809.31350   822.2360   834.73925   860.563200
11   804.537575   831.35400   844.0335   856.57175   882.364875
12   889.549775   918.08100   931.0180   944.99675   974.112375
13   970.801500  1003.26750  1018.6000  1033.78250  1068.110500
14  1048.405500  1087.87750  1105.8150  1124.20000  1165.291000
15  1048.405500  1087.87750  1105.8150  1124.20000  1165.291000
16  1068.381250  1108.75000  1127.7300  1146.72250  1190.291000
17  1086.878250  1129.85000  1149.6500  1169.22750  1214.831250
18  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
19  1106.094250  1150.85000  1171.4100  1191.71000  1239.130500
</pre>

<p>
<a href="http://nolinknolife.livedoor.blog/archives/16513660.html">pythonでグラフ上に白抜き○をプロットする : No Link No Life</a><br  />
<a href="https://www.delftstack.com/ja/howto/matplotlib/how-to-set-marker-size-of-scatter-plot-in-matplotlib/">Matplotlib で散布図のマーカーサイズを設定する方法 | Delft スタック</a><br  />
  plt.scatter(x,y, marker='o', s=100, facecolor='None', edgecolor='black')  # s は丸のサイズ<br  />
<a href="https://salad-bowl-of-knowledge.github.io/hp/statistics/2019/02/11/confidence_band.html">Matplotlibのみで線形回帰の信頼区間を描画する | 知識のサラダボウル</a><br  />
  plt.fill_between(x, lower, upper, color='', alpha=0.4) こんな感じで描くことができそう<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d[<span style="color: #ffa07a;">'Y'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">16: </span><span style="color: #eedd82;">ybase</span> = la[<span style="color: #ffa07a;">'y_base_new'</span>]
<span class="linenr">17: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">18: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">19: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(ybase[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">20: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">21: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">d['X'] &#12392; df3 &#12434;&#20351;&#12358;</span>
<span class="linenr">24: </span>
<span class="linenr">25: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(5,5))
<span class="linenr">26: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,1,1)
<span class="linenr">27: </span>ax.scatter(X,Y, marker=<span style="color: #ffa07a;">'o'</span>, s=50, facecolor=<span style="color: #ffa07a;">'None'</span>, edgecolors=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr">28: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p2.5'</span>], df3[<span style="color: #ffa07a;">'p97.5'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.2)
<span class="linenr">29: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p25'</span>], df3[<span style="color: #ffa07a;">'p75'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.5)
<span class="linenr">30: </span>plt.tight_layout()
<span class="linenr">31: </span>
<span class="linenr">32: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'fig4-8-left_py.png'</span>
<span class="linenr">33: </span>fig.show()
<span class="linenr">34: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-left_py.png" alt="Stan04-fig4-8-left_py.png" /><br  />
</p>
</div>

<p>
ベイズ予測区間<br  />
同様に作ればよいだろう.<br  />
まずはテスト(確認).<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 6: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr"> 7: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr"> 8: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr"> 9: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">12: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">y_new</span> = la[<span style="color: #ffa07a;">'y_new'</span>]
<span class="linenr">15: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">type</span>(y_new))   <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">numpy.ndarray</span>
<span class="linenr">16: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(y_new))    <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">4000 &#21015; (&#27178;&#12395;&#20081;&#25968;&#12364;&#20006;&#12435;&#12391;&#12356;&#12427;&#24863;&#12376;)</span>
<span class="linenr">17: </span><span style="color: #00ffff;">print</span>(<span style="color: #b0c4de;">len</span>(y_new[0])) <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">38 &#34892;</span>
<span class="linenr">18: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">20: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(y_new[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">21: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">22: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">23: </span><span style="color: #00ffff;">print</span>(df3.head(5))
</pre>
</div>

<pre class="example">
&lt;class 'numpy.ndarray'&gt;
4000
38
         p2.5        p25       p50        p75       p97.5
0  198.123700  326.81750  386.4070  447.93825  574.349600
1  212.061950  346.84150  408.3980  470.50200  598.318850
2  242.332525  367.20725  426.5785  487.02275  620.522400
3  268.728025  388.85600  452.0190  511.67625  638.447125
4  286.956400  411.82775  470.9350  533.02350  651.108675
</pre>


<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #00ffff;">import</span> numpy <span style="color: #00ffff;">as</span> np
<span class="linenr"> 2: </span><span style="color: #00ffff;">import</span> cmdstanpy
<span class="linenr"> 3: </span><span style="color: #00ffff;">import</span> matplotlib.pyplot <span style="color: #00ffff;">as</span> plt
<span class="linenr"> 4: </span><span style="color: #00ffff;">import</span> pandas <span style="color: #00ffff;">as</span> pd
<span class="linenr"> 5: </span><span style="color: #eedd82;">d</span> = pd.read_csv(<span style="color: #ffa07a;">"data-salary.txt"</span>,header=0)
<span class="linenr"> 6: </span><span style="color: #eedd82;">X</span> = d[<span style="color: #ffa07a;">'X'</span>]
<span class="linenr"> 7: </span><span style="color: #eedd82;">Y</span> = d[<span style="color: #ffa07a;">'Y'</span>]
<span class="linenr"> 8: </span><span style="color: #eedd82;">files</span>=[<span style="color: #ffa07a;">'model4-4-20220331192118_1.csv'</span>,
<span class="linenr"> 9: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_2.csv'</span>,
<span class="linenr">10: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_3.csv'</span>,
<span class="linenr">11: </span>       <span style="color: #ffa07a;">'model4-4-20220331192118_4.csv'</span>]
<span class="linenr">12: </span><span style="color: #eedd82;">fit</span> = cmdstanpy.from_csv(path=files, method=<span style="color: #ffa07a;">'sample'</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #eedd82;">la</span> = fit.stan_variables()  <span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">{ a:[...], b:[...], y_base:[[....],[....],....] }</span>
<span class="linenr">15: </span><span style="color: #eedd82;">X_new</span> = <span style="color: #b0c4de;">range</span>(23,61)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #eedd82;">y_new</span> = la[<span style="color: #ffa07a;">'y_new'</span>]
<span class="linenr">18: </span><span style="color: #eedd82;">df</span> = pd.DataFrame()
<span class="linenr">19: </span><span style="color: #00ffff;">for</span> i <span style="color: #00ffff;">in</span> <span style="color: #b0c4de;">range</span>(0,<span style="color: #b0c4de;">len</span>(X_new)):
<span class="linenr">20: </span>    <span style="color: #eedd82;">df</span>[i] = np.percentile(y_new[:,i], q=[2.5, 25, 50, 75, 97.5])
<span class="linenr">21: </span><span style="color: #eedd82;">df2</span> = df.T
<span class="linenr">22: </span><span style="color: #eedd82;">df3</span> = df2.set_axis([<span style="color: #ffa07a;">'p2.5'</span>,<span style="color: #ffa07a;">'p25'</span>,<span style="color: #ffa07a;">'p50'</span>,<span style="color: #ffa07a;">'p75'</span>,<span style="color: #ffa07a;">'p97.5'</span>], axis=<span style="color: #ffa07a;">'columns'</span>)
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #ff7f24;"># </span><span style="color: #ff7f24;">X_new &#12392; df3 &#12434;&#20351;&#12358;</span>
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #eedd82;">fig</span> = plt.figure(dpi=100, figsize=(5,5))
<span class="linenr">27: </span><span style="color: #eedd82;">ax</span> = fig.add_subplot(1,1,1)
<span class="linenr">28: </span>ax.scatter(X,Y, marker=<span style="color: #ffa07a;">'o'</span>, s=50, facecolor=<span style="color: #ffa07a;">'None'</span>, edgecolors=<span style="color: #ffa07a;">'black'</span>)
<span class="linenr">29: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p2.5'</span>], df3[<span style="color: #ffa07a;">'p97.5'</span>], color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.2)
<span class="linenr">30: </span>ax.fill_between(X_new, df3[<span style="color: #ffa07a;">'p25'</span>], df3[<span style="color: #ffa07a;">'p75'</span>],    color=<span style="color: #ffa07a;">'gray'</span>,alpha=0.5)
<span class="linenr">31: </span>plt.tight_layout()
<span class="linenr">32: </span>
<span class="linenr">33: </span><span style="color: #eedd82;">fname</span> = <span style="color: #ffa07a;">'fig4-8-right_py.png'</span>
<span class="linenr">34: </span>fig.show()
<span class="linenr">35: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/Stan04-fig4-8-right_py.png" alt="Stan04-fig4-8-right_py.png" /><br  />
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dataframe の取り扱い [2021 版]]]></title>
    <link href="http://saito1369.github.io/blog/2021-05-03-DataFrame2021.html"/>
    <updated>2021-05-03T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/DataFrame2021</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 環境</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. データ加工</a>
<ul>
<li><a href="#sec-3-1">3.1. R</a></li>
<li><a href="#sec-3-2">3.2. dataframe</a></li>
<li><a href="#sec-3-3">3.3. tidyverse</a></li>
<li><a href="#sec-3-4">3.4. Python</a></li>
<li><a href="#sec-3-5">3.5. pandas</a></li>
<li><a href="#sec-3-6">3.6. Julia</a></li>
<li><a href="#sec-3-7">3.7. DataFrams</a></li>
</ul>
</li>
<li><a href="#sec-4">4. グラフ化</a>
<ul>
<li><a href="#sec-4-1">4.1. R</a></li>
<li><a href="#sec-4-2">4.2. ggplot2(基礎)</a></li>
<li><a href="#sec-4-3">4.3. ggplot2 による時系列グラフの作成</a></li>
<li><a href="#sec-4-4">4.4. Python</a></li>
<li><a href="#sec-4-5">4.5. matplotlib(基礎)</a></li>
<li><a href="#sec-4-6">4.6. matplotlib による時系列グラフの作成</a></li>
<li><a href="#sec-4-7">4.7. plotline による時系列グラフの作成</a></li>
<li><a href="#sec-4-8">4.8. Julia</a></li>
<li><a href="#sec-4-9">4.9. PyPlot(基礎)</a></li>
<li><a href="#sec-4-10">4.10. PyPlotによる時系列グラフの作成</a></li>
<li><a href="#sec-4-11">4.11. RCall(ggplot2)による時系列グラフの作成</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-05-03 Mon 19:03&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2021-09-21 Tue 16:52&gt;</span></span><br  />
</p>
<p>
dataframe の取り扱いについて.<br  />
以前もほとんど同じことやったけど, version が上がって変わった部分もあったりすっかり忘れてる部分もあったりするのでもう一度改めてやってみよう.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 環境</h2>
<div class="outline-text-2" id="text-1">
<p>
計算機環境を書いておこう.<br  />
いくつかのパソコンでやったので全部書いておく.<br  />
全部 Mac だけど.<br  />
</p>

<p>
環境1<br  />
  MacBook Air (M1, 2020) メモリ16GB<br  />
  OS: MacOS Big Sur 11.2.3<br  />
    python:  miniforge3-4.10 (Python3.9.2)<br  />
    Julia:   version 1.6.1 (arm 用バイナリが無い)<br  />
    R:       version 4.0.5 (arm 用バイナリが無い)<br  />
    ruby:    3.0.1p64<br  />
    perl:    v5.32.1<br  />
</p>

<p>
環境2<br  />
  iMac(2019) メモリ16GB<br  />
  OS: MacOS Mojave 10.14.6<br  />
    python:  anaconda3-2020.11 (Python3.8.5)<br  />
    Julia:   version 1.5.3<br  />
    R:       version 4.0.4<br  />
    ruby:    3.0.1p64<br  />
    perl:    v5.32.1<br  />
</p>

<p>
環境3<br  />
  MacBook Pro(2019) メモリ32GB<br  />
  OS: MacOS Catalina 10.15.5<br  />
    python:  anaconda3-2020.11 (Python3.8.5)<br  />
    Julia:   version 1.6.1<br  />
    R:       version 4.0.4<br  />
    ruby:    3.0.1p64<br  />
    perl:    v5.32.1<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
fitbit から心拍数データをとってきた.<br  />
こんなデータである.<br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(10))
</pre>
</div>

<pre class="example">
        date           cat         cal   min
0 2021-02-01  Out_of_Range  1548.62703  1298
1 2021-02-01      Fat_Burn   350.27367    93
2 2021-02-01        Cardio   108.05331    15
3 2021-02-01          Peak     0.00000     0
4 2021-02-02  Out_of_Range  1436.70932  1209
5 2021-02-02      Fat_Burn   437.81104    90
6 2021-02-02        Cardio   177.95100    22
7 2021-02-02          Peak     9.49072     1
8 2021-02-03  Out_of_Range  1437.58534  1205
9 2021-02-03      Fat_Burn   762.53009   162
</pre>

<p>
プログラム 2 行目:<br  />
  pd.read_csv でファイルを読み込む. pd.read_table とほぼ同じ.<br  />
  区切り文字の default が read_csv のときは ",", read_table のときは "\t"<br  />
  引数は&#x2026;<br  />
</p>
<ul class="org-ul">
<li>ファイル名<br  />
</li>
<li>sep="\t"      # 区切り文字<br  />
</li>
<li>header=0      # 列名が書いてある行数(default=0) 列名が無い場合は header=None とする.<br  />
</li>
<li>names=('date','cat','cal','min') # のように自分で列名を指定できる<br  />
</li>
<li>index_col=0   # 行名がある場合. 行名が書いてある列番号を指定できる.<br  />
</li>
<li>usecols=[1,3] # 特定の列だけ読み込む場合(例では 2 列目と 4 列目のみ取り込み)<br  />
</li>
</ul>

<p>
参考:<br  />
<a href="https://note.nkmk.me/python-pandas-read-csv-tsv/">pandasでcsv/tsvファイル読み込み（read_csv, read_table） | note.nkmk.me</a><br  />
</p>

<p>
このデータを, 1 日 1 行にしてグラフ化したい.<br  />
こんな感じ:<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">date</th>
<th scope="col" class="right">out_of_range</th>
<th scope="col" class="left">fat_burn</th>
<th scope="col" class="left">cardio</th>
<th scope="col" class="left">peak</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2021-02-01</td>
<td class="right">1298</td>
<td class="left">93</td>
<td class="left">15</td>
<td class="left">0</td>
</tr>

<tr>
<td class="right">2021-02-02</td>
<td class="right">1209</td>
<td class="left">&#x2026;</td>
<td class="left">&#x2026;</td>
<td class="left">&#x2026;</td>
</tr>

<tr>
<td class="right">&#xa0;</td>
<td class="right">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>


<p>
このデータを例にして, データをいい感じで加工しつつ簡単なグラフを描くところまでをやってみたい.<br  />
R, python, Julia, で似たようなことをやるにはどうするかをまとめておく.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> データ加工</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> R</h3>
<div class="outline-text-3" id="text-3-1">
<p>
R については, 標準の dataframe を使うか tidyverse を使うか, 選択肢が複数ある.<br  />
tidyverse の方が便利な機能が豊富っぽいが, dataframe しか使えない場合もある.<br  />
</p>


<p>
参考:<br  />
<a href="https://heavywatal.github.io/rstats/dplyr.html">dplyr: 高速data.frame処理 - Heavy Watal</a><br  />
<a href="https://heavywatal.github.io/rstats/tidyr.html">tidyr: シンプルなデータ変形ツール - Heavy Watal</a><br  />
<a href="http://bcl.sci.yamaguchi-u.ac.jp/~jun/notebook/r/tidyverse/">tidyverse :: Jun Nishii</a><br  />
<a href="http://www.sudori.info/stat/stat_tidyverse_01.html">須通り_統計_Tidyverseによるデータフレーム加工（01）tidyr</a><br  />
</p>

<p>
<a href="http://www.mishou.be/2019/09/17/r-tidyverse%E3%81%AE%E4%B8%96%E7%95%8C%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B/">R: tidyverseをふつうに使えるようになる 1/5 – Think it aloud</a><br  />
<a href="http://www.mishou.be/2019/09/17/r-tidyverse%E3%82%92%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B2-5-ver-1/">R: tidyverseをふつうに使えるようになる（tibbleとdplyr） 2/5 – Think it aloud</a><br  />
</p>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> dataframe</h3>
<div class="outline-text-3" id="text-3-2">
<p>
まず普通にデータの読み込み. read.table は read.csv でもよい.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.table(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>print(head(df0,5))
</pre>
</div>

<pre class="example">
        date          cat       cal  min
1 2021-02-01 Out_of_Range 1548.6270 1298
2 2021-02-01     Fat_Burn  350.2737   93
3 2021-02-01       Cardio  108.0533   15
4 2021-02-01         Peak    0.0000    0
5 2021-02-02 Out_of_Range 1436.7093 1209
</pre>

<p>
特定の列を抽出する. 1,2,4 列目だけ使いたい(3 列目(cal) は今回はいらないので削除したい).<br  />
R の配列は 1 から始まる(1-based).<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>print(head(df,5))
</pre>
</div>

<pre class="example">
        date          cat  min
1 2021-02-01 Out_of_Range 1298
2 2021-02-01     Fat_Burn   93
3 2021-02-01       Cardio   15
4 2021-02-01         Peak    0
5 2021-02-02 Out_of_Range 1209
</pre>

<p>
cat 列が "Out_of_Range" の行のみを取り出してみよう.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26465;&#20214;&#12434;&#28288;&#12383;&#12377;&#34892;&#12434;&#25277;&#20986;</span>
<span class="linenr">4: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date          cat  min
1  2021-02-01 Out_of_Range 1298
5  2021-02-02 Out_of_Range 1209
9  2021-02-03 Out_of_Range 1205
13 2021-02-04 Out_of_Range 1255
17 2021-02-05 Out_of_Range 1289
</pre>

<p>
cat 列は全部同じ値なので要らないか.<br  />
df[,c(1,3)] で 1列目と3列目がとれる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,c(1,3)]
<span class="linenr">4: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date  min
1  2021-02-01 1298
5  2021-02-02 1209
9  2021-02-03 1205
13 2021-02-04 1255
17 2021-02-05 1289
</pre>


<p>
min 列の名前を Out_of_Range に変えたい.<br  />
</p>

<p>
参考:<br  />
列名の変更: <a href="http://tips-r.blogspot.com/2018/02/r.html">Rのデータフレームで、列名指定で列名の一部を変更する方法 - Rプログラミングの小ネタ</a><br  />
</p>

<p>
names(df) で列名がとれるのでこれを使う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">3: </span>dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == <span style="color: #ffa07a;">"Out_of_Range"</span>,c(1,3)]
<span class="linenr">4: </span>names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"Out_of_Range"</span>      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;&#12398;&#22793;&#26356;</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
         date Out_of_Range
1  2021-02-01         1298
5  2021-02-02         1209
9  2021-02-03         1205
13 2021-02-04         1255
17 2021-02-05         1289
</pre>

<p>
Out_of_Range だけでなく, Fat_Burn, Cardio, Peak の各カテゴリについても同じことをやってみる.<br  />
for 文を使う.<br  />
</p>

<p>
参考:  <a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/30.html">繰り返し文</a><br  />
</p>

<p>
データフレームの配列を作るには, 以下のようにする.<br  />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>array <span style="color: #1e90ff;">&lt;-</span> list()   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">c() &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">2: </span>array <span style="color: #1e90ff;">&lt;-</span> append(array, list(add_ele))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">list(add_ele) &#12395;&#12375;&#12394;&#12356;&#12392; "&#12487;&#12540;&#12479;&#12501;&#12524;&#12540;&#12512;&#12398;&#37197;&#21015;" &#12395;&#12399;&#12394;&#12425;&#12394;&#12356;&#28857;&#65281;&#65281;</span>
</pre>
</div>

<p>
参考:<br  />
   <a href="https://teratail.com/questions/197546">Python - Rでデータフレーム の配列を作りたい｜teratail</a><br  />
   <a href="https://stackoverflow.com/questions/28687806/a-better-way-to-push-and-pop-to-from-lists-in-r">A better way to push and pop to/from lists in R? - Stack Overflow</a><br  />
   <a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/23.html">リスト</a><br  />
   <a href="http://takenaka-akio.org/doc/r_auto/list.html">Rプログラム (TAKENAKA's Web Page)</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>print(head(adf[[2]],5))   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">adf[[1]] &#20108;&#37325;&#12395;&#12363;&#12387;&#12371;&#12434;&#20184;&#12369;&#12427;&#24517;&#35201;&#12354;&#12426;</span>
</pre>
</div>

<pre class="example">
         date Fat_Burn
2  2021-02-01       93
6  2021-02-02       90
10 2021-02-03      162
14 2021-02-04      134
18 2021-02-05      114
</pre>

<p>
ここまでで, 表が何個かできた.<br  />
date で merge して一つの表にしたい.<br  />
list の最初の要素を取り出すときは以下のように２ステップ必要(めんどくさい)<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[  1 ]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf) &#12391;&#26368;&#21021;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12377;&#37096;&#20998;</span>
<span class="linenr">2: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[ -1 ]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf) &#26368;&#21021;&#12398;&#35201;&#32032;&#12434;&#21066;&#38500;&#12377;&#12427;&#37096;&#20998;</span>
</pre>
</div>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift(@adf)</span>
<span class="linenr">11: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[1]      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">Out_of_Range</span>
<span class="linenr">12: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[-1]     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">Fat_Burn, Cardio, Peak</span>
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (ndf <span style="color: #20b2aa; font-weight: bold;">in</span> adf) {
<span class="linenr">14: </span>    mdf <span style="color: #1e90ff;">&lt;-</span> merge(mdf, ndf, by=<span style="color: #ffa07a;">"date"</span>)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34920;&#12398; merge</span>
<span class="linenr">15: </span>}
<span class="linenr">16: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
        date Out_of_Range Fat_Burn Cardio Peak
1 2021-02-01         1298       93     15    0
2 2021-02-02         1209       90     22    1
3 2021-02-03         1205      162     14    0
4 2021-02-04         1255      134      5    2
5 2021-02-05         1289      114      6    0
</pre>

<p>
これと同じことは Reduce 関数を使ってもできるようだ.<br  />
Reduce 関数とは？<br  />
こんな感じで動くものらしい.<br  />
</p>

<p>
Reduce(関数(a,b), 配列) &#x2013;&gt; x = 関数(配列要素(1), 配列要素(2)) を計算 &#x2013;&gt; y = 関数(x, 配列要素(3)) &#x2013;&gt; z = 関数(y, 配列要素(4)) &#x2026;<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/stkdev/items/16099f6e35b98ae62389">Reduce関数活用例:福利計算シミュレーション</a><br  />
Reduce 関数:<br  />
  Reduce(関数, リスト)<br  />
  関数は, ２つの引数をとる.<br  />
</p>

<p>
例:<br  />
  x &lt;- Reduce(function(a,b) { a+b }, c(1,2,5,7))<br  />
</p>

<p>
プログラムの動きの解説:<br  />
  まず a に 1, b に 2 を入れる.<br  />
  a + b を計算. 3 になる.<br  />
  a に 3, b に 5 を入れる.<br  />
  a + b を計算. 8 になる.<br  />
  a に 8, b に 7 を入れる.<br  />
  a + b を計算. 15 になる.<br  />
  x に 15 が入る.<br  />
  はず.<br  />
</p>

<p>
実際にやってみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>data <span style="color: #1e90ff;">&lt;-</span> c(1,2,5,7)
<span class="linenr">2: </span>x <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(a,b) { a+b }, data)
<span class="linenr">3: </span>x
</pre>
</div>

<pre class="example">
[1] 15
</pre>

<p>
Reduce を使って merge してみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head(dfo,5))</span>
<span class="linenr"> 9: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">adf[length(adf)+1] &lt;- dfo</span>
<span class="linenr">10: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>mdf <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(d1,d2) merge(d1,d2,by=<span style="color: #ffa07a;">"date"</span>), adf)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">13: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
        date Out_of_Range Fat_Burn Cardio Peak
1 2021-02-01         1298       93     15    0
2 2021-02-02         1209       90     22    1
3 2021-02-03         1205      162     14    0
4 2021-02-04         1255      134      5    2
5 2021-02-05         1289      114      6    0
</pre>

<p>
(omake)<br  />
ついでに Reduce 系関数をいくつか調査.<br  />
</p>

<p>
apply:<br  />
  行ごと, 列ごとに関数を適用して結果を返す.<br  />
  apply(行列データ, 行ごと(1)or列ごと(2), 関数(ベクトルを引数にとるもの), 関数のその他のオプション)<br  />
  以下の参考ページが図もあってわかりやすい.<br  />
  <a href="http://takenaka-akio.org/doc/r_auto/chapter_07_apply.html">Rプログラム (TAKENAKA's Web Page)</a><br  />
</p>

<p>
apply 系関数の説明<br  />
<a href="https://heavywatal.github.io/rstats/purrr.html">purrr: ループ処理やapply系関数の決定版 - Heavy Watal</a><br  />
</p>

<p>
join の種類についてのわかりやすい説明<br  />
<a href="https://qiita.com/matsuou1/items/b1bd9778610e3a586e71">dplyrを使いこなす！JOIN編 - Qiita</a><br  />
<a href="http://www.sudori.info/stat/stat_tidyverse_02.html#join">須通り_統計_Tidyverseによるデータフレーム加工（02）dplyr_join による複数データフレームの結合／欠損値補完／ルックアップ</a><br  />
<a href="https://kazutan.github.io/kazutanR/hands_on_170730/join.html">データの結合 - *_join関数</a><br  />
</p>

<p>
最後は書き出し. write.csv() を使う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=<span style="color: #9370db;">TRUE</span>, sep=<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr"> 2: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 3: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cat <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 6: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> df[df$cat == cat,c(1,3)]
<span class="linenr"> 7: </span>    names(dfo)[2] <span style="color: #1e90ff;">&lt;-</span> cat
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head(dfo,5))</span>
<span class="linenr"> 9: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">adf[length(adf)+1] &lt;- dfo</span>
<span class="linenr">10: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">11: </span>}
<span class="linenr">12: </span>mdf <span style="color: #1e90ff;">&lt;-</span> Reduce(<span style="color: #20b2aa; font-weight: bold;">function</span>(d1,d2) merge(d1,d2,by=<span style="color: #ffa07a;">"date"</span>), adf)
<span class="linenr">13: </span>write.csv(mdf,<span style="color: #ffa07a;">"data/r.csv"</span>, quote=<span style="color: #9370db;">FALSE</span>, row.names=<span style="color: #9370db;">FALSE</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> tidyverse</h3>
<div class="outline-text-3" id="text-3-3">
<p>
データの読み込みは read_delim(file, delim, &#x2026;)<br  />
read_tsv(file) でもよい.<br  />
</p>

<p>
参考<br  />
<a href="https://heavywatal.github.io/rstats/readr.html">readr - 高速で柔軟なテーブル読み込み</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_delim(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">3: </span>print(head(df0,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 4
  date       cat            cal   min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01 Out_of_Range 1549.  1298
2 2021-02-01 Fat_Burn      350.    93
3 2021-02-01 Cardio        108.    15
4 2021-02-01 Peak            0      0
5 2021-02-02 Out_of_Range 1437.  1209
</pre>

<p>
列ごとの型情報も入っているようだ.<br  />
</p>

<p>
特定の列を抽出する<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- dataframe &#12392;&#21516;&#12376;&#12391;&#12356;&#12369;&#12427;</span>
<span class="linenr">4: </span>print(head(df,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 3
  date       cat            min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt;
1 2021-02-01 Out_of_Range  1298
2 2021-02-01 Fat_Burn        93
3 2021-02-01 Cardio          15
4 2021-02-01 Peak             0
5 2021-02-02 Out_of_Range  1209
</pre>

<p>
cat ＝＝ "Out_of_Range" の行を取り出す<br  />
filter(df, cat＝＝"Out_of_Range") を使う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- cat &#21015;&#12364; "Out_of_Range" &#12398;&#12418;&#12398;&#12398;&#12415;&#25277;&#20986;</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 3
  date       cat            min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt;
1 2021-02-01 Out_of_Range  1298
2 2021-02-02 Out_of_Range  1209
3 2021-02-03 Out_of_Range  1205
4 2021-02-04 Out_of_Range  1255
5 2021-02-05 Out_of_Range  1289
</pre>

<p>
cat 列はいらない. 1列目, 3列目のみを取り出したい.<br  />
tidyverse では, パイプ %&gt;% を使って以下の様にも書けるようだ.<br  />
df %&gt;% select(date,min)  # df から date, min 列だけ取り出す場合.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- date, min &#21015;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date         min
  &lt;date&gt;     &lt;dbl&gt;
1 2021-02-01  1298
2 2021-02-02  1209
3 2021-02-03  1205
4 2021-02-04  1255
5 2021-02-05  1289
</pre>

<p>
dataframe と同じようにも書ける.<br  />
普通に 1,3 列目だけ取り出す, という書き方もできる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo0 <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>)
<span class="linenr">5: </span>dfo <span style="color: #1e90ff;">&lt;-</span> dfo0[,c(1,3)]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- 1,3 &#21015;&#30446;&#12384;&#12369;</span>
<span class="linenr">6: </span>print(head(dfo,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date         min
  &lt;date&gt;     &lt;dbl&gt;
1 2021-02-01  1298
2 2021-02-02  1209
3 2021-02-03  1205
4 2021-02-04  1255
5 2021-02-05  1289
</pre>

<p>
列名の変更<br  />
tidyverse では<br  />
new_df &lt;- rename(df, 新しい列名 = 古い列名)<br  />
</p>

<p>
参考:<br  />
<a href="https://indenkun.hatenablog.com/entry/2020/06/21/003000">Rでdplyrをつかって任意の列の列名を変更する方法 - 備忘ログ</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr">4: </span>dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==<span style="color: #ffa07a;">"Out_of_Range"</span>) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(Out_of_Range = min)
<span class="linenr">5: </span>print(head(dfo,5))
</pre>
</div>

<p>
tidyvers はパイプ %&gt;% で繋げていけるので慣れれば書きやすい. 結構楽しいかも.<br  />
df %&gt;% 関数(x,y,z,&#x2026;)  は 関数(df, x,y,z&#x2026;) と同じ意味.<br  />
</p>

<p>
Out_of_Range だけでなく全部のカテゴリについてやる.<br  />
先程と同様, for 文を使おう.<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/sasaki_K_sasaki/items/bdd3d12546e15ee31a55">【R】dplyr rename()の中で変数を使う - Qiita</a><br  />
</p>

<p>
列名変更の rename だが&#x2026;<br  />
rename の中で変数を使う場合は, rename(!!変数 := 前の列名)  とする必要あり. &lt;&#x2013; 注意<br  />
うーん以外とめんどくさい.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo &lt;- filter(df, cat==x) %&gt;% select(date,min) %&gt;% rename(x = min) # &#12371;&#12428;&#12384;&#12392; x &#12392;&#12356;&#12358;&#25991;&#23383;&#21015;&#12364;&#20837;&#12387;&#12390;&#12375;&#12414;&#12358;.</span>
<span class="linenr"> 8: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 9: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr">10: </span>}
<span class="linenr">11: </span>print(head(adf[[2]],5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 2
  date       Fat_Burn
  &lt;date&gt;        &lt;dbl&gt;
1 2021-02-01       93
2 2021-02-02       90
3 2021-02-03      162
4 2021-02-04      134
5 2021-02-05      114
</pre>

<p>
date で merge して一つの表にする.<br  />
ここは dataframe と同じでいける.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf[[1]]
<span class="linenr">11: </span>adf <span style="color: #1e90ff;">&lt;-</span> adf[-1]
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (ndf <span style="color: #20b2aa; font-weight: bold;">in</span> adf) {
<span class="linenr">13: </span>    mdf <span style="color: #1e90ff;">&lt;-</span> full_join(mdf, ndf, by=<span style="color: #ffa07a;">"date"</span>)
<span class="linenr">14: </span>}
<span class="linenr">15: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 5
  date       Out_of_Range Fat_Burn Cardio  Peak
  &lt;date&gt;            &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01         1298       93     15     0
2 2021-02-02         1209       90     22     1
3 2021-02-03         1205      162     14     0
4 2021-02-04         1255      134      5     2
5 2021-02-05         1289      114      6     0
</pre>


<p>
色々調べてたら, データフレームのリストをまとめて join する方法をみつけた！！<br  />
</p>

<p>
参考:<br  />
<a href="https://stackoverflow.com/questions/8091303/simultaneously-merge-multiple-data-frames-in-a-list">r - Simultaneously merge multiple data.frames in a list - Stack Overflow</a><br  />
</p>

<p>
list_of_df %&gt;% reduce(full_join, by="date") こんな感じで書くといけるらしい.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf <span style="color: #1e90ff;">%&gt;%</span> reduce(full_join, by=<span style="color: #ffa07a;">"date"</span>)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">11: </span>print(head(mdf,5))
</pre>
</div>

<pre class="example">
# A tibble: 5 x 5
  date       Out_of_Range Fat_Burn Cardio  Peak
  &lt;date&gt;            &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01         1298       93     15     0
2 2021-02-02         1209       90     22     1
3 2021-02-03         1205      162     14     0
4 2021-02-04         1255      134      5     2
5 2021-02-05         1289      114      6     0
</pre>

<p>
write_csv を使って csv 形式に書き出す.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> df0[,c(1,2,4)]
<span class="linenr"> 4: </span>cats <span style="color: #1e90ff;">&lt;-</span> c(<span style="color: #ffa07a;">"Out_of_Range"</span>, <span style="color: #ffa07a;">"Fat_Burn"</span>, <span style="color: #ffa07a;">"Cardio"</span>, <span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>adf <span style="color: #1e90ff;">&lt;-</span> list()
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (x <span style="color: #20b2aa; font-weight: bold;">in</span> cats) {
<span class="linenr"> 7: </span>    dfo <span style="color: #1e90ff;">&lt;-</span> filter(df, cat==x) <span style="color: #1e90ff;">%&gt;%</span> select(date,min) <span style="color: #1e90ff;">%&gt;%</span> rename(!!x := min)
<span class="linenr"> 8: </span>    adf <span style="color: #1e90ff;">&lt;-</span> append(adf,list(dfo))
<span class="linenr"> 9: </span>}
<span class="linenr">10: </span>mdf <span style="color: #1e90ff;">&lt;-</span> adf <span style="color: #1e90ff;">%&gt;%</span> reduce(full_join, by=<span style="color: #ffa07a;">"date"</span>)
<span class="linenr">11: </span>write_csv(mdf,<span style="color: #ffa07a;">"data/rv.csv"</span>)
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Python</h3>
<div class="outline-text-3" id="text-3-4">
<p>
Python では pandas を使ってみる.<br  />
</p>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> pandas</h3>
<div class="outline-text-3" id="text-3-5">
<p>
まずデータを普通に読み込み.<br  />
0 列目は日付として読み込み.<br  />
2 列目(0-based) は使わないので削除する.<br  />
</p>

<p>
参考:<br  />
<a href="https://note.nkmk.me/python-pandas-read-csv-tsv/">pandasでcsv/tsvファイル読み込み（read_csv, read_table） | note.nkmk.me</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/heart_beats_summary_2021-02.data'</span>,sep=<span style="color: #ffa07a;">'\t'</span>, header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #9acd32;">df2</span> = df.iloc[:,[0,1,3]]
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df2.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
プログラム2 行目:<br  />
read_csv で表敬式データを読み込み.<br  />
tab 区切りなら read_table("foo.tsv") で良い.<br  />
</p>
<ul class="org-ul">
<li>header=0 は 0 行目(最初の行)が column 名の場合.<br  />
</li>
<li>column 名がない場合は header=None とする.<br  />
</li>
<li>read_csv("foo.tsv", names=("A","B","C","D")) &#x2013;&gt; column 名を A, B, C, D として読み込む.<br  />
</li>
<li>parse_dates= は 0 列目が日付として扱われることを示す.<br  />
</li>
</ul>

<p>
プログラム 3 行目:<br  />
位置の指定方法をここでまとめておく(多分覚えられないけど&#x2026;).<br  />
</p>
<ul class="org-ul">
<li>at,  loc は, 行名,  列名   を指定して値を得る.<br  />
</li>
<li>iat, iloc は, 行番号,列番号 を指定して値を得る.<br  />
</li>
</ul>
<p>
取得データについて.<br  />
</p>
<ul class="org-ul">
<li>at,  iat  は単独の要素の値を取得する際に使う.<br  />
</li>
<li>loc, iloc は複数の要素の値<br  />
<ul class="org-ul">
<li>複数の要素指定では, リスト [0,1,3] 及びスライス start:stop:step が使える.<br  />
</li>
<li>： あるいは ：： で全部という意味になる.<br  />
</li>
</ul>
</li>
</ul>

<p>
参考:<br  />
<a href="https://note.nkmk.me/python-pandas-at-iat-loc-iloc/">pandasで任意の位置の値を取得・変更するat, iat, loc, iloc | note.nkmk.me</a><br  />
</p>

<p>
データ取り出しをやってみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.iat[0,1])    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#34892; 1 &#21015;&#30446;(0-based)&#12398;&#20516;</span>
<span class="linenr">4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(df.iloc[::,2])</span>
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.iloc[: ,2].head(5))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20840;&#34892; 2&#21015;&#30446;(0-based)</span>
</pre>
</div>

<pre class="example">
Out_of_Range
0    1548.62703
1     350.27367
2     108.05331
3       0.00000
4    1436.70932
Name: cal, dtype: float64
</pre>

<p>
usecols を使うと, 要らない行は最初から読み込まない.<br  />
usecols=[0,1,3] で 2 列目(Python の配列番号は 0 から始まる 0-based)を読み込まない.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
ここから表をバラバラにして再構成する.<br  />
まずは cat 列 ＝＝ 'Out_of_Range' のデータを取り出す.<br  />
df[df['cat'] ＝＝'Out_of_Range'] &lt;&#x2013; こんな感じで取り出せる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>]
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo = df[df.iloc[:,1]=='Out_of_Range']</span>
<span class="linenr">5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo = df[df.loc[:,'cat']=='Out_of_Range']</span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date           cat   min
0  2021-02-01  Out_of_Range  1298
4  2021-02-02  Out_of_Range  1209
8  2021-02-03  Out_of_Range  1205
12 2021-02-04  Out_of_Range  1255
16 2021-02-05  Out_of_Range  1289
</pre>

<p>
列 cat ＝＝ 'Out_of_Range' である行を取り出す方法はいくつかあった. これ以外にもあるかもしれん.<br  />
  df[df['cat']       ＝＝ 'Out_of_Range']  &lt;&#x2013; これが上で使ったやつ.<br  />
  df[df.iloc[:,1]    ＝＝ 'Out_of_Range']<br  />
  df[df.loc[:,'cat'] ＝＝ 'Out_of_Range']<br  />
</p>

<p>
cat 列はここでは要らないなぁ. 全部同じ値だし. 消すにはどーすればいいんだろうか.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr">4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo = df[df.iloc[:,1]=='Out_of_Range'].iloc[:,[0,2]]</span>
<span class="linenr">5: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfo = df[df.loc[:,'cat']=='Out_of_Range'].loc[:,['date','min']]  # loc &#12391;&#12418;&#20986;&#26469;&#12427;.</span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date   min
0  2021-02-01  1298
4  2021-02-02  1209
8  2021-02-03  1205
12 2021-02-04  1255
16 2021-02-05  1289
</pre>

<p>
プログラム 3 行目:<br  />
 df.iloc[:,[0,2]] で df の [0,2] 列目(0-based) のみを取り出す.<br  />
</p>

<p>
min 列の名前を Out_of_Range としたい.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr">4: </span><span style="color: #9acd32;">dfo.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Out_of_Range'</span>]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">column &#21517;&#12434;&#25351;&#23450;&#12375;&#30452;&#12375;</span>
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(5))
</pre>
</div>

<pre class="example">
         date  Out_of_Range
0  2021-02-01          1298
4  2021-02-02          1209
8  2021-02-03          1205
12 2021-02-04          1255
16 2021-02-05          1289
</pre>

<p>
全部の cat に対して同じことをやる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">dfo</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Out_of_Range'</span>].iloc[:,[0,2]]
<span class="linenr"> 4: </span><span style="color: #9acd32;">dff</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Fat_Burn'</span>].iloc[:,[0,2]]
<span class="linenr"> 5: </span><span style="color: #9acd32;">dfc</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Cardio'</span>].iloc[:,[0,2]]
<span class="linenr"> 6: </span><span style="color: #9acd32;">dfp</span> = df[df[<span style="color: #ffa07a;">'cat'</span>]==<span style="color: #ffa07a;">'Peak'</span>].iloc[:,[0,2]]
<span class="linenr"> 7: </span><span style="color: #9acd32;">dfo.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Out_of_Range'</span>]
<span class="linenr"> 8: </span><span style="color: #9acd32;">dff.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>]
<span class="linenr"> 9: </span><span style="color: #9acd32;">dfc.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Cardio'</span>]
<span class="linenr">10: </span><span style="color: #9acd32;">dfp.columns</span> = [<span style="color: #ffa07a;">'date'</span>,<span style="color: #ffa07a;">'Peak'</span>]
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfo.head(3))
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dff.head(3))
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfc.head(3))
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dfp.head(3))
</pre>
</div>

<pre class="example">
        date  Out_of_Range
0 2021-02-01          1298
4 2021-02-02          1209
8 2021-02-03          1205
        date  Fat_Burn
1 2021-02-01        93
5 2021-02-02        90
9 2021-02-03       162
         date  Cardio
2  2021-02-01      15
6  2021-02-02      22
10 2021-02-03      14
         date  Peak
3  2021-02-01     0
7  2021-02-02     1
11 2021-02-03     0
</pre>

<p>
似たような文なので for 文でまとめてしまおう.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr">5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr">6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr">7: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(dfx.head(3))
<span class="linenr">8: </span>    adf.append(dfx)
</pre>
</div>

<pre class="example">
        date  Out_of_Range
0 2021-02-01          1298
4 2021-02-02          1209
8 2021-02-03          1205
        date  Fat_Burn
1 2021-02-01        93
5 2021-02-02        90
9 2021-02-03       162
         date  Cardio
2  2021-02-01      15
6  2021-02-02      22
10 2021-02-03      14
         date  Peak
3  2021-02-01     0
7  2021-02-02     1
11 2021-02-03     0
</pre>

<p>
日付 (date) をキーにして merge して一つの表にする.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #9acd32;">df3</span> = df1.merge(df2, on=<span style="color: #ffa07a;">'date'</span>)  &lt;-- df1 &#12392; df2 &#12434; date &#21015;&#12391; merge &#12375;&#12390; df3 &#12395;&#26684;&#32013;
</pre>
</div>

<p>
参考:<br  />
<a href="https://note.nkmk.me/python-pandas-merge-join/">pandas.DataFrameを結合するmerge, join（列・インデックス基準） | note.nkmk.me</a><br  />
<a href="https://hydrocul.github.io/wiki/programming_languages_diff/list/shift.html">配列(リスト)の先頭の要素を削除するには (shift) | hydroculのメモ</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr"> 5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr"> 6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr"> 7: </span>    adf.append(dfx)
<span class="linenr"> 8: </span><span style="color: #9acd32;">mdf</span> = adf.pop(0)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20808;&#38957;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12375;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> adf:
<span class="linenr">10: </span>    <span style="color: #9acd32;">mdf</span> = mdf.merge(d,on=<span style="color: #ffa07a;">'date'</span>)
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(mdf.head(5))
</pre>
</div>

<pre class="example">
        date  Out_of_Range  Fat_Burn  Cardio  Peak
0 2021-02-01          1298        93      15     0
1 2021-02-02          1209        90      22     1
2 2021-02-03          1205       162      14     0
3 2021-02-04          1255       134       5     2
4 2021-02-05          1289       114       6     0
</pre>

<p>
できた.<br  />
</p>

<p>
ファイルに保存しておいてさくっと取り出せるようにしとこう.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #9acd32;">df</span> = pd.read_table(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr"> 3: </span><span style="color: #9acd32;">adf</span> =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">'Out_of_Range'</span>,<span style="color: #ffa07a;">'Fat_Burn'</span>,<span style="color: #ffa07a;">'Cardio'</span>,<span style="color: #ffa07a;">'Peak'</span>):
<span class="linenr"> 5: </span>    <span style="color: #9acd32;">dfx</span> = df[df[<span style="color: #ffa07a;">'cat'</span>] == cat].iloc[:,[0,2]]
<span class="linenr"> 6: </span>    <span style="color: #9acd32;">dfx.columns</span> = [<span style="color: #ffa07a;">'date'</span>,cat]
<span class="linenr"> 7: </span>    adf.append(dfx)
<span class="linenr"> 8: </span><span style="color: #9acd32;">mdf</span> = adf.pop(0)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20808;&#38957;&#12398;&#35201;&#32032;&#12434;&#21462;&#12426;&#20986;&#12375;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> adf:
<span class="linenr">10: </span>    <span style="color: #9acd32;">mdf</span> = mdf.merge(d,on=<span style="color: #ffa07a;">'date'</span>)
<span class="linenr">11: </span>mdf.to_csv(<span style="color: #ffa07a;">"data/h.csv"</span>,index=<span style="color: #1e90ff;">False</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">csv &#12501;&#12449;&#12452;&#12523;&#12392;&#12375;&#12390;&#20445;&#23384;</span>
</pre>
</div>

<p>
参考:<br  />
<a href="https://note.nkmk.me/python-pandas-to-csv/">pandasでcsvファイルの書き出し・追記（to_csv） | note.nkmk.me</a><br  />
</p>

<p>
tsv(tab 区切り)で保存したい場合は,<br  />
df.to_csv("foo.tsv",sep="\t",index=False) などとすればよい.<br  />
index=False は行名を書かない.<br  />
列名を書かないときは header=False<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> Julia</h3>
<div class="outline-text-3" id="text-3-6">
<p>
Julia は DataFrames というパッケージのを使うのがいいのか？<br  />
以前とは結構変わってるような.<br  />
</p>
</div>
<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> DataFrams</h3>
<div class="outline-text-3" id="text-3-7">
<p>
参考:<br  />
<a href="https://dataframes.juliadata.org/stable/">Introduction · DataFrames.jl</a><br  />
<a href="https://csv.juliadata.org/stable/">CSV.jl Documentation · CSV.jl</a><br  />
</p>

<p>
色々調べて動くプログラムが書いてあるページをやっと見つけた.<br  />
<a href="https://blog.goo.ne.jp/r-de-r/e/23c50893ed6648d798c191667a037ed9">Julia でデータフレームを操作する - 裏 RjpWiki</a><br  />
</p>

<p>
CSV, DataFrames package を予めインストールしておくこと.<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame)
<span class="linenr">3: </span>println(first(df,5))    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head &#12398;&#20195;&#12431;&#12426;</span>
<span class="linenr">4: </span>println(last(df,5))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tail &#12398;&#20195;&#12431;&#12426;</span>
</pre>
</div>

<pre class="example">
5×4 DataFrame
 Row │ date        cat           cal       min
     │ Date…       String        Float64   Int64
─────┼───────────────────────────────────────────
   1 │ 2021-02-01  Out_of_Range  1548.63    1298
   2 │ 2021-02-01  Fat_Burn       350.274     93
   3 │ 2021-02-01  Cardio         108.053     15
   4 │ 2021-02-01  Peak             0.0        0
   5 │ 2021-02-02  Out_of_Range  1436.71    1209
5×4 DataFrame
 Row │ date        cat           cal        min
     │ Date…       String        Float64    Int64
─────┼────────────────────────────────────────────
   1 │ 2021-02-27  Peak            43.3267      4
   2 │ 2021-02-28  Out_of_Range  1571.49     1374
   3 │ 2021-02-28  Fat_Burn        41.3578     20
   4 │ 2021-02-28  Cardio           0.0         0
   5 │ 2021-02-28  Peak             0.0         0
</pre>

<p>
head -&gt; first<br  />
tail -&gt; last   のようだ.<br  />
つーか何で method 名変えるかなぁ&#x2026;<br  />
前は head, tail で行けた筈なんだけど&#x2026;<br  />
</p>

<p>
取得列は select=[1,2,4] のようにするようだ.<br  />
Julia は R と同じで配列添字は 1 から始まる(1-based).<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame)
<span class="linenr">3: </span>print(first(df,5))    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head &#12398;&#20195;&#12431;&#12426;</span>
<span class="linenr">4: </span>print(last(df,5))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tail &#12398;&#20195;&#12431;&#12426;</span>
</pre>
</div>

<pre class="example">
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   12095×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-27  Peak              4
   2 │ 2021-02-28  Out_of_Range   1374
   3 │ 2021-02-28  Fat_Burn         20
   4 │ 2021-02-28  Cardio            0
   5 │ 2021-02-28  Peak              0
</pre>

<p>
<a href="https://towardsdatascience.com/read-csv-to-data-frame-in-julia-programming-lang-77f3d0081c14">Read CSV to Data Frame in Julia. Parameters explained. Using CSV.jl… | by Vaclav Dekanovsky | Towards Data Science</a><br  />
によると, CSV ファイルを読んで DataFrame にする方法は 3 つある.<br  />
まず最初はこれ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = DataFrame(CSV.File(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4]))
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>

<p>
次はこれ. |&gt; はパイプ演算子.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.File(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4]) |&gt; DataFrame
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>

<p>
3 つめが上で使ってるやつ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>, DataFrame; delim=<span style="color: #ffa07a;">"\t"</span>,select=[1,2,4])
<span class="linenr">3: </span>println(typeof(df))
<span class="linenr">4: </span>println(first(df,5))
</pre>
</div>

<pre class="example">
DataFrame
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-01  Fat_Burn         93
   3 │ 2021-02-01  Cardio           15
   4 │ 2021-02-01  Peak              0
   5 │ 2021-02-02  Out_of_Range   1209
</pre>


<p>
データ取り出すとこやってみる.<br  />
cat ＝＝ 'Out_of_Range' のデータ取り出し.<br  />
注意点: Julia は ' (シングルクォーテーション) と " (ダブル)を区別する. " (ダブル)じゃないとダメみたいだ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame)
<span class="linenr">3: </span>dfo = df[df.cat .== <span style="color: #ffa07a;">"Out_of_Range"</span>, :]
<span class="linenr">4: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×3 DataFrame
 Row │ date        cat           min
     │ Date…       String        Int64
─────┼─────────────────────────────────
   1 │ 2021-02-01  Out_of_Range   1298
   2 │ 2021-02-02  Out_of_Range   1209
   3 │ 2021-02-03  Out_of_Range   1205
   4 │ 2021-02-04  Out_of_Range   1255
   5 │ 2021-02-05  Out_of_Range   1289
</pre>

<p>
df.列名 で列名を持つ列のデータを全て取り出す.<br  />
ここでは, プログラム 3 行目の df.cat で cat 列のデータを全て取り出している.<br  />
cat 列のデータが "Out_of_Range" である行を全て取り出す.<br  />
比較演算子には .(dot) が必要<br  />
df.cat .＝＝ "Out_of_Range"    &lt;&#x2013; こんな風に書く必要がある.<br  />
数値であれば不等号も使えるがそれにも .(ドット)が必要である.<br  />
df.min .&gt; 500 とか.<br  />
抽出する列が全部であれば : を使う.<br  />
cat 列が要らないのであれば : の代わりに ["date","min"] とかにすればいい.<br  />
df[df.cat .=="Out_of_Range", :]  &#x2013;&gt; df[df.cat .== "Out_of_Range",["date","min"]] こんな感じ.<br  />
</p>

<p>
index (列番号) でやるにはどうするんだろう.<br  />
以下の 3 行目で, 1, 3 列のみ抽出してみる(Julia は R と同様, 配列等は 1-based).<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">3: </span>dfo = df[df[:,2] .== <span style="color: #ffa07a;">"Out_of_Range"</span>, [1,3]];
<span class="linenr">4: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        min
     │ Date…       Int64
─────┼───────────────────
   1 │ 2021-02-01   1298
   2 │ 2021-02-02   1209
   3 │ 2021-02-03   1205
   4 │ 2021-02-04   1255
   5 │ 2021-02-05   1289
</pre>

<p>
できた.<br  />
df[df[:,2] == "Out_of_Range", [1,3]]  # df の 2 列目が "Out_of_Range" の 1,3 列目だけとってくる.<br  />
</p>

<p>
列の取得方法のいろいろ:<br  />
  df.列名<br  />
  df[!, :列名]          :列名  は Symbol としての列名のようだ.<br  />
  df[!, Symbol("列名")]<br  />
  df[:, Symbol("列名")]<br  />
  df[!,列index(1-based)]<br  />
  df[:,列index(1-based)]<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/Y0KUDA/items/3d3342ef08b28d5cda71">JuliaでCSV / DataFrameを扱う方法 - Qiita</a><br  />
<a href="https://zenn.dev/takilog/articles/393b0d3b7dd5601c50c1">DataFrames.jl Getting Startedの要点 (2021年3月版)</a><br  />
</p>

<p>
! と : は何が違うんだろうか.<br  />
<a href="https://zenn.dev/takilog/articles/393b0d3b7dd5601c50c1">DataFrames.jl Getting Startedの要点 (2021年3月版)</a><br  />
によると, コピーを作るかどうかのようだ.<br  />
代入するときに結果が変わる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>df[:, <span style="color: #6495ed;">:A</span>][1] = 3   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20195;&#20837;</span>
<span class="linenr">2: </span>print(df)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#12431;&#12425;&#12394;&#12356;</span>
<span class="linenr">3: </span>
<span class="linenr">4: </span>df[!,<span style="color: #6495ed;">:A</span>][1] = 3
<span class="linenr">5: </span>print(df)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#12431;&#12427;</span>
</pre>
</div>

<p>
次は列名の変更.<br  />
</p>

<p>
参考:<br  />
<a href="https://discourse.julialang.org/t/change-column-names-of-a-dataframe-previous-methods-dont-work/48026">Change Column Names of a DataFrame - Previous methods don't work - Usage / First steps - JuliaLang</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">3: </span>dfo = df[df[:,2] .== <span style="color: #ffa07a;">"Out_of_Range"</span>, [1,3]];
<span class="linenr">4: </span>rename!(dfo, <span style="color: #6495ed;">:min</span> =&gt; <span style="color: #6495ed;">:Out_of_Range</span>)
<span class="linenr">5: </span>print(first(dfo,5))
</pre>
</div>

<p>
プログラム 4 行目で列名の変更を行っている. min -&gt; Out_of_Range に変更.<br  />
! がついている関数は破壊的処理をするってどこかに書いてあったような.<br  />
ここでは DataFrame dfo の内容が破壊的に変わる(列の名前が変更される).<br  />
</p>

<p>
後々のことを考えて, Out_of_Range の部分を変数にしたいのだが&#x2026;<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>cat = <span style="color: #ffa07a;">"Out_of_Range"</span>
<span class="linenr">3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr">4: </span>dfo = df[df[:,2] .== cat, [1,3]];
<span class="linenr">5: </span>rename!(dfo, <span style="color: #6495ed;">:min</span> =&gt; cat)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&lt;-- &#12371;&#12371;</span>
<span class="linenr">6: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        Out_of_Range
     │ Date…       Int64
─────┼──────────────────────────
   1 │ 2021-02-01          1298
   2 │ 2021-02-02          1209
   3 │ 2021-02-03          1205
   4 │ 2021-02-04          1255
   5 │ 2021-02-05          1289
</pre>

<p>
普通に rename!(dfo, :min =&gt; 変数) でよかった.<br  />
じゃこれでもいいってことかな.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr">2: </span>cat = <span style="color: #ffa07a;">"Out_of_Range"</span>
<span class="linenr">3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4],DataFrame);
<span class="linenr">4: </span>dfo = df[df[:,2] .== cat, [1,3]];
<span class="linenr">5: </span>rename!(dfo, <span style="color: #ffa07a;">"min"</span> =&gt; cat)
<span class="linenr">6: </span>print(first(dfo,5))
</pre>
</div>

<pre class="example">
5×2 DataFrame
 Row │ date        Out_of_Range
     │ Date…       Int64
─────┼──────────────────────────
   1 │ 2021-02-01          1298
   2 │ 2021-02-02          1209
   3 │ 2021-02-03          1205
   4 │ 2021-02-04          1255
   5 │ 2021-02-05          1289
</pre>

<p>
rename!(dfo, "min" =&gt; 変数) で問題なかった.<br  />
</p>

<p>
データの結合<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr"> 3: </span>adf =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>    dfo = df[df[:,2] .== cat, [1,3]]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">df &#12398; 2 &#21015;&#30446;&#12398;&#20516;&#12364; cat &#12398;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;. [1,3] &#21015;&#30446;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr"> 6: </span>    rename!(dfo,<span style="color: #ffa07a;">"min"</span> =&gt; cat)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo &#12398; min &#21015;&#12398;&#21517;&#21069;&#12434; cat &#12395;&#22793;&#26356;. dfo &#12434;&#22793;&#26356;&#12377;&#12427;.</span>
<span class="linenr"> 7: </span>    push!(adf,dfo)
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 9: </span>ddf = outerjoin(adf[1], adf[2],  adf[3], adf[4], on = <span style="color: #6495ed;">:date</span>);  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">4 &#12388;&#12375;&#12363;&#28961;&#12356;&#12398;&#12391;&#12505;&#12479;&#26360;&#12365;</span>
<span class="linenr">10: </span>println(first(ddf,5))
</pre>
</div>

<pre class="example">
5×5 DataFrame
 Row │ date        Out_of_Range  Fat_Burn  Cardio  Peak
     │ Date…       Int64?        Int64?    Int64?  Int64?
─────┼────────────────────────────────────────────────────
   1 │ 2021-02-01          1298        93      15       0
   2 │ 2021-02-02          1209        90      22       1
   3 │ 2021-02-03          1205       162      14       0
   4 │ 2021-02-04          1255       134       5       2
   5 │ 2021-02-05          1289       114       6       0
</pre>

<p>
プログラム 3-8 行目<br  />
DataFrame の配列 adf を作る. Python では append だが julia では push! (! は破壊的メソッドの意味らしい).<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/ttabata/items/7528863ccbb282e8260d">Julia早引きノート［14］リスト(Array型一次元配列) - Qiita</a><br  />
</p>

<p>
プログラム 9 行目. date の値で表を merge.<br  />
pandas では merge.<br  />
julia では join.<br  />
innerjoin, leftjoin 等あるけど, ここでは outerjoin を使った.<br  />
２つだけじゃなくて何個でも行ける.<br  />
</p>

<p>
参考:<br  />
<a href="https://dataframes.juliadata.org/stable/man/joins/">Joins · DataFrames.jl</a><br  />
</p>

<p>
この DataFrame を CSV.write で保存してとりあえずこの部分は終わりとしよう.<br  />
</p>

<p>
参考:<br  />
<a href="https://csv.juliadata.org/stable/#CSV.write">CSV.jl Documentation · CSV.jl</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, select=[1,2,4], DataFrame);
<span class="linenr"> 3: </span>adf =[]
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">for</span> cat <span style="color: #20b2aa; font-weight: bold;">in</span> (<span style="color: #ffa07a;">"Out_of_Range"</span>,<span style="color: #ffa07a;">"Fat_Burn"</span>,<span style="color: #ffa07a;">"Cardio"</span>,<span style="color: #ffa07a;">"Peak"</span>)
<span class="linenr"> 5: </span>    dfo = df[df[:,2] .== cat, [1,3]]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">df &#12398; 2 &#21015;&#30446;&#12398;&#20516;&#12364; cat &#12398;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;. [1,3] &#21015;&#30446;&#12384;&#12369;&#21462;&#12426;&#20986;&#12377;.</span>
<span class="linenr"> 6: </span>    rename!(dfo,<span style="color: #ffa07a;">"min"</span> =&gt; cat)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfo &#12398; min &#21015;&#12398;&#21517;&#21069;&#12434; cat &#12395;&#22793;&#26356;. dfo &#12434;&#22793;&#26356;&#12377;&#12427;.</span>
<span class="linenr"> 7: </span>    push!(adf,dfo)
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 9: </span>ddf = outerjoin(adf[1], adf[2],  adf[3], adf[4], on = <span style="color: #6495ed;">:date</span>);
<span class="linenr">10: </span>CSV.write(<span style="color: #ffa07a;">"data/j.csv"</span>,ddf, delim=<span style="color: #ffa07a;">","</span>)
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> グラフ化</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> R</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> ggplot2(基礎)</h3>
<div class="outline-text-3" id="text-4-2">
<p>
ggplot2 によるグラフ作成のテンプレートはこんな感じ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(ggplot2)
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#12434;&#12388;&#12367;&#12427;</span>
<span class="linenr"> 4: </span>X <span style="color: #1e90ff;">&lt;-</span> seq(-4,4, length=100)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">-4 &#12363;&#12425; 4 &#12414;&#12391;. 100 &#20998;&#21106;&#12375;&#12383;&#12505;&#12463;&#12488;&#12523;&#12434;&#20316;&#25104;</span>
<span class="linenr"> 5: </span>Y <span style="color: #1e90ff;">&lt;-</span> dnorm(x=X, mean=0, sd=1) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">y &#12392;&#12375;&#12390;&#12460;&#12454;&#12473;&#38306;&#25968;</span>
<span class="linenr"> 6: </span>df <span style="color: #1e90ff;">&lt;-</span> data.frame(xf=X,yf=Y)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">ggplot2 &#12399; dataframe &#12434;&#35501;&#12415;&#36796;&#12416;</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=xf,y=yf))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">x,y &#12399;&#22266;&#23450;</span>
<span class="linenr"> 9: </span>plot(p)
<span class="linenr">10: </span>fname <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'images/r0.png'</span>
<span class="linenr">11: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r0.png" alt="DataFrame2021-r0.png" /><br  />
</p>
</div>

<p>
時系列データの取り扱い<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">test.data &#12395;&#12399;&#26085;&#20184;(date)&#12392;&#26178;&#21051;(time 09:03:02) &#21015;&#12364;&#12354;&#12427;&#12392;&#12377;&#12427;.</span>
<span class="linenr">2: </span>d <span style="color: #1e90ff;">&lt;-</span> read.table(<span style="color: #ffa07a;">'test.data'</span>, sep=<span style="color: #ffa07a;">'\t'</span>, header=<span style="color: #9370db;">TRUE</span>)
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">datetime &#12392;&#12356;&#12358;&#26032;&#12375;&#12356;&#21015;&#12434;&#12388;&#12367;&#12427;&#12392;&#12365;.</span>
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">datetime &#21015;&#12399; "date time" &#12392;&#12377;&#12427;</span>
<span class="linenr">5: </span>d$datetime <span style="color: #1e90ff;">&lt;-</span> paste(d$date, d$time, sep=<span style="color: #ffa07a;">' '</span>)
<span class="linenr">6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">POSIX &#24418;&#24335;&#12395;&#22793;&#25563;</span>
<span class="linenr">7: </span>d$datetime <span style="color: #1e90ff;">&lt;-</span> as.POSIXct(d$datetime)
<span class="linenr">8: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=d) + geom_lines(mapping=aes(x=datetime, y=Y))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> ggplot2 による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-3">
<p>
tidyverse を使うと, 日付っぽい部分が勝手に日付オブジェクトとなるので自動でいい感じのグラフが描ける.<br  />
Out_of_Range 列のデータのみのグラフを描いてみる<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range))
<span class="linenr">4: </span>plot(p)
<span class="linenr">5: </span>fname = <span style="color: #ffa07a;">'images/r01.png'</span>
<span class="linenr">6: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r01.png" alt="DataFrame2021-r01.png" /><br  />
</p>
</div>

<p>
プレーンな dataframe を使う場合は, 日付部分を POSIXct クラスに変更する.<br  />
3 行目でやってる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(ggplot2)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read.csv(file=<span style="color: #ffa07a;">'data/r.csv'</span>,header=<span style="color: #9370db;">TRUE</span>)
<span class="linenr">3: </span>df$date <span style="color: #1e90ff;">&lt;-</span> as.POSIXct(df$date)
<span class="linenr">4: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range))
<span class="linenr">5: </span>plot(p)
<span class="linenr">6: </span>fname = <span style="color: #ffa07a;">'images/r03.png'</span>
<span class="linenr">7: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r03.png" alt="DataFrame2021-r03.png" /><br  />
</p>
</div>

<p>
同じ図が描けた.<br  />
</p>

<p>
一枚のグラフに複数のデータを載せる場合.<br  />
Out_of_Range 列と Fat_Burn 列を描く.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range), color=<span style="color: #ffa07a;">"blue"</span>)
<span class="linenr">4: </span>p <span style="color: #1e90ff;">&lt;-</span> p + geom_line(mapping=aes(x=date,y=Fat_Burn),color=<span style="color: #ffa07a;">"orange"</span>) + ylab(<span style="color: #ffa07a;">"min"</span>)
<span class="linenr">5: </span>plot(p)
<span class="linenr">6: </span>fname = <span style="color: #ffa07a;">'images/r04.png'</span>
<span class="linenr">7: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r04.png" alt="DataFrame2021-r04.png" /><br  />
</p>
</div>

<p>
R の場合は色々処理する前のデータでそのまま描ける.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>head(df0)
</pre>
</div>

<pre class="example">
# A tibble: 6 x 4
  date       cat            cal   min
  &lt;date&gt;     &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt;
1 2021-02-01 Out_of_Range 1549.  1298
2 2021-02-01 Fat_Burn      350.    93
3 2021-02-01 Cardio        108.    15
4 2021-02-01 Peak            0      0
5 2021-02-02 Out_of_Range 1437.  1209
6 2021-02-02 Fat_Burn      438.    90
</pre>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr">2: </span>df0 <span style="color: #1e90ff;">&lt;-</span> read_tsv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>)
<span class="linenr">3: </span>p <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df0) + geom_line(mapping=aes(x=date,y=min,color=cat))
<span class="linenr">4: </span>plot(p)
<span class="linenr">5: </span>fname = <span style="color: #ffa07a;">'images/r05.png'</span>
<span class="linenr">6: </span>ggsave(p,file=fname, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r05.png" alt="DataFrame2021-r05.png" /><br  />
</p>
</div>

<p>
複数のグラフを描く場合<br  />
gridExtra を使おう.<br  />
</p>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #1e90ff;">library</span>(tidyverse)
<span class="linenr"> 2: </span><span style="color: #1e90ff;">library</span>(gridExtra)
<span class="linenr"> 3: </span>df <span style="color: #1e90ff;">&lt;-</span> read_csv(<span style="color: #ffa07a;">"data/rv.csv"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20316;&#25104;&#12375;&#12383;&#12418;&#12398;</span>
<span class="linenr"> 4: </span>p1 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Out_of_Range), color=<span style="color: #ffa07a;">"blue"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 5: </span>p2 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Fat_Burn),     color=<span style="color: #ffa07a;">"orange"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 6: </span>p3 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Cardio),       color=<span style="color: #ffa07a;">"magenta"</span>) + xlab(<span style="color: #ffa07a;">""</span>)
<span class="linenr"> 7: </span>p4 <span style="color: #1e90ff;">&lt;-</span> ggplot(data=df) + geom_line(mapping=aes(x=date,y=Peak),         color=<span style="color: #ffa07a;">"cyan"</span>)
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">grid.arrange(p1,p2,p3,p4,nrow=4)  # 4 &#12388;&#32294;&#12395;&#20006;&#12409;&#12427;</span>
<span class="linenr"> 9: </span>h <span style="color: #1e90ff;">&lt;-</span> arrangeGrob(p1,p2,p3,p4,nrow=4)
<span class="linenr">10: </span>fname = <span style="color: #ffa07a;">'images/r06.png'</span>
<span class="linenr">11: </span>ggsave(h,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-r06.png" alt="DataFrame2021-r06.png" /><br  />
</p>
</div>

<p>
プログラム 4 - 6 行目 xlab("") で x 軸のタイトル "date" を書かない.<br  />
プログラム 9 行目 arrangeGrob(p1, p2, p3, p4, nrow=4) nrow=4 で 4 つ縦に並べる.<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> Python</h3>
<div class="outline-text-3" id="text-4-4">
</div><div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5"><span class="section-number-3">4.5</span> matplotlib(基礎)</h3>
<div class="outline-text-3" id="text-4-5">
<p>
matplotlib によるグラフ作成のテンプレートはこんな感じ.<br  />
常にオブジェクト指向的に書くのがわかりやすいのでは.<br  />
  plt class -&gt; figure object を作成 (figure) -&gt; axes object を作成 (add_subplot)-&gt; axes object が一つのグラフを作成<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> numpy <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#20316;&#25104;&#20363;</span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">x</span> = np.linspace(-4,4, 100)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">-4 &#12363;&#12425; 4 &#12414;&#12391; 100 &#20998;&#21106;</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12460;&#12454;&#12473;&#38306;&#25968; &#12356;&#12385;&#12356;&#12385;&#23450;&#32681;&#12377;&#12427;&#24517;&#35201;&#12354;&#12427;&#12398;&#12363;... &#38754;&#20498;&#12384;&#12394;&#12353;.</span>
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">def</span> <span style="color: #00ff7f;">gauss</span>(x,mu,sig):
<span class="linenr"> 7: </span>   <span style="color: #20b2aa; font-weight: bold;">return</span> np.exp(-np.power(x -mu, 2.0)/ (2*np.power(sig,2)))
<span class="linenr"> 8: </span><span style="color: #9acd32;">y</span> = gauss(x,0,1)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#20316;&#25104;&#20363;&#12371;&#12371;&#12414;&#12391;</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12371;&#12363;&#12425;&#12464;&#12521;&#12501;&#20316;&#25104;</span>
<span class="linenr">11: </span><span style="color: #9acd32;">fig</span> = plt.figure()            <span style="color: #cd853f;"># </span><span style="color: #cd853f;">plt &#12463;&#12521;&#12473;&#12363;&#12425; figure object</span>
<span class="linenr">12: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;&#12398;&#12464;&#12521;&#12501; = 1 &#26522;&#12398;&#12464;&#12521;&#12501;&#12434;&#20840;&#20307;&#12395;&#25551;&#12367;)</span>
<span class="linenr">13: </span>ax.plot(x,y)                  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">axes object &#12364;&#19968;&#12388;&#12398;&#12464;&#12521;&#12501;&#12434;&#25551;&#30011;&#12377;&#12427;</span>
<span class="linenr">14: </span>fig.show()
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12464;&#12521;&#12501;&#12398;&#20445;&#23384;</span>
<span class="linenr">16: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p00.png'</span>
<span class="linenr">17: </span>fig.savefig(fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>, dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p00.png" alt="DataFrame2021-p00.png" /><br  />
</p>
</div>

<p>
時系列グラフでは x 軸が日付・時間であることが多いだろう.<br  />
軸目盛の設定(locator, formatter)を軸に対して行う.<br  />
</p>

<p>
参考:<br  />
<a href="https://bunsekikobako.com/setting_ticks_by_matplotlib_dates/">matplotlib.datesで時系列データのグラフの軸目盛の設定をする | 分析小箱</a><br  />
<a href="https://qiita.com/yoinhu/items/e0039309a47c75dade05">時系列データの可視化：datetime型のx軸操作 - Qiita</a><br  />
<a href="https://www.delftstack.com/ja/howto/matplotlib/how-to-rotate-x-axis-tick-label-text-in-matplotlib/">Matplotlib で X 軸の目盛りラベルテキストを回転させる方法 | Delft スタック</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30446;&#30427;&#12398;&#25351;&#23450;</span>
<span class="linenr"> 3: </span><span style="color: #9acd32;">xloc</span> = mdates.HourLocator(byhour=<span style="color: #76ee00;">range</span>(0,24,4))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0-24&#26178;&#38291; &#12414;&#12391;, 4 &#26178;&#38291;&#12362;&#12365;&#12395;&#30446;&#30427;</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax &#12399;&#20316;&#25104;&#12373;&#12428;&#12383; axes object</span>
<span class="linenr"> 5: </span>ax.xaxis.set_major_locator(xloc)                 <span style="color: #cd853f;"># </span><span style="color: #cd853f;">minor_locator &#12418;&#12354;&#12427;(&#35036;&#21161;&#30446;&#30427;)</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#36600;&#12398;&#25991;&#23383;&#21015; format &#12398;&#25351;&#23450;</span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%H:%M"</span>) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30446;&#30427;&#12398;&#26360;&#12363;&#12379;&#26041;. &#12371;&#12371;&#12391;&#12399; 00:00 &#24418;&#24335;&#12391;</span>
<span class="linenr"> 8: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#36600;&#12398;&#25991;&#23383;&#21015;&#12434;&#26012;&#12417;&#12395;&#26360;&#12367;&#12392;&#12365;</span>
<span class="linenr">10: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">11: </span>plt.setp(labels, rotation=45, fontsize=10)
</pre>
</div>

<p>
その他の設定事項<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> calendar
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax &#12399;&#20316;&#25104;&#12373;&#12428;&#12383; axes object</span>
<span class="linenr"> 3: </span>ax.set_title(<span style="color: #ffa07a;">'heart beats summary'</span>)
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span>ax.set_xlabel(<span style="color: #ffa07a;">'Date'</span>)
<span class="linenr"> 6: </span>ax.set_ylabel(<span style="color: #ffa07a;">'heart_beat'</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #9acd32;">dlst</span> = calendar.monthrange(2021,4)[1]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26376;&#26411;&#26085;</span>
<span class="linenr"> 9: </span>ax.set_xlim(dt.datetime(2021,4,1), dt.datetime(2021,4,dlst))
<span class="linenr">10: </span><span style="color: #9acd32;">ylim</span> = (50,200)
<span class="linenr">11: </span>ax.set_ylim(*ylim)
</pre>
</div>

<p>
グラフ作成<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#31309;&#12415;&#19978;&#12370;&#26834;&#12464;&#12521;&#12501;&#12394;&#12425;</span>
<span class="linenr">2: </span>ax.bar(df.date, df.Out_of_Range)
<span class="linenr">3: </span>ax.bar(df.date, df.Fat_Burn, bottom=df.Out_of_Range,color=<span style="color: #ffa07a;">'green'</span>)
<span class="linenr">4: </span>ax.bar(df.date, df.Cardio, bottom=df.Out_of_Range+df.Fat_Burn,color=<span style="color: #ffa07a;">'orange'</span>)
<span class="linenr">5: </span>ax.bar(df.date, df.Peak, bottom=df.Out_of_Range+df.Fat_Burn+df.Cardio,color=<span style="color: #ffa07a;">'red'</span>)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25551;&#30011;</span>
<span class="linenr">2: </span>fig.show()
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20445;&#23384;</span>
<span class="linenr">4: </span>fig.save(<span style="color: #ffa07a;">"output.png"</span>, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">"png"</span>, dpi=70)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6"><span class="section-number-3">4.6</span> matplotlib による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-6">
<p>
pandas でデータを dataframe に格納し, plt -&gt; fig -&gt; ax object を使って図を描画する.<br  />
典型的な一連の流れ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(4,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p01.png'</span>
<span class="linenr">12: </span>fig.show()
<span class="linenr">13: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p01.png" alt="DataFrame2021-p01.png" /><br  />
</p>
</div>

<p>
横軸の文字が重なってよくわからん状態になっている. 何とかしないと.<br  />
locator, formatter を修正する.<br  />
DayLocator, DateFormatter を使う.<br  />
</p>

<p>
参考:<br  />
<a href="https://bunsekikobako.com/setting_ticks_by_matplotlib_dates/">matplotlib.datesで時系列データのグラフの軸目盛の設定をする | 分析小箱</a><br  />
<a href="https://qiita.com/jeta_taka/items/9e6b8c7c0fe1a86e2ae9">時系列プロットはじめました〜python編〜 - Qiita</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">12: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">13: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">14: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">15: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">17: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">18: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">19: </span>
<span class="linenr">20: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p02.png'</span>
<span class="linenr">21: </span>fig.show()
<span class="linenr">22: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p02.png" alt="DataFrame2021-p02.png" /><br  />
</p>
</div>

<p>
横軸文字列はみ出してるんだけど.<br  />
plt.tight_layout() とすると自動で調整してくれるようだ. これは便利.<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/Tatejimaru137/items/4ee6a73114d07d85bfd7">matplotlibでグラフの文字サイズを大きくする - Qiita</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">12: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">13: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">14: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">15: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">17: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">18: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">20: </span>plt.tight_layout()
<span class="linenr">21: </span>
<span class="linenr">22: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p03.png'</span>
<span class="linenr">23: </span>fig.show()
<span class="linenr">24: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p03.png" alt="DataFrame2021-p03.png" /><br  />
</p>
</div>

<p>
一つのグラフに複数のグラフを描く場合<br  />
</p>

<p>
参考:<br  />
<a href="https://qiita.com/Tatejimaru137/items/4ee6a73114d07d85bfd7">matplotlibでグラフの文字サイズを大きくする - Qiita</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(5,3))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = fig.add_subplot(1,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (1 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">'out_of_range'</span>)
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12381;&#12398;&#12414;&#12414;&#26360;&#12356;&#12390;&#12369;&#12400;&#12356;&#12356;</span>
<span class="linenr">11: </span>ax.plot(df.date, df.Fat_Burn, label=<span style="color: #ffa07a;">'fat_burn'</span>)
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20961;&#20363;&#12364;&#24517;&#35201;&#12363;&#65311;</span>
<span class="linenr">13: </span>ax.legend(fontsize=10)
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">16: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">17: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">18: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">19: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">20: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">21: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">22: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">24: </span>plt.tight_layout()
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p04.png'</span>
<span class="linenr">27: </span>fig.show()
<span class="linenr">28: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p04.png" alt="DataFrame2021-p04.png" /><br  />
</p>
</div>

<p>
複数のグラフを揃えて描く場合<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'data/h.csv'</span>,parse_dates=[0])
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #9acd32;">fig</span> = plt.figure(dpi=100, figsize=(3,5))
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax1</span> = fig.add_subplot(2,1,1)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">figure &#12363;&#12425; axes object (2 &#34892; 1 &#21015;&#12398; 1 &#30058;&#30446;)</span>
<span class="linenr"> 9: </span>ax1.plot(df.date, df.Out_of_Range)
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20108;&#12388;&#30446;&#12398;&#12464;&#12521;&#12501;</span>
<span class="linenr">11: </span><span style="color: #9acd32;">ax2</span> = fig.add_subplot(2,1,2, sharex=ax1) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892; 1 &#21015;&#12398; 2 &#30058;&#30446;, ax1 &#12398; x &#36600;&#12434;&#20849;&#26377;&#12377;&#12427;</span>
<span class="linenr">12: </span>ax2.plot(df.date, df.Fat_Burn, color=<span style="color: #ffa07a;">"green"</span>, marker=<span style="color: #ffa07a;">'.'</span>) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#12395; . &#12388;&#12365;&#12398;&#12464;&#12521;&#12501;&#12395;&#12375;&#12390;&#12415;&#12427;</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19968;&#12388;&#30446;&#12398;&#12464;&#12521;&#12501;&#12398; x &#36600;&#12521;&#12505;&#12523;&#12399;&#35201;&#12425;&#12394;&#12356;</span>
<span class="linenr">15: </span>ax1.tick_params(labelbottom=<span style="color: #1e90ff;">False</span>)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#36600;&#12399;&#26178;&#31995;&#21015;</span>
<span class="linenr">18: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr">19: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">20: </span>ax2.xaxis.set_major_locator(xloc)
<span class="linenr">21: </span>ax2.xaxis.set_major_formatter(xfmt)
<span class="linenr">22: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr">23: </span><span style="color: #9acd32;">labels</span> = ax2.get_xticklabels()
<span class="linenr">24: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">title</span>
<span class="linenr">27: </span>ax1.set_title(<span style="color: #ffa07a;">'out_of_range'</span>,fontsize=10)
<span class="linenr">28: </span>ax2.set_title(<span style="color: #ffa07a;">'fat_burn'</span>, fontsize=10)
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#32622;&#12434;&#12356;&#12356;&#24863;&#12376;&#12395;&#12377;&#12427;</span>
<span class="linenr">31: </span>plt.tight_layout()
<span class="linenr">32: </span>
<span class="linenr">33: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p05.png'</span>
<span class="linenr">34: </span>fig.show()
<span class="linenr">35: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p05.png" alt="DataFrame2021-p05.png" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-7" class="outline-3">
<h3 id="sec-4-7"><span class="section-number-3">4.7</span> plotline による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-7">
<p>
Python での描画と言えば matplotlib だが,<br  />
ggplot2 のように, データ加工前の元々のデータでグラフを描けないんかなぁ. と思ったりもする.<br  />
元々のデータ構造はこんな感じなんだけど.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
</pre>
</div>

<pre class="example">
        date           cat   min
0 2021-02-01  Out_of_Range  1298
1 2021-02-01      Fat_Burn    93
2 2021-02-01        Cardio    15
3 2021-02-01          Peak     0
4 2021-02-02  Out_of_Range  1209
</pre>

<p>
このデータを読み込んで cat ごとに色を変えてグラフを描きたい.<br  />
</p>

<p>
参考:<br  />
<a href="https://stackoverflow.com/questions/41494942/pandas-dataframe-groupby-plot">https://stackoverflow.com/questions/41494942/pandas-dataframe-groupby-plot</a><br  />
<a href="https://scentellegher.github.io/programming/2017/07/15/pandas-groupby-multiple-columns-plot.html">https://scentellegher.github.io/programming/2017/07/15/pandas-groupby-multiple-columns-plot.html</a><br  />
</p>

<p>
上の URL を見てみたが, うーん何かめんどくさそう.<br  />
更に調べてたら ggplot2 とほぼ同様の書き方でいける plotline というパッケージがあるのを見つけた.<br  />
これを使ったほうがいいかな？<br  />
</p>

<p>
<a href="https://anaconda.org/conda-forge/plotnine">Plotnine :: Anaconda.org</a><br  />
</p>

<p>
入ってなかったのでインストールする.<br  />
こんな風にインストールできるようだ:<br  />
  shell@: conda install -c conda_forge plotnine<br  />
</p>

<p>
早速これでグラフを作ってみる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span>
<span class="linenr">5: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = ggplot() + geom_line(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>, y=<span style="color: #ffa07a;">'min'</span>, color=<span style="color: #ffa07a;">'cat'</span>))
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/p06.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-p06.png" alt="DataFrame2021-p06.png" /><br  />
</p>
</div>

<p>
ggplot2 と同じじゃん&#x2026;<br  />
ggplot2 に慣れてるなら結構いいかも？<br  />
</p>

<p>
参考:<br  />
<a href="https://ichi.pro/python-no-de-ta-shikakuka-pakke-ji-no-daitai-toshite-no-plotnine-no-shokai-76970624743422">Pythonのデータ視覚化パッケージの代替としてのPlotnineの紹介</a><br  />
<a href="https://plotnine.readthedocs.io/en/stable/index.html">A Grammar of Graphics for Python — plotnine 0.8.0 documentation</a><br  />
</p>

<p>
date の label を 45°回転<br  />
<a href="https://stackoverflow.com/questions/47714540/plotnine-rotating-labels">python - Plotnine rotating labels - Stack Overflow</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave, theme, element_text
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">5: </span><span style="color: #9acd32;">p</span> = ggplot() + geom_line(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>, y=<span style="color: #ffa07a;">'min'</span>, color=<span style="color: #ffa07a;">'cat'</span>))
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = p + theme(axis_text_x = element_text(rotation=45, hjust=1))
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/py07.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-py07.png" alt="DataFrame2021-py07.png" /><br  />
</p>
</div>

<p>
独立に図を描く<br  />
facet_wrap('~cat', nrow=4) # 'cat' ごとに 4 行のグラフを描く.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">from</span> plotnine <span style="color: #20b2aa; font-weight: bold;">import</span> ggplot, geom_line, aes, ggsave, theme, element_text, facet_wrap
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> plotnine
<span class="linenr">4: </span><span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=0, parse_dates=[0], usecols=[0,1,3])
<span class="linenr">5: </span><span style="color: #9acd32;">p</span> = ggplot(data=df, mapping=aes(x=<span style="color: #ffa07a;">'date'</span>,y=<span style="color: #ffa07a;">'min'</span>,color=<span style="color: #ffa07a;">'cat'</span>)) + geom_line()
<span class="linenr">6: </span><span style="color: #9acd32;">p</span> = p + theme(axis_text_x = element_text(rotation=45, hjust=1)) + facet_wrap(<span style="color: #ffa07a;">'~cat'</span>,nrow=4)
<span class="linenr">7: </span><span style="color: #9acd32;">fname</span> = <span style="color: #ffa07a;">'images/py08.png'</span>
<span class="linenr">8: </span>ggsave(p,filename=fname, <span style="color: #76ee00;">format</span>=<span style="color: #ffa07a;">'png'</span>,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-py08.png" alt="DataFrame2021-py08.png" /><br  />
</p>
</div>

<p>
割と素晴らしいかも.<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-8" class="outline-3">
<h3 id="sec-4-8"><span class="section-number-3">4.8</span> Julia</h3>
<div class="outline-text-3" id="text-4-8">
</div><div id="outline-container-sec-4-9" class="outline-3">
<h3 id="sec-4-9"><span class="section-number-3">4.9</span> PyPlot(基礎)</h3>
<div class="outline-text-3" id="text-4-9">
<p>
PyPlot は, Matplotlib と同様の書き方が出来る. 標準の Plots よりも良いらしい？<br  />
</p>

<p>
参考:<br  />
<a href="https://www.eureka-moments-blog.com/entry/2020/09/06/102455">JuliaとMatplotlibでグラフを作る際のハマりポイントとサンプルプログラム集 - EurekaMoments</a><br  />
<a href="https://qiita.com/ttabata/items/96a0e172addfac690cca">Julia早引きノート［23］JuliaでのMatplotlibによるグラフ描画 - Qiita</a>  &#x2013;&gt; matplotlib でも使えるよく使うパラメータ<br  />
</p>

<p>
テンプレートはこんな感じか<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> PyPlot
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12480;&#12511;&#12540;&#12487;&#12540;&#12479;</span>
<span class="linenr"> 4: </span>x = range(0,2&#960;, step=0.1)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#12363;&#12425; 2&#960; &#12414;&#12391; 0.1&#21051;&#12415;&#12391;&#12505;&#12463;&#12488;&#12523;&#12487;&#12540;&#12479;&#12434;&#20316;&#25104;</span>
<span class="linenr"> 5: </span>y = []
<span class="linenr"> 6: </span>z = []
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">sin &#12392; cos &#12395;&#12377;&#12427;.</span>
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> x
<span class="linenr"> 9: </span>    push!(y,sin(i))
<span class="linenr">10: </span>    push!(z,cos(i))
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">matplotlib &#12392;&#21516;&#27096;&#12395;&#26360;&#12369;&#12427;&#65281;&#65281;</span>
<span class="linenr">14: </span>fig = figure()
<span class="linenr">15: </span>ax1 = fig.add_subplot(2,1,1)
<span class="linenr">16: </span>ax1.plot(x,y)
<span class="linenr">17: </span>
<span class="linenr">18: </span>ax2 = fig.add_subplot(2,1,2)
<span class="linenr">19: </span>ax2.plot(x,z)
<span class="linenr">20: </span>
<span class="linenr">21: </span>fig.tight_layout()
<span class="linenr">22: </span>fname = <span style="color: #ffa07a;">"images/j00.png"</span>
<span class="linenr">23: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j00.png" alt="DataFrame2021-j00.png" /><br  />
</p>
</div>

<p>
PyPlot だとほぼ matplotlib と同じ要領でグラフを描けるようだ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25240;&#12428;&#32218;&#12398;&#22580;&#21512;</span>
<span class="linenr"> 2: </span>plot(x,y, color=<span style="color: #ffa07a;">"m"</span>, marker=<span style="color: #ffa07a;">"o"</span>, markerfacecolor=<span style="color: #ffa07a;">"r"</span>, linestyle=<span style="color: #ffa07a;">"-"</span>, label=raw<span style="color: #ffa07a;">"$\sin(x)$"</span>)
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#33394;: b=blue, g=green, r=red, c=cyan, m=magenta, y=yellow, k=black,w=white</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12510;&#12540;&#12459;&#12398;&#31278;&#39006;: o=&#20870;, s=square, p=pentagon, *=star, +=&#12503;&#12521;&#12473;&#35352;&#21495;, D=&#12480;&#12452;&#12450;&#12514;&#12531;&#12489;</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">markerfacecolor=&#12510;&#12540;&#12459;&#12398;&#33394;</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">linestyle=&#32218;&#12398;&#31278;&#39006;: -=&#23455;&#25126; --=&#30772;&#32218;, -.=&#30772;&#32218;(&#28857;&#20837;&#12426;) :=&#28857;&#32218;</span>
<span class="linenr"> 7: </span>legend()  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">label &#12398;&#25991;&#23383;&#12434;&#20961;&#20363;&#12392;&#12375;&#12390;&#20351;&#12358;.</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26834;&#12464;&#12521;&#12501;</span>
<span class="linenr">10: </span>bar(x,y)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12498;&#12473;&#12488;&#12464;&#12521;&#12512;</span>
<span class="linenr">13: </span>hist(data)
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25955;&#24067;&#22259;</span>
<span class="linenr">16: </span>scatter(x,y)
<span class="linenr">17: </span>
<span class="linenr">18: </span>title(<span style="color: #ffa07a;">"hoo"</span>)
<span class="linenr">19: </span>xlabel(<span style="color: #ffa07a;">"x label"</span>)
<span class="linenr">20: </span>ylabel(<span style="color: #ffa07a;">"y label"</span>)
<span class="linenr">21: </span>
<span class="linenr">22: </span>grid(<span style="color: #1e90ff;">true</span>)
<span class="linenr">23: </span>
<span class="linenr">24: </span>savefig(<span style="color: #ffa07a;">"hoge.png"</span>)
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">x &#30446;&#30427;&#12426;</span>
<span class="linenr">27: </span>x_ticks_name([1,2,3], [<span style="color: #ffa07a;">"first"</span>,<span style="color: #ffa07a;">"second"</span>,<span style="color: #ffa07a;">"third"</span>]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1,2,3 &#12398;&#12392;&#12371;&#12395; first, second, third</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#31684;&#22258;</span>
<span class="linenr">30: </span>xlim(0, &#960;)
<span class="linenr">31: </span>ylim(0, <span style="color: #1e90ff;">nothing</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#38480;&#12364;&#28961;&#12356;&#12400;&#12354;&#12356;. nothing &#12434;&#20351;&#12358;.</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-10" class="outline-3">
<h3 id="sec-4-10"><span class="section-number-3">4.10</span> PyPlotによる時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-10">
<p>
Out_of_Range 列の時系列グラフの作成<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(4,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>fig.tight_layout()
<span class="linenr"> 9: </span>fname=<span style="color: #ffa07a;">"images/j01.png"</span>
<span class="linenr">10: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j01.png" alt="DataFrame2021-j01.png" /><br  />
</p>
</div>

<p>
matplotlib と同じようにいけた&#x2026;<br  />
</p>

<p>
横軸についても同じように行けるんだろうか.<br  />
Python の横軸に関する部分のソースコードは以下だけど.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.pyplot <span style="color: #20b2aa; font-weight: bold;">as</span> plt
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> matplotlib.dates <span style="color: #20b2aa; font-weight: bold;">as</span> mdates
<span class="linenr"> 3: </span>...
<span class="linenr"> 4: </span><span style="color: #9acd32;">xloc</span> = mdates.DayLocator(bymonthday=<span style="color: #1e90ff;">None</span>, interval=7)
<span class="linenr"> 5: </span><span style="color: #9acd32;">xfmt</span> = mdates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr"> 6: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr"> 7: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26012;&#12417;&#12395;&#26360;&#12367;&#22580;&#21512;</span>
<span class="linenr"> 9: </span><span style="color: #9acd32;">labels</span> = ax.get_xticklabels()
<span class="linenr">10: </span>plt.setp(labels, rotation=45, fontsize=10)
</pre>
</div>

<p>
matplotlib.dates で行けるのかも？<br  />
<a href="https://gist.github.com/gizmaa/7214002">Various Julia plotting examples using PyPlot · GitHub</a><br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(4,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;&#12395;&#12394;&#12387;&#12390;&#12375;&#12414;&#12387;&#12383;&#12398;&#12391;&#12371;&#12371;&#12399;&#22793;&#26356;</span>
<span class="linenr"> 9: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">10: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">11: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">12: </span>
<span class="linenr">13: </span>labels = ax.get_xticklabels()
<span class="linenr">14: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">15: </span>
<span class="linenr">16: </span>fig.tight_layout()
<span class="linenr">17: </span>fname=<span style="color: #ffa07a;">"images/j02.png"</span>
<span class="linenr">18: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j02.png" alt="DataFrame2021-j02.png" /><br  />
</p>
</div>

<p>
行けたようだ.<br  />
同様に, 一つのグラフに複数のグラフを描く場合<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(5,3))
<span class="linenr"> 5: </span>ax  = fig.add_subplot(1,1,1)
<span class="linenr"> 6: </span>ax.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">"out_of_range"</span>)
<span class="linenr"> 7: </span>ax.plot(df.date, df.Fat_Burn,     label=<span style="color: #ffa07a;">"fat_burn"</span>)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span>ax.legend(fontsize=10)
<span class="linenr">10: </span>
<span class="linenr">11: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;</span>
<span class="linenr">12: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">13: </span>ax.xaxis.set_major_locator(xloc)
<span class="linenr">14: </span>ax.xaxis.set_major_formatter(xfmt)
<span class="linenr">15: </span>
<span class="linenr">16: </span>labels = ax.get_xticklabels()
<span class="linenr">17: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">18: </span>
<span class="linenr">19: </span>fig.tight_layout()
<span class="linenr">20: </span>fname=<span style="color: #ffa07a;">"images/j04.png"</span>
<span class="linenr">21: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j04.png" alt="DataFrame2021-j04.png" /><br  />
</p>
</div>


<p>
複数のグラフを揃えて描く場合<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames, PyPlot
<span class="linenr"> 2: </span>df = CSV.read(<span style="color: #ffa07a;">"data/j.csv"</span>,DataFrame)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fig = figure(dpi=100, figsize=(3,5))
<span class="linenr"> 5: </span>ax1  = fig.add_subplot(2,1,1)
<span class="linenr"> 6: </span>ax1.plot(df.date, df.Out_of_Range, label=<span style="color: #ffa07a;">"out_of_range"</span>)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>ax2  = fig.add_subplot(2,1,2, sharex=ax1)
<span class="linenr"> 9: </span>ax2.plot(df.date, df.Fat_Burn,     label=<span style="color: #ffa07a;">"fat_burn"</span>, color=<span style="color: #ffa07a;">"green"</span>, marker=<span style="color: #ffa07a;">"."</span>)
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#12398;&#12464;&#12521;&#12501;&#12398; x &#36600;&#12521;&#12505;&#12523;&#12399;&#35201;&#12425;&#12394;&#12356;</span>
<span class="linenr">12: </span>ax1.tick_params(labelbottom=<span style="color: #1e90ff;">false</span>)
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">ax2 &#12398; x &#36600;&#12521;&#12505;&#12523;</span>
<span class="linenr">15: </span>xloc = matplotlib.dates.DayLocator(interval=7)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">bymonthly=None &lt;-- None &#12394;&#12435;&#12390;&#30693;&#12425;&#12435;&#12392;&#12356;&#12358;&#12456;&#12521;&#12540;</span>
<span class="linenr">16: </span>xfmt = matplotlib.dates.DateFormatter(<span style="color: #ffa07a;">"%Y-%m-%d"</span>)
<span class="linenr">17: </span>ax2.xaxis.set_major_locator(xloc)
<span class="linenr">18: </span>ax2.xaxis.set_major_formatter(xfmt)
<span class="linenr">19: </span>labels = ax2.get_xticklabels()
<span class="linenr">20: </span>plt.setp(labels, rotation=45, fontsize=10)
<span class="linenr">21: </span>
<span class="linenr">22: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">title</span>
<span class="linenr">23: </span>ax1.set_title(<span style="color: #ffa07a;">"out_of_range"</span>, fontsize=10)
<span class="linenr">24: </span>ax2.set_title(<span style="color: #ffa07a;">"fat_burn"</span>,     fontsize=10)
<span class="linenr">25: </span>
<span class="linenr">26: </span>fig.tight_layout()
<span class="linenr">27: </span>fname=<span style="color: #ffa07a;">"images/j05.png"</span>
<span class="linenr">28: </span>fig.savefig(fname)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j05.png" alt="DataFrame2021-j05.png" /><br  />
</p>
</div>

<p>
同じ図ができた.<br  />
同じライブラリ使ってるから当然か.<br  />
</p>

<p>
PyPlot のたくさんの例<br  />
<a href="https://gist.github.com/gizmaa/7214002">Various Julia plotting examples using PyPlot · GitHub</a><br  />
</p>
</div>
</div>

<div id="outline-container-sec-4-11" class="outline-3">
<h3 id="sec-4-11"><span class="section-number-3">4.11</span> RCall(ggplot2)による時系列グラフの作成</h3>
<div class="outline-text-3" id="text-4-11">
<p>
RCall というのを使うと, R のコードが使えるらしい.<br  />
Julia 経由で ggplot2 を使ってグラフを描いてみる.<br  />
</p>

<p>
<a href="https://gist.github.com/genkuroki/e1def6d087fea3753b8dcd2cc2896d44">RCall.jl examples · GitHub</a><br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame);
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">using</span> RCall
<span class="linenr"> 6: </span>R<span style="color: #ffa07a;">"""Sys.setenv(LANG="en")"""</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@rimport</span> base as R
<span class="linenr"> 8: </span><span style="color: #6495ed;">@rlibrary</span> ggplot2
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>p = ggplot(data=df) + geom_line(mapping=aes(x=<span style="color: #6495ed;">:date</span>, y=<span style="color: #6495ed;">:min</span>, color=<span style="color: #6495ed;">:cat</span>))
<span class="linenr">11: </span>fname = <span style="color: #ffa07a;">"images/j06.png"</span>
<span class="linenr">12: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j06.png" alt="DataFrame2021-j06.png" /><br  />
</p>
</div>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">using</span> CSV, DataFrames
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span>df = CSV.read(<span style="color: #ffa07a;">"data/heart_beats_summary_2021-02.data"</span>,delim=<span style="color: #ffa07a;">"\t"</span>, DataFrame);
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">using</span> RCall
<span class="linenr"> 6: </span>R<span style="color: #ffa07a;">"""Sys.setenv(LANG="en")"""</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@rimport</span> base as R              <span style="color: #cd853f;"># </span><span style="color: #cd853f;">org-babel &#12391;&#12371;&#12371;&#12364;&#12456;&#12521;&#12540;&#65311;</span>
<span class="linenr"> 8: </span><span style="color: #6495ed;">@rlibrary</span> ggplot2               <span style="color: #cd853f;"># </span><span style="color: #cd853f;">org-babel &#12391;&#12371;&#12371;&#12364;&#12456;&#12521;&#12540;&#65311;</span>
<span class="linenr"> 9: </span>
<span class="linenr">10: </span>p = ggplot(data=df) + geom_line(mapping=aes(x=<span style="color: #6495ed;">:date</span>, y=<span style="color: #6495ed;">:min</span>, color=<span style="color: #6495ed;">:cat</span>))
<span class="linenr">11: </span>p = p + facet_wrap(<span style="color: #ffa07a;">"~cat"</span>,nrow=4)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">rotation=45 &#12399;&#20351;&#12360;&#12394;&#12356;&#12424;&#12358;&#12384;.</span>
<span class="linenr">12: </span>fname = <span style="color: #ffa07a;">"images/j07.png"</span>
<span class="linenr">13: </span>ggsave(p,file=fname,dpi=70)
</pre>
</div>


<div class="figure">
<p><img src="dat/img/DataFrame2021-j07.png" alt="DataFrame2021-j07.png" /><br  />
</p>
</div>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成 (3)]]></title>
    <link href="http://saito1369.github.io/blog/2019-04-08-161532.html"/>
    <updated>2019-04-08T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/161532</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. これまでのあらすじ</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. 問題点</a></li>
<li><a href="#sec-4">4. 解決策</a></li>
<li><a href="#sec-5">5. 結果</a></li>
<li><a href="#sec-6">6. その他</a></li>
<li><a href="#sec-7">7. 参考URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-08 Mon 16:15&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-08 Mon 19:14&gt;</span></span><br  />
</p>
<p>
このメモは, <a href="http://saito1369.github.io/blog/2019-03-22-141849.html">diary-float による org-mode の日付作成 (2)</a> の続きである.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> これまでのあらすじ</h2>
<div class="outline-text-2" id="text-1">
<p>
少々複雑な繰り返しタスクを org-mode 内でうまく処理したい.<br  />
そのため, 繰り返しタスクの PROPERTIES の中に DIARYF という property を作り, そこに diary-float 形式で繰り返し日付のルールを elisp program として書くことにした.<br  />
</p>

<p>
以下のような感じ<br  />
</p>
<pre class="example">
:PROPERTIES:
:DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
:END:
</pre>

<p>
この状態で org-todo を実行すると, DIARYF にある elisp program に基づいて次の予定日が計算され更新される. また, この予定日の次の予定も計算されて日付の差分(+1d とか)として更新される.<br  />
こうすることで, 複雑な繰り返し日付のルールを DIARYF に押し込めることができ, 実際のスケジュールは常に具体的な日付となって org-mode の他のいろんなツールの利用と矛盾しないようになった(ような気がする).<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
一応使えてはいるのだが&#x2026;<br  />
予定日からずれた使い方をすると途端によくわからん状態になってしまうことが判明.<br  />
</p>

<p>
例えば今日が <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> で, SCHEDULED された日付が例えば以下のように書かれているとする.<br  />
</p>

<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-01 Mon +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> にやるつもりだったが出来てなくて, 今日 <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> にやろうかなーと思った, そんなよくある状況を想定している.<br  />
</p>

<p>
ちなみに DIARYF の後ろの関数はこんなやつで,<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday</span>(stt <span style="color: #9370db;">&amp;rest</span> wds)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr"> 3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
<span class="linenr"> 4: </span>         (jst  nil)
<span class="linenr"> 5: </span>         (sttd  (calendar-absolute-from-gregorian stt ))
<span class="linenr"> 6: </span>         (today (calendar-absolute-from-gregorian date))
<span class="linenr"> 7: </span>         (diffd (- today sttd)))
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">(y-or-n-p (message "date=%s" date))</span>
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
<span class="linenr">10: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
<span class="linenr">11: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-habit-weekday-week date wds)))
<span class="linenr">12: </span>    jst
<span class="linenr">13: </span>    ))
<span class="linenr">14: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday-week</span>(date wds)
<span class="linenr">15: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">16: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((wd nil)
<span class="linenr">17: </span>        (jst nil))
<span class="linenr">18: </span>    (<span style="color: #20b2aa; font-weight: bold;">while</span> wds
<span class="linenr">19: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wd (car wds))
<span class="linenr">20: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= wd (calendar-day-of-week date)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
<span class="linenr">21: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wds (cdr wds))
<span class="linenr">22: </span>      )
<span class="linenr">23: </span>    jst))
</pre>
</div>
<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> 以降の月, 水, 金曜日にやるという意味である.<br  />
</p>


<p>
このタスクを今日 <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-05 Fri&gt;</span></span> に行って DONE にする(org-todo) と&#x2026;<br  />
何と以下のようになってしまうのであった.<br  />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-03 Wed +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>

<p>
うーん違うだろって感じだ.<br  />
繰り返し日付で今日は金曜日なんで,<br  />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-08 Mon +2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
こうなって欲しいことは明らかなのだが, どうすればいいんだろ？<br  />
</p>

<p>
.+2d (DONE にした日付から 2 日後), ++2d (DONE した日付から直近の 2 日後) で行けるのかなと思ったが, それもなかなか難しいことが判明.<br  />
</p>

<p>
例えばこうしておく.<br  />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-01 Wed .+2d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>

<p>
04/05 (金) に DONE にすると<br  />
</p>
<pre class="example">
** task hoge
    SCHEDULED: &lt;2019-04-07 Sun .+1d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-habit-weekday '(04 01 2019) 1 3 5)
    :END:
</pre>
<p>
次の日付を作るときは .+2d しか見ないから, こうなってしまうのであった.<br  />
うーんイマイチだなぁ. このタスクは日曜日にやる予定はないのだ.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 問題点</h2>
<div class="outline-text-2" id="text-3">
<p>
スケジュールされた日に実行すると仮定して日付差分(+2d など)が作成されているため, スケジュールされた日 + 差分 よりも今日の方が新しい場合には, DONE にした後の再スケジューリングが過去の日付になってしまう.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 解決策</h2>
<div class="outline-text-2" id="text-4">
<p>
スケジュールされた日が今日よりも前の場合には, スケジュールを今日に変更し, DIARYF を見て次のスケジュールを差分で書くように変更する.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 結果</h2>
<div class="outline-text-2" id="text-5">
<p>
いくつかの部品をまず作成する.<br  />
日付の format が色々あってめんどくさい.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-get-sexp</span>()
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">"&#12459;&#12540;&#12477;&#12523;&#12364;&#12354;&#12427;&#22580;&#25152;&#12398; DIARYF &#12395;&#12354;&#12427; S &#24335;&#12434;&#21462;&#24471;&#12375;&#12390;&#36820;&#12377;"</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (elem sexp)
<span class="linenr">4: </span>    (end-of-line)
<span class="linenr">5: </span>    (org-back-to-heading)
<span class="linenr">6: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> elem (org-element-headline-parser (point-max) t))
<span class="linenr">7: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem))   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">PROPERTIES: &#12398;&#20013;&#36523;&#12398;&#12487;&#12540;&#12479;&#12434;&#21462;&#12426;&#20986;&#12377;&#26041;&#27861;</span>
<span class="linenr">8: </span>    sexp
<span class="linenr">9: </span>    ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-float-to-diff</span>(sexp day <span style="color: #9370db;">&amp;optional</span> pdays)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sexp: DIARYF &#12398; S &#24335;               %%(diary-lecture ......)</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">   day:  &#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;              '(50 7 20 4 5 2019 5 nil 32400)   =&gt; 2019/04/05</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">   pdays: &#20309;&#26085;&#24460;&#12398;&#20104;&#23450;&#12414;&#12391;&#32771;&#12360;&#12427;&#12363;.   60"</span>
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((ii       0)
<span class="linenr"> 6: </span>        (cdate  nil)
<span class="linenr"> 7: </span>        (result nil))
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">unless</span> pdays (<span style="color: #20b2aa; font-weight: bold;">setq</span> pdays 0))
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">"^%%"</span> sexp) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (substring-no-properties sexp 2)))
<span class="linenr">10: </span>    (<span style="color: #20b2aa; font-weight: bold;">catch</span> '<span style="color: #1e90ff;">break</span>
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">while</span> (&lt; ii (1+ pdays))
<span class="linenr">12: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> cdate  (my-calendar-format-nth-day-after day ii))
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> result (org-diary-sexp-entry sexp t cdate))
<span class="linenr">14: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> result (<span style="color: #20b2aa; font-weight: bold;">throw</span> '<span style="color: #1e90ff;">break</span> nil))
<span class="linenr">15: </span>        (<span style="color: #20b2aa; font-weight: bold;">incf</span> ii)
<span class="linenr">16: </span>        ))
<span class="linenr">17: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> result
<span class="linenr">18: </span>        ii <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#20104;&#23450;&#26085;&#12414;&#12391;&#20309;&#26085;&#20998;&#12354;&#12427;&#12363;&#65311;&#12434;&#36820;&#12377;.</span>
<span class="linenr">19: </span>        -1 <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12425;&#12394;&#12369;&#12428;&#12400; -1 &#12434;&#36820;&#12377;.</span>
<span class="linenr">20: </span>      )
<span class="linenr">21: </span>    ))
<span class="linenr">22: </span>
<span class="linenr">23: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format</span>(dayl)
<span class="linenr">24: </span>  <span style="color: #cd5c5c;">"dayl = '(50 7 20 12 5 2017 5 nil 32400) &#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;</span>
<span class="linenr">25: </span><span style="color: #cd5c5c;">&#12363;&#12425; calendar-format '(5 12 2017) &#12408;&#22793;&#26356;&#12377;&#12427;"</span>
<span class="linenr">26: </span>  (list (nth 4 dayl) (nth 3 dayl) (nth 5 dayl)))
<span class="linenr">27: </span>
<span class="linenr">28: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format-nth-day-after</span>(dayl n)
<span class="linenr">29: </span>  <span style="color: #cd5c5c;">"&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335;&#12398;&#26085;&#20184; dayl &#12363;&#12425; n(=2) &#26085;&#30446;&#12398;&#26085;&#20184;&#12434; calendar-format &#12391;&#36820;&#12377;.</span>
<span class="linenr">30: </span><span style="color: #cd5c5c;">   dayl='(50 7 20 12 5 2017 5 nil 32400) n=2 &#12398;&#22580;&#21512;</span>
<span class="linenr">31: </span><span style="color: #cd5c5c;">  '(5 14 2017) &#12434;&#36820;&#12377;."</span>
<span class="linenr">32: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((unday (apply #'encode-time dayl)))
<span class="linenr">33: </span>    (my-calendar-format (decode-time (time-add unday (days-to-time n))))
<span class="linenr">34: </span>    ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-replace-scheduled-repeat</span>(sch-format next-diff)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sch-format= 2019-04-02 Tue</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">next-diff= 8</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#12398;&#12392;&#12365;, SCHEDULED: &#12398;&#25991;&#23383;&#21015;&#12434;&#19978;&#12398;&#20516;&#12395;&#32622;&#12365;&#25563;&#12360;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">SCHEDULED: &lt;2019-04-01 Mon&gt; =&gt; SCHEDULED: &lt;2019-04-02 Tue +8d&gt; &#12395;&#32622;&#12365;&#25563;&#12360;"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (sch-format-with-repeat)
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= next-diff 0) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s&gt;"</span> sch-format))
<span class="linenr"> 8: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s %s&gt;"</span> sch-format (concat <span style="color: #ffa07a;">"+"</span> (number-to-string next-diff) <span style="color: #ffa07a;">"d"</span>))))
<span class="linenr"> 9: </span>    (org-back-to-heading)
<span class="linenr">10: </span>    (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">11: </span>    (replace-match sch-format-with-repeat)
<span class="linenr">12: </span>    ))
</pre>
</div>

<p>
unix-sch-date (UNIX 形式日付)から数えた次のスケジュールについての情報を以下で計算.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-get-next-schedule</span>(unix-sch-date sexp)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"unix-date &#12434;&#24341;&#25968;&#12395;&#12375;&#12390;, &#12371;&#12398;&#26085;&#12363;&#12425;&#25968;&#12360;&#12383; (&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12398;&#26085;&#20184;, &#36861;&#21152;&#12377;&#12427;&#26085;&#25968;) &#12434;&#36820;&#12377;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#20363;: unix-sch-date = &lt;2019-04-01 Mon&gt; (&#12398; unix-date &#34920;&#35352;)</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">sexp = %%(diary-habit-weekday '(4 1 2019) 1)    ;; 2019/04/01 &#12363;&#12425;&#12398;&#27598;&#26376;&#26332;&#26085;</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">     =&gt; (list \"2019-04-08 Mon\" 7) &#12364;&#36820;&#12427;"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
<span class="linenr"> 7: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#26085;&#12395;&#12377;&#12427;.</span>
<span class="linenr"> 8: </span>         (unix-sch-next-date (time-add unix-sch-date (days-to-time 1)))
<span class="linenr"> 9: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335; (0 0 0 11 3 2019 0 nil 32400) &#12395;&#22793;&#25563;</span>
<span class="linenr">10: </span>         (lst-sch-next-date (decode-time unix-sch-next-date))
<span class="linenr">11: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12414;&#12391;&#12398;&#26085;&#20184;&#35336;&#31639;(&#27425;&#12398;&#26085;&#12363;&#12425;&#35336;&#31639;&#12375;&#12390;&#12427;&#12398;&#12391; + 1 &#12434;&#20837;&#12428;&#12390;&#12362;&#12367;)</span>
<span class="linenr">12: </span>         (next-diff (+ 1 (diary-float-to-diff sexp lst-sch-next-date org-gcal-down-days)))
<span class="linenr">13: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12398;&#26085;&#20184;</span>
<span class="linenr">14: </span>         (unix-sch-next-scheduled-date (time-add unix-sch-date (days-to-time next-diff)))
<span class="linenr">15: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12457;&#12540;&#12510;&#12483;&#12488;&#22793;&#26356;</span>
<span class="linenr">16: </span>         (sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-next-scheduled-date))
<span class="linenr">17: </span>         )
<span class="linenr">18: </span>    (list sch-format next-diff) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12522;&#12473;&#12488;&#12391;&#36820;&#12377;</span>
<span class="linenr">19: </span>    ))
</pre>
</div>
<p>
これらの部品を使って&#x2026;<br  />
</p>

<p>
カーソル上にあるタスクの予定日付と DIARYF の elisp program を見て次の予定との差分を計算し書き出す.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff</span>()
<span class="linenr"> 2: </span>    <span style="color: #cd5c5c;">"DIARYF: &#12503;&#12525;&#12497;&#12486;&#12451;&#12398; diary-float &#24418;&#24335;&#26085;&#20184;(habit)&#12364;&#12354;&#12428;&#12400;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#35501;&#12415;&#36796;&#12435;&#12391;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#20855;&#20307;&#30340;&#12395;&#12399;, SCHUEDULED: &lt;&#26085;&#20184;&gt; =&gt; SCHEDULED: &lt;&#26085;&#20184; +8d&gt; &#12392;&#12363;&#12395;&#12377;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">(&#27425;&#12398;&#20104;&#23450;&#12364; 8 &#26085;&#24460;&#12395;&#12354;&#12427;&#12392; diary-float &#20869;&#12398;&#38306;&#25968;&#12391;&#35336;&#31639;&#12373;&#12428;&#12383;&#22580;&#21512;&#12398;&#20363;)"</span>
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 7: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (unix-sch-date lst next-diff sch-format sexp)
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr"> 9: </span>      (end-of-line)
<span class="linenr">10: </span>      (org-back-to-heading)
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (my-org-diary-float-get-sexp))
<span class="linenr">12: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> sexp
<span class="linenr">13: </span>          (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">14: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point))) <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">UNIX date</span>
<span class="linenr">15: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> lst (my-org-diary-float-get-next-schedule unix-sch-date sexp))
<span class="linenr">16: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-date))
<span class="linenr">17: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> next-diff  (nth 1 lst))
<span class="linenr">18: </span>            (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">" 00:00"</span> sch-format) (<span style="color: #20b2aa; font-weight: bold;">setf</span> (substring sch-format (match-beginning 0) (match-end 0)) <span style="color: #ffa07a;">""</span>))
<span class="linenr">19: </span>            (my-org-diary-float-replace-scheduled-repeat sch-format next-diff)
<span class="linenr">20: </span>            )
<span class="linenr">21: </span>        )
<span class="linenr">22: </span>      )
<span class="linenr">23: </span>    ))
</pre>
</div>

<p>
スケジュールされた日と今日を比較して今日の方が新しければスケジュールを今日に変更.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff-replace-today</span>()
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">":DIARYF: &#12398; diary-float &#24418;&#24335;&#26085;&#20184;&#12364;&#12354;&#12428;&#12400;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">SCHEDULE &#12364; &lt;2019-04-01 Mon&gt; &#12391;&#20170;&#26085;&#12364;&#20363;&#12360;&#12400; &lt;2019-04-03 Wed&gt; &#12398;&#22580;&#21512;,</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#12388;&#12414;&#12426;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12373;&#12428;&#12383;&#26085;&#20184;&#12364;&#36942;&#21435;&#12398;&#22580;&#21512;&#12395;&#12399;, &#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12434;&#20170;&#26085;&#12395;&#12377;&#12427;."</span>
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 6: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (unix-today unix-sch-date sch-format-today stime ext)
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr"> 8: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULE &#12373;&#12428;&#12383;&#26085;&#20184;&#12424;&#12426;&#20170;&#26085;&#12398;&#12411;&#12358;&#12364;&#26032;&#12375;&#12356;&#22580;&#21512;</span>
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-today (current-time))
<span class="linenr">10: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point)))
<span class="linenr">11: </span>      (<span style="color: #20b2aa; font-weight: bold;">if</span> (&lt; (float-time unix-sch-date) (float-time unix-today))
<span class="linenr">12: </span>          (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">13: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> stime (format-time-string <span style="color: #ffa07a;">"%H:%M"</span> unix-sch-date))
<span class="linenr">14: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">org-extend-today-until &#12424;&#12426;&#12418;&#26178;&#21051;&#12364;&#21069;&#12394;&#12425;&#21069;&#26085;&#12395;&#12377;&#12427;</span>
<span class="linenr">15: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-today (my-org-diary-float-replace-date-extend-today unix-today))
<span class="linenr">16: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26178;&#21051;&#12399;&#20837;&#12428;&#26367;&#12360;&#12427;</span>
<span class="linenr">17: </span>            (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-today (concat (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a"</span> unix-today) <span style="color: #ffa07a;">" "</span> stime))
<span class="linenr">18: </span>            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULED &#26085;&#20184;&#12434;&#20170;&#26085;&#12395;&#22793;&#26356;&#12377;&#12427;</span>
<span class="linenr">19: </span>            (my-org-diary-float-replace-scheduled-repeat sch-format-today 0)
<span class="linenr">20: </span>            )
<span class="linenr">21: </span>        )
<span class="linenr">22: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523; +nd &#12434;&#20316;&#25104;&#12375;&#30452;&#12375;</span>
<span class="linenr">23: </span>      (my-org-diary-float-next-schedule-diff)
<span class="linenr">24: </span>      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12371;&#12398;&#12354;&#12392; +nd &#12364;&#35336;&#31639;&#12373;&#12428;&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#26085;&#20184;&#12395;&#26360;&#12365;&#25563;&#12431;&#12427;</span>
<span class="linenr">25: </span>      )))
<span class="linenr">26: </span>
<span class="linenr">27: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-replace-date-extend-today</span>(unix-date)
<span class="linenr">28: </span>  <span style="color: #cd5c5c;">"unix-date &#12398;&#26178;&#21051;&#12364; 5:00(org-extend-today-until) &#12424;&#12426;&#12418;&#21069;&#12384;&#12387;&#12383;&#12425;, &#21069;&#12398;&#26085;&#12395;&#12420;&#12387;&#12383;&#12371;&#12392;&#12395;&#12377;&#12427;"</span>
<span class="linenr">29: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> (ext)
<span class="linenr">30: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> org-extend-today-until
<span class="linenr">31: </span>        (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">32: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> ext (string-to-number (format-time-string <span style="color: #ffa07a;">"%H.%M"</span> unix-date)))
<span class="linenr">33: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "ext=%f" ext))</span>
<span class="linenr">34: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "extend=%d" org-extend-today-until))</span>
<span class="linenr">35: </span>          (<span style="color: #20b2aa; font-weight: bold;">if</span> (&gt; org-extend-today-until ext)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">5 &gt; 4.50 (unix-date &#12398;&#26085;&#26178;&#12364; 4:50 &#12398;&#22580;&#21512;)</span>
<span class="linenr">36: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#21069;&#12398;&#26085;&#12395;&#12377;&#12427;</span>
<span class="linenr">37: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-date (time-add unix-date (days-to-time -1)))
<span class="linenr">38: </span>            )))
<span class="linenr">39: </span>    unix-date
<span class="linenr">40: </span>    ))
</pre>
</div>

<p>
org-todo の後で計算するように設定.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">org-todo</span>(after my-org-next-todo-migration-automatic-hook)
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((end   (my-org-get-end-head))
<span class="linenr">4: </span>         (elem  (org-element-headline-parser end t))
<span class="linenr">5: </span>         (todo  (org-element-property <span style="color: #76ee00;">:todo-keyword</span> elem)))
<span class="linenr">6: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem) (my-org-diary-float-next-schedule-diff-replace-today)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">[2019-04-03 Wed]</span>
<span class="linenr">7: </span>      ))
<span class="linenr">8: </span>(ad-activate-regexp <span style="color: #ffa07a;">"my-org-next-todo-migration-automatic-hook"</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> その他</h2>
<div class="outline-text-2" id="text-6">
<p>
この件で色々調べてるときに, 有用そうな変数を見つけた.<br  />
一つはこれ.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> org-extend-today-until 5) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">05:00 &#12414;&#12391;&#12399;&#21069;&#12398;&#26085;&#25201;&#12356;</span>
</pre>
</div>
<p>
org-extend-today-until を 5 にしておくと, 05:00 までは前の日扱いで処理してくれるらしい.<br  />
上のプログラムでもこの値が定義されてるときを考慮した.<br  />
</p>

<p>
このパラメータを設定しとかないと, 夜更かしの人は結構めんどくさいことになる.<br  />
例えば, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue +1d&gt;</span></span> のタスクを <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に実行した場合などである.<br  />
ここで DONE とすると, 次のスケジュールは <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-04 Thu +1d&gt;</span></span> となるが, これはやっぱ違うだろーと思うわけである.<br  />
こうなってると, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed&gt;</span></span>  中は org-agenda でこのタスクが見えてこない.<br  />
今日の夜もやる筈なのでスケジュールとしては <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed +1d&gt;</span></span> になってて欲しいわけである.<br  />
org-extend-today-until に値があれば, この時間までは前の日扱いとなるため, <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に DONE とすると <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span> にやったこととなり次のスケジュールは <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed +1d&gt;</span></span> となってめでたしめでたしとなる.<br  />
</p>


<p>
もう一つの変数はこれ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> org-use-effective-time t) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">05:00 &#21069;&#12398; timestamp &#12434;&#21069;&#26085;&#12398; 25:59 &#12395;&#12377;&#12427;.</span>
</pre>
</div>
<p>
STYLE: habit でグラフを描いているときなどにいいのではないだろーか.<br  />
<span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-03 Wed 1:00&gt;</span></span> に実行し DONE にしたときに, State ログが前日のものになってくれる.<br  />
</p>

<p>
これが設定されてない場合, 繰り返し日付で DONE とすると State ログが書き出されて,<br  />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 01:00]
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>
<p>
とこんな感じになる.<br  />
</p>

<p>
これを基にグラフが描かれるわけだが, 気持ち的には <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span>  の夜にやってるつもりなんだけどなーと思うわけである.<br  />
次の日とかがこんな感じになってると, ほんとは毎日やってる筈なのにグラフ上では <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-02 Tue&gt;</span></span> には何もやってない感じが出てしまう.<br  />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 23:45]
- State "DONE"       from ""           [2019-04-03 Wed 01:00]
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>

<p>
一方, 上の変数 org-use-effective-time が t になってると, ログは以下のようになる.<br  />
</p>
<pre class="example">
:LOGBOOK:
- State "DONE"       from ""           [2019-04-03 Wed 23:45]
- State "DONE"       from ""           [2019-04-02 Tue 23:59]  ;; 変わったところ
- State "DONE"       from ""           [2019-04-01 Mon 23:30]
:END:
</pre>
<p>
つまり, org-extend-today-until に指定された時刻の前までは前日の 23:59 にやったことにしてくれる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参考URL</h2>
<div class="outline-text-2" id="text-7">
<p>
<a href="http://shuzo-kino.hateblo.jp/entry/2016/06/24/231844">emacs lisp で日付を表示する</a><br  />
<a href="https://qiita.com/yewton/items/5e134065a9d4478b27d2">人類滅亡までのカウントダウンを Emacs に表示する</a><br  />
<a href="https://stackoverflow.com/questions/50186949/parse-a-unix-timestamp-to-date-in-emacs-elisp">parse a unix timestamp to date in emacs (elisp)</a><br  />
<a href="http://ergoemacs.org/emacs/elisp_datetime.html">Elisp: Date Time</a><br  />
<a href="https://www42.atwiki.jp/elisp/pages/17.html">逆引き Emacs Lisp 日付と時刻</a><br  />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#Time-Parsing">40.8 Parsing and Formatting Times</a><br  />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Conversion.html">40.7 Time Conversion</a><br  />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#Time-of-Day">40.5 Time of Day</a><br  />
</p>

<p>
<a href="https://www42.atwiki.jp/elisp/pages/12.html#id_644a4277">部分文字列を置き換える</a><br  />
<a href="http://bit.ly/2JfSAJ1">Replace string in buffer programatically</a><br  />
</p>

<p>
<a href="http://bit.ly/2Ujsh9J">Make agenda clockreport respect org-extend-today-until</a><br  />
<a href="https://github.com/Fuco1/org-timeline">org-timeline</a><br  />
<a href="https://orgmode.org/worg/doc.html">Documentation for Org hooks, commands and options</a><br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成 (2)]]></title>
    <link href="http://saito1369.github.io/blog/2019-03-22-141849.html"/>
    <updated>2019-03-22T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/141849</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. これまでのあらすじ</a></li>
<li><a href="#sec-2">2. はじめに</a></li>
<li><a href="#sec-3">3. 問題点</a></li>
<li><a href="#sec-4">4. 解決策</a></li>
<li><a href="#sec-5">5. 結果</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri 14:18&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri 18:46&gt;</span></span><br  />
</p>
<p>
このメモは, <a href="http://saito1369.github.io/blog/2017-05-18-diary_float.html">diary-float による org-mode の日付作成</a> の続きである.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> これまでのあらすじ</h2>
<div class="outline-text-2" id="text-1">
<p>
emacs org-mode でタスクを管理している.<br  />
複雑な繰り返し日付をルールに基づき書いておきたい.<br  />
いろいろ調べたら, diary-float 形式で日付を書くという方法があることを知った.<br  />
今日がそのタスクを行う日であれば t, そうじゃなければ nil を返す関数を自分で作ることで,<br  />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;%%(diary-lecture '(04 01 2019) 7 15 '(3 10))&gt;
</pre>
<p>
こんな感じで書いておくと, この関数が t を返す日付でこのタスクがスケジューリングされる.<br  />
(一応 diary-lecture 関数の意味を書いとくと, 2019/04/01 から, 7 日おきに 15 回やる. ただし 3 回目と 10 回目は休み)<br  />
これでいちいち具体的な日付を書く必要がなくなった.<br  />
よかった.<br  />
ここまでが以前のはなし.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> はじめに</h2>
<div class="outline-text-2" id="text-2">
<p>
これはこれでまぁ使えるようにはなったのだが, org-mode のプログラムの中では日付が <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-03-22 Fri&gt;</span></span> のような形式で書いてないとうまく動かないものがあることが判明した.<br  />
例えば org-habit とか. このままでは agenda-view で STYLE: habit としたときのグラフが出てこない.<br  />
あるいは <a href="https://qiita.com/clothoid/items/73a937a22eeeb82c3ee7">org-gcal</a> とか. 具体的日付じゃないと Google Calendar との連携ができない.<br  />
これをなんとかするためには, かなり色んな関数を advice を使って書き換えたり直接上書きしたりしないといけないのであった.<br  />
出来たことはできたのだが結構汚いプログラムになってしまい何か嫌になってきた.<br  />
org-mode の version up についていくためにも, もう少し何かシンプルにならんもんか&#x2026;<br  />
</p>

<p>
一応現在の環境を書いておく.<br  />
emacs は 26.1, org-mode は 8.2.10 である.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 問題点</h2>
<div class="outline-text-2" id="text-3">
<p>
タスクスケジューリングの日付に diary-float 形式の関数を直接書かないで同様の機能を持たせることは出来ないか？<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 解決策</h2>
<div class="outline-text-2" id="text-4">
<p>
こんな感じで書くことが出来ないか考えてみた.<br  />
</p>

<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-01 Mon 10:40 +7d&gt;
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>

<p>
diary-float 形式の日付ルールは, DIARYF property の中に書いておくようにする.<br  />
スケジュールの最初の日付は具体的な <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-04-01 Mon&gt;</span></span> 形式で書かれている.<br  />
問題は次が何日後かってことなので, ここを diary-float 形式の式を評価することで計算し書き出し(直し)たい.<br  />
</p>

<p>
例えばこのタスクを DONE したとき, +7d を見ることで次回の日付が書き出される.<br  />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-08 Mon 10:40 +7d&gt;
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2019-04-01 Fri 12:20]
    :END:      
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>
<p>
普通はこんな感じだけど, DIARYF property がある場合にはこれを見て次のスケジュールがほんとは何日後かを再計算する.<br  />
この例の場合, 3 回目は休講だから次は 14 日後になる.<br  />
最終的には以下のようになる.<br  />
</p>
<pre class="example">
*** TODO タスク1
    SCHEDULED: &lt;2019-04-08 Mon 10:40 +14d&gt;
    :LOGBOOK:  
    - State "DONE"       from "TODO"       [2019-04-01 Fri 12:20]
    :END:      
    :PROPERTIES:
    :DIARYF: %%(diary-lecture '(04 01 2019) 7 15 '(3 10))
    :END:
</pre>

<p>
これがうまく出来ればなんとかなるんではないだろうか.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 結果</h2>
<div class="outline-text-2" id="text-5">
<p>
まずは以下のような引数をもった簡単な関数をつくる.<br  />
  sexp="%%(diary-lecture '(04 01 2019) 7 15 '(3 10))"<br  />
  day ="'(4 7 2019)"<br  />
  pdays=60<br  />
</p>

<p>
day から pdays 日以内で sexp を満たすもっとも近い日付が今日から何日後かを計算する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-float-to-diff</span>(sexp day <span style="color: #9370db;">&amp;optional</span> pdays)
<span class="linenr"> 2: </span>  <span style="color: #cd5c5c;">"sexp &#12434;&#28288;&#12383;&#12377;&#19968;&#30058;&#36817;&#12356;&#26085;&#20184;&#12364; day &#12363;&#12425;&#20309;&#26085;&#24460;&#12363;&#65311;"</span>
<span class="linenr"> 3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((ii       0)
<span class="linenr"> 4: </span>        (cdate  nil)
<span class="linenr"> 5: </span>        (result nil))
<span class="linenr"> 6: </span>    (<span style="color: #20b2aa; font-weight: bold;">unless</span> pdays (<span style="color: #20b2aa; font-weight: bold;">setq</span> pdays 0))
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">"^%%"</span> sexp) (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (substring-no-properties sexp 2)))
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">catch</span> '<span style="color: #1e90ff;">break</span>
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">while</span> (&lt; ii (1+ pdays))
<span class="linenr">10: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> cdate  (my-calendar-format-nth-day-after day ii))
<span class="linenr">11: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> result (org-diary-sexp-entry sexp t cdate))
<span class="linenr">12: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> result (<span style="color: #20b2aa; font-weight: bold;">throw</span> '<span style="color: #1e90ff;">break</span> nil))
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">incf</span> ii)
<span class="linenr">14: </span>        ))
<span class="linenr">15: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> result
<span class="linenr">16: </span>        ii <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#20104;&#23450;&#26085;&#12414;&#12391;&#20309;&#26085;&#20998;&#12354;&#12427;&#12363;&#65311;&#12434;&#36820;&#12377;.</span>
<span class="linenr">17: </span>      -1   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12425;&#12394;&#12369;&#12428;&#12400; -1 &#12434;&#36820;&#12377;.</span>
<span class="linenr">18: </span>      )
<span class="linenr">19: </span>    ))
<span class="linenr">20: </span>
<span class="linenr">21: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format-nth-day-after</span>(dayl n)
<span class="linenr">22: </span>  <span style="color: #cd5c5c;">"dayl='(50 7 20 12 5 2017 5 nil 32400) n=2  =&gt; return '(5 14 2017)"</span>
<span class="linenr">23: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((unday (apply #'encode-time dayl)))
<span class="linenr">24: </span>    (my-calendar-format (decode-time (time-add unday (days-to-time n))))
<span class="linenr">25: </span>    ))
<span class="linenr">26: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-calendar-format</span>(dayl)
<span class="linenr">27: </span>  <span style="color: #cd5c5c;">"dayl='(50 7 20 12 5 2017 5 nil 32400) =&gt; return '(5 12 2017)"</span>
<span class="linenr">28: </span>  (list (nth 4 dayl) (nth 3 dayl) (nth 5 dayl)))
</pre>
</div>

<p>
これを利用して,<br  />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40&gt;
</pre>
<p>
とか<br  />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40 +7d&gt;
</pre>
<p>
を DIARYF に基づき<br  />
</p>
<pre class="example">
SCHEDULED: &lt;2019-04-08 10:40 +14d&gt;
</pre>
<p>
に書き換えるプログラムとして以下を作成.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-org-diary-float-next-schedule-diff</span>()
<span class="linenr"> 2: </span>    <span style="color: #cd5c5c;">"DIARYF: &#12503;&#12525;&#12497;&#12486;&#12451;&#12398; diary-float &#24418;&#24335;&#26085;&#20184;(habit)&#12364;&#12354;&#12428;&#12400;</span>
<span class="linenr"> 3: </span><span style="color: #cd5c5c;">&#35501;&#12415;&#36796;&#12435;&#12391;&#27425;&#22238;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12522;&#12531;&#12464;&#12434;&#34892;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd5c5c;">&#20855;&#20307;&#30340;&#12395;&#12399;, SCHUEDULED: &lt;&#26085;&#20184;&gt; =&gt; SCHEDULED: &lt;&#26085;&#20184; +14d&gt; &#12392;&#12377;&#12427;.</span>
<span class="linenr"> 5: </span><span style="color: #cd5c5c;">(&#27425;&#12398;&#20104;&#23450;&#12364; 14 &#26085;&#24460;&#12395;&#12354;&#12427;&#12392; diary-float &#20869;&#12398;&#38306;&#25968;&#12391;</span>
<span class="linenr"> 6: </span><span style="color: #cd5c5c;">&#35336;&#31639;&#12373;&#12428;&#12383;&#22580;&#21512;)"</span>
<span class="linenr"> 7: </span>    (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">let</span> (elem sexp unix-sch-date unix-sch-next-date lst-sch-next-date
<span class="linenr"> 9: </span>               next-diff sch-format sch-format-with-repeat)
<span class="linenr">10: </span>      (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr">11: </span>        (end-of-line)
<span class="linenr">12: </span>        (org-back-to-heading)
<span class="linenr">13: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> elem (org-element-headline-parser (point-max) t))
<span class="linenr">14: </span>        (<span style="color: #20b2aa; font-weight: bold;">setq</span> sexp (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">PROPERTIES: &#12398;&#20013;&#36523;&#12398;&#12487;&#12540;&#12479;&#12434;&#21462;&#12426;&#20986;&#12377;&#26041;&#27861;</span>
<span class="linenr">15: </span>        (<span style="color: #20b2aa; font-weight: bold;">if</span> sexp
<span class="linenr">16: </span>            (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">17: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">SCHEDULED &#12398;&#26085;&#20184;</span>
<span class="linenr">18: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-date (org-get-scheduled-time (point))) <span style="color: #cd853f;">;;</span><span style="color: #cd853f;">UNIX date</span>
<span class="linenr">19: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#26085;&#12395;&#12377;&#12427;.</span>
<span class="linenr">20: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> unix-sch-next-date (time-add unix-sch-date (days-to-time 1)))
<span class="linenr">21: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26085;&#20184;&#12522;&#12473;&#12488;&#24418;&#24335; (0 0 0 11 3 2019 0 nil 32400) &#12395;&#22793;&#25563;</span>
<span class="linenr">22: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> lst-sch-next-date (decode-time unix-sch-next-date))
<span class="linenr">23: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27425;&#12398;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12414;&#12391;&#12398;&#26085;&#20184;&#35336;&#31639;(&#27425;&#12398;&#26085;&#12363;&#12425;&#35336;&#31639;&#12375;&#12390;&#12427;&#12398;&#12391; + 1 &#12434;&#20837;&#12428;&#12390;&#12362;&#12367;)</span>
<span class="linenr">24: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> next-diff (+ 1 (diary-float-to-diff sexp lst-sch-next-date org-gcal-down-days)))
<span class="linenr">25: </span>              (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format (format-time-string <span style="color: #ffa07a;">"%Y-%m-%d %a %H:%M"</span> unix-sch-date))
<span class="linenr">26: </span>              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26178;&#38291;&#12364;&#25351;&#23450;&#12373;&#12428;&#12390;&#12394;&#12356;&#12392;&#12365;&#12399; " 00:00" &#12434;&#21066;&#38500;&#12377;&#12427;.</span>
<span class="linenr">27: </span>              (<span style="color: #20b2aa; font-weight: bold;">if</span> (string-match <span style="color: #ffa07a;">" 00:00"</span> sch-format) (<span style="color: #20b2aa; font-weight: bold;">setf</span> (substring sch-format (match-beginning 0) (match-end 0)) <span style="color: #ffa07a;">""</span>))
<span class="linenr">28: </span>              (<span style="color: #20b2aa; font-weight: bold;">if</span> (= next-diff 0)
<span class="linenr">29: </span>                  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">diary-float &#12391;&#12398;&#27425;&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#26085;&#20184;&#12364;&#35211;&#12388;&#12363;&#12425;&#12394;&#12356;&#12392;&#12365;.</span>
<span class="linenr">30: </span>                  (<span style="color: #20b2aa; font-weight: bold;">progn</span>
<span class="linenr">31: </span>                    (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s&gt;"</span> sch-format))
<span class="linenr">32: </span>                    (org-back-to-heading)
<span class="linenr">33: </span>                    (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">34: </span>                    (replace-match sch-format-with-repeat)
<span class="linenr">35: </span>                    )
<span class="linenr">36: </span>                <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12473;&#12465;&#12472;&#12517;&#12540;&#12523;&#12364;&#35211;&#12388;&#12363;&#12387;&#12383;&#12425; +nd &#12398;&#36861;&#21152;</span>
<span class="linenr">37: </span>                (<span style="color: #20b2aa; font-weight: bold;">setq</span> sch-format-with-repeat (format <span style="color: #ffa07a;">"SCHEDULED: &lt;%s %s&gt;"</span> sch-format (concat <span style="color: #ffa07a;">"+"</span> (number-to-string next-diff) <span style="color: #ffa07a;">"d"</span>)))
<span class="linenr">38: </span>                (org-back-to-heading)
<span class="linenr">39: </span>                (re-search-forward <span style="color: #ffa07a;">"</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">SCHEDULED: &lt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">(</span><span style="color: #ffa07a;">.*?</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">&gt;</span><span style="color: #ffa07a; font-weight: bold;">\\</span><span style="color: #ffa07a; font-weight: bold;">)</span><span style="color: #ffa07a;">"</span> (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span> (outline-next-heading) (point)))
<span class="linenr">40: </span>                (replace-match sch-format-with-repeat)
<span class="linenr">41: </span>                )
<span class="linenr">42: </span>              )
<span class="linenr">43: </span>        ))
<span class="linenr">44: </span>      ))
</pre>
</div>

<p>
タスクを DONE にしたときに自動で呼ばれるようにする. advice を使った.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span class="linenr">1: </span>(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">org-todo</span>(after my-org-diary-float-property-hook)
<span class="linenr">2: </span>  <span style="color: #cd5c5c;">""</span>
<span class="linenr">3: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((end   (my-org-get-end-head))
<span class="linenr">4: </span>         (elem  (org-element-headline-parser end t)))
<span class="linenr">5: </span>    (<span style="color: #20b2aa; font-weight: bold;">if</span> (org-element-property <span style="color: #76ee00;">:DIARYF</span> elem) (my-org-diary-float-next-schedule-diff))
<span class="linenr">6: </span>      ))
<span class="linenr">7: </span>(ad-activate-regexp <span style="color: #ffa07a;">"my-org-diary-float-property-hook"</span>)
</pre>
</div>

<p>
とりあえずこれで望みの動きになった.<br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CHARMM-GUI 使い方まとめ]]></title>
    <link href="http://saito1369.github.io/blog/2018-11-05-201433.html"/>
    <updated>2018-11-05T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/201433</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a>
<ul>
<li><a href="#sec-1-1">1.1. maestro/desmond</a></li>
<li><a href="#sec-1-2">1.2. gromacs</a></li>
<li><a href="#sec-1-3">1.3. やりたいこと</a></li>
</ul>
</li>
<li><a href="#sec-2">2. この文書の目的</a></li>
<li><a href="#sec-3">3. CHARMM-GUI の使い方</a>
<ul>
<li><a href="#sec-3-1">3.1. 表紙</a></li>
<li><a href="#sec-3-2">3.2. Input Generator</a></li>
<li><a href="#sec-3-3">3.3. Quick MD Simulator</a></li>
<li><a href="#sec-3-4">3.4. Model/Chain Selection</a></li>
<li><a href="#sec-3-5">3.5. Manipulate PDB</a></li>
<li><a href="#sec-3-6">3.6. Computed Energy</a></li>
<li><a href="#sec-3-7">3.7. Waterbox Size Options</a></li>
<li><a href="#sec-3-8">3.8. Add ions</a></li>
<li><a href="#sec-3-9">3.9. System Size</a></li>
<li><a href="#sec-3-10">3.10. Force Field Options</a></li>
<li><a href="#sec-3-11">3.11. Input Generation Options</a></li>
<li><a href="#sec-3-12">3.12. Equilibration Input Generation Options</a></li>
<li><a href="#sec-3-13">3.13. Dynamics Input Generation Options</a></li>
<li><a href="#sec-3-14">3.14. download</a></li>
</ul>
</li>
<li><a href="#sec-4">4. MD 計算の実行(production run)</a>
<ul>
<li><a href="#sec-4-1">4.1. gromacs2018</a></li>
<li><a href="#sec-4-2">4.2. desmond</a></li>
<li><a href="#sec-4-3">4.3. namd</a></li>
<li><a href="#sec-4-4">4.4. amber</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-05 Mon 20:14&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-07-04 Thu 15:44&gt;</span></span><br  />
</p>
<p>
CHARMM-GUI を使って MD 計算用の構造をさくっと作る.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
MD (Molecular Dynamics) 計算を行うプログラムの主なもの(自分が知ってるもの).<br  />
</p>
<ul class="org-ul">
<li>maestro/desmond (Academic Free)<br  />
</li>
<li>gromacs<br  />
</li>
<li>namd<br  />
</li>
<li>amber (free 版では CPU のみ)<br  />
</li>
<li>cosgene<br  />
</li>
</ul>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> maestro/desmond</h3>
<div class="outline-text-3" id="text-1-1">
<p>
今の一押しは  <a href="https://www.deshawresearch.com/resources_desmond.html">maestro/desmond</a> .<br  />
maestro は PDB データの準備から MD 計算用の構造の作成(水素付加したりとか, 周りに水入れたりとか, 足りない部分補ったりとか),<br  />
望みの MD 計算を行うまでの支援を行ってくれる GUI 部分.<br  />
desmond は MD 計算を実際に行うエンジン部分.<br  />
GUI で構造を作っていけるのでわかりやすくてよい.<br  />
手順どおりにやってけばいいので割と簡単.<br  />
手順を script に書いて自動で計算させる事もできる.<br  />
GPU を使えば計算はめちゃくちゃ速い. 速すぎてほんとに出来たのかよと思うほどである.<br  />
糖鎖とかリガンドとか色々ついてても基本自動でよしなにやってくれる.<br  />
素晴らしすぎる.<br  />
</p>

<p>
しかしこれは academic free なのである. そして free 版では使えない機能が結構あったりする.<br  />
商用版と free 版では使える力場も異なる.<br  />
マニュアルにこの機能は使えないって明示的に書いてないこともある.<br  />
やってみてエラーが出てはじめて使えないってわかったりもする.<br  />
その辺微妙に不親切な感じ.<br  />
</p>

<p>
純粋な academic 研究ならこれを使うのがいいと思う.<br  />
どれくらい五月蝿く言われるのかわからないがお金が絡むような場合は避けるのが無難か.<br  />
</p>

<p>
もしくは <a href="https://www.schrodinger.com/jp/desmond">Schrodinger 社</a> から一式を購入するか.<br  />
</p>

<p>
買い方よくわかんないけど&#x2026;<br  />
日本語の HP が表紙しかないようだ.<br  />
login するために request new password を何度か申請してみたが返事がなかった.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> gromacs</h3>
<div class="outline-text-3" id="text-1-2">
<p>
次のおすすめは <a href="http://www.gromacs.org/">gromacs</a> である.<br  />
</p>

<p>
gromacs は蛋白質だけの計算をするんであれば全く問題なく使える.<br  />
</p>

<p>
ligand がある場合は <a href="https://www.ccpn.ac.uk/v2-software/software/ACPYPE-folder">acpype</a> を使えばよい.<br  />
</p>

<p>
amber で amber 力場でのファイルを作成して acpype で gromacs に <a href="http://ambermd.org/tutorials/pengfei/index.htm">変換</a> でもいい.<br  />
</p>

<p>
計算速度は, desmond よりは 3 倍位遅い印象(GPU 使用時).<br  />
もうちょっと速くなってくれればなぁと思う今日このごろである.<br  />
</p>

<p>
リガンド的な化合物がある場合は acpype を使えばいいけど, 糖鎖とかがある場合(糖鎖がアミノ酸に共有結合してる)は色々と難しいようだ.<br  />
量子化学計算のプログラムが無いと出来ないっぽい. 例えば Gaussian とか. お金が無いので使ったことないけど <a href="http://blog.livedoor.jp/ag_plusplus/archives/68324049.html">何かムズかしそう</a>.<br  />
GAMESS とか Firefly とかいう freeware をインストールして使ってみたり, <a href="http://upjv.q4md-forcefieldtools.org/REDServer-Development/upload-log.php">R.E.D. Server</a> で計算させてみたり,<br  />
aspype で出来ないかなと思って頑張ってやってみたこともあったが結局よくわかんなかった.<br  />
</p>

<p>
gromacs 上で糖鎖入れた状態で MD 計算をさくっと出来ないもんかなぁ.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> やりたいこと</h3>
<div class="outline-text-3" id="text-1-3">
<p>
ここでやりたいことは以下である:<br  />
gromacs(及びそのほかの MD 計算プログラム)で使う構造ファイルの作成を出来るだけ簡単に行いたい.<br  />
特に糖鎖のようなアミノ酸じゃない化合物が本体の蛋白質に共有結合してるような場合でも何とか簡単に出来ないもんだろうか.<br  />
</p>

<p>
色々調べてたら<br  />
<a href="http://bit.ly/2yE89EK">How can I generate input files for MD simulations, performed in Gromacs, Namd and Charmm?</a><br  />
というサイトから<br  />
<a href="http://www.charmm-gui.org/">CHARMM-GUI</a> とかいうめちゃ便利そうなサイトを見つけた.<br  />
</p>

<p>
色々と自動でやってくれるっぽい？ 求めてるのはこれかも？<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> この文書の目的</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>CHARMM-GUI の使い方を自分が後で思い出せるように解説しておくこと.<br  />
</li>
<li>すぐに使えるように script を整備しておくこと.<br  />
</li>
<li>各々の MD プログラムで, production run までの注意点/修正点等を記録しておくこと.<br  />
</li>
</ul>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> CHARMM-GUI の使い方</h2>
<div class="outline-text-2" id="text-3">
<p>
基本的には書いてある通りにやればいい.<br  />
準備しておくのは, MD simulation を行いたい系の PDB ファイル(あるいは PDB ID)のみである.<br  />
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 表紙</h3>
<div class="outline-text-3" id="text-3-1">
<p>
表紙は以下のような感じである(2018/11/15 現在)<br  />
<a href="http://www.charmm-gui.org/">http://www.charmm-gui.org/</a><br  />
</p>


<div class="figure">
<p><img src="dat/img/2018-11-05-201433-01index_html.png" alt="2018-11-05-201433-01index_html.png" /><br  />
</p>
</div>

<p>
左側の Input Generator をクリックして次へ行く.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Input Generator</h3>
<div class="outline-text-3" id="text-3-2">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-02input_generator.png" alt="2018-11-05-201433-02input_generator.png" /><br  />
</p>
</div>

<p>
左側の Quick MD Simulator をクリックして次へ行く.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Quick MD Simulator</h3>
<div class="outline-text-3" id="text-3-3">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2019-07-04 Thu]</span></span> 追記 Solvation Builder という名前に変わってる. Solvator + Quick MD Simulator =&gt; Solvation Builder?<br  />
基本的なやり方は同じようだ.<br  />
</p>


<div class="figure">
<p><img src="dat/img/2018-11-05-201433-03qmd_simulator01.png" alt="2018-11-05-201433-03qmd_simulator01.png" /><br  />
</p>
</div>

<p>
下の方に PDB ID や PDB ファイルを入れるところがある.<br  />
</p>


<div class="figure">
<p><img src="dat/img/2018-11-05-201433-04qmd_simulator02.png" alt="2018-11-05-201433-04qmd_simulator02.png" /><br  />
</p>
</div>

<p>
ここで使う PDB ファイルをアップロードする.<br  />
水素はなくても良い(default では付け直すので <span class="timestamp-wrapper"><span class="timestamp">[2019-02-13 Wed]</span></span> 追記: 水素が無いと化合物の自動同定が難しくなるのでやっぱつけといたほうがいい).<br  />
wild type でいい(mutation を設定するところがあるので).<br  />
</p>

<p>
Nest Step: Select Model/Chain をクリックして次へ行く.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> Model/Chain Selection</h3>
<div class="outline-text-3" id="text-3-4">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-05manu_pdb.png" alt="2018-11-05-201433-05manu_pdb.png" /><br  />
</p>
</div>

<p>
PDB ファイルの解析結果が示される. どの部分構造を使うかチェックを入れる. default では全部使う.<br  />
</p>

<p>
Nest Step: Manipulate PDB をクリックして次へ.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> Manipulate PDB</h3>
<div class="outline-text-3" id="text-3-5">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-06generate_pdb.png" alt="2018-11-05-201433-06generate_pdb.png" /><br  />
</p>
</div>

<p>
default では元々ついてる CAP(ACE など), 水素とかは一旦外されるっぽい(？)<br  />
アップロードした PDB ファイルについてる(自分でつけておいた)水素を使いたければ Preserve hydrogen coordinates にチェックを入れるとよい.<br  />
Terminal group patching には default でチェックがついてる. 外さなくていいかと思う.<br  />
Protonation, Disulfide Bonds, Mutation 等はチェックを入れれば選択肢が出てくる.<br  />
Disulfide Bonds は指定しなくてもある程度は自動で認識してくれてるようだ.<br  />
</p>

<p>
これらの設定をした後 PDB ファイルを作成し直す.<br  />
Next Step: Generate PDB をクリック.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> Computed Energy</h3>
<div class="outline-text-3" id="text-3-6">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-07solvate.png" alt="2018-11-05-201433-07solvate.png" /><br  />
</p>
</div>

<p>
計算結果を確認する. たまに Energy にありえん値が入ってることがあるので注意.<br  />
結果が変であれば最初からやり直す.<br  />
</p>

<p>
遭遇した変な計算結果の例:<br  />
</p>
<pre class="example">
ENER ENR:  Eval#     ENERgy      Delta-E         GRMS
ENER INTERN:          BONDs       ANGLes       UREY-b    DIHEdrals    IMPRopers
ENER CROSS:           CMAPs        PMF1D        PMF2D        PRIMO
ENER EXTERN:        VDWaals         ELEC       HBONds          ASP         USER
ENER IMAGES:        IMNBvdw       IMELec       IMHBnd       RXNField    EXTElec
 ----------       ---------    ---------    ---------    ---------    ---------
ENER&gt;        0  0.34485E+67  0.00000E+00  0.50297E+04
ENER INTERN&gt;    11447.85374   1251.81849    848.71042   3924.08889      7.92236
ENER CROSS&gt;        41.52221      0.00000      0.00000      0.00000
ENER EXTERN&gt;    0.34485E+67  0.24339E+08  0.00000E+00  0.00000E+00  0.00000E+00
ENER IMAGES&gt;   202108.80212   -624.50570      0.00000      0.00000      0.00000
 ----------       ---------    ---------    ---------    ---------    ---------
</pre>

<p>
0.34485E+67 とか.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> Waterbox Size Options</h3>
<div class="outline-text-3" id="text-3-7">
<p>
基本 default で良いかと思う.<br  />
Rectaugular 以外にも選択肢がいくつかある.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> Add ions</h3>
<div class="outline-text-3" id="text-3-8">
<p>
default で問題ないと思うが自分は KCl -&gt; NaCl に変更してる.<br  />
</p>

<p>
ここまで設定が終わったら Next Step: Solvate Molecule をクリックする.<br  />
しばらく(結構)時間がかかる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-9" class="outline-3">
<h3 id="sec-3-9"><span class="section-number-3">3.9</span> System Size</h3>
<div class="outline-text-3" id="text-3-9">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-08pboundary.png" alt="2018-11-05-201433-08pboundary.png" /><br  />
</p>
</div>

<p>
そのまま次に行こう.<br  />
Next Step: Setup Periodic Boundary Condition<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-10" class="outline-3">
<h3 id="sec-3-10"><span class="section-number-3">3.10</span> Force Field Options</h3>
<div class="outline-text-3" id="text-3-10">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-09makeinputs.png" alt="2018-11-05-201433-09makeinputs.png" /><br  />
</p>
</div>

<p>
CHARMM36 と CHARMM36m の２つの選択肢がある.<br  />
default の CHARMM36m でいいだろう.<br  />
</p>

<p>
注: 力場について<br  />
 default は CHARMM36m である.<br  />
 CHARMM-GUI で選択出来る力場に関する論文は以下にある.<br  />
   <a href="https://www.ncbi.nlm.nih.gov/pubmed/23832629">CHARMM36 all-atom additive protein force field: validation based on comparison to NMR data</a><br  />
   <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5199616/">CHARMM36m: An Improved Force Field for Folded and Intrinsically Disorderd Proteins</a><br  />
 ざっと見ると, C36 は左巻き helix ができやすくて NMR のデータと合ってないと書いてある.<br  />
 改良してるんだから C36m の方でいいのかな.<br  />
</p>

<p>
cosgene の設計書に, CHARMMm 力場での相互作用計算について, Amber 力場との比較が書いてある.<br  />
どんな関数を計算してるかがめちゃわかりやすく書いてあり超参考になる.<br  />
  <a href="http://www.jbic.or.jp/activity/st_pr_pj/mypresto/files2/cosgene_design6.pdf">cosgene_design6</a><br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-11" class="outline-3">
<h3 id="sec-3-11"><span class="section-number-3">3.11</span> Input Generation Options</h3>
<div class="outline-text-3" id="text-3-11">
<p>
使いたい MD engine をチェックする.<br  />
実際自分が使うのは Gromacs, Amber, Desmond くらいか.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-3-12" class="outline-3">
<h3 id="sec-3-12"><span class="section-number-3">3.12</span> Equilibration Input Generation Options</h3>
<div class="outline-text-3" id="text-3-12">
<p>
NVT Ensemble でよい<br  />
</p>
</div>
</div>
<div id="outline-container-sec-3-13" class="outline-3">
<h3 id="sec-3-13"><span class="section-number-3">3.13</span> Dynamics Input Generation Options</h3>
<div class="outline-text-3" id="text-3-13">
<p>
NPT Ensemble (default) でよい.<br  />
</p>

<p>
ここまで設定が終わったら Next Step: Generate Equilibration and Dynamics Inputs をクリックして終了である.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-14" class="outline-3">
<h3 id="sec-3-14"><span class="section-number-3">3.14</span> download</h3>
<div class="outline-text-3" id="text-3-14">

<div class="figure">
<p><img src="dat/img/2018-11-05-201433-10download.png" alt="2018-11-05-201433-10download.png" /><br  />
</p>
</div>

<p>
download.tgz をクリックすれば計算結果のダウンロードが始まる.<br  />
charmm-gui.tgz という名前のファイルがダウンロードされる.<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> MD 計算の実行(production run)</h2>
<div class="outline-text-2" id="text-4">
<p>
各々の MD engine での起動方法<br  />
charmm-gui.tgz を展開するとそれぞれの MD engine ごとに使用する構造ファイル及びパラメータファイル(の雛形)が出来ているのでそれを使えばよい.<br  />
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> gromacs2018</h3>
<div class="outline-text-3" id="text-4-1">
<p>
step5_production.mdp 内の nsteps=500000 = (1ns) 等パラメータをいくつか変更する.<br  />
</p>

<p>
step5_production.mdp の変更例は以下:<br  />
</p>
<pre class="example">
dt        = 0.002     # 変えない. 2(fs) 0.002*500(step) =1(ps) 500steps = 1ps
nsteps    = 50000000  # 例: 100(ns)
nstlog    = 5000      # log ファイル書き出す頻度
nstxout   = 25000     # trr ファイルに構造書き出す頻度
nstvout   = 25000     # trr ファイル  速度
nstfout   = 25000     # trr ファイル  力
nstcalcenergy = 100   # ここは変えなくていい?
nstenergy = 5000      # edr ファイルに energy を書き出す頻度 every 10(ps)
</pre>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2019-07-04 Thu]</span></span> 追記:<br  />
  step4.0_minimization.mdp  の nsteps=50000  (&lt;- 5000)  に変更.<br  />
  step4.1_equilibration.mdp の nsteps=250000 (&lt;- 25000) に変更.<br  />
</p>

<p>
以下の script 経由で実行できる.<br  />
shell script でいいけど自分は perl が一番わかり易いので perl で書いてみた.<br  />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">!/usr/bin/env perl</span>
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;">#</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">CHARMM-GUI Quick MD Simulator &#12391;&#20316;&#12425;&#12428;&#12383;&#12501;&#12449;&#12452;&#12523;&#12398;&#23455;&#34892; script</span>
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">gromacs2018 &#29256;</span>
<span class="linenr"> 8: </span><span style="color: #cd853f;">#</span>
<span class="linenr"> 9: </span>
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd</span>=<span style="color: #ffa07a;">"/usr/local/gromacs2018.gpu/bin/gmx"</span>;
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$pdb</span>  =<span style="color: #ffa07a;">"step3_charmm2gmx.pdb"</span>;
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$top</span>  =<span style="color: #ffa07a;">"topol.top"</span>;
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$idx</span>  =<span style="color: #ffa07a;">"index.ndx"</span>;
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">1. &#27083;&#36896;&#26368;&#36969;&#21270;</span>
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step4.0</span>
<span class="linenr">17: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$mdp40</span>=<span style="color: #ffa07a;">"step4.0_minimization.mdp"</span>;
<span class="linenr">18: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$tpr40</span>=<span style="color: #ffa07a;">"step4.0_minimization.tpr"</span>;
<span class="linenr">19: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd40</span>=<span style="color: #ffa07a;">"$cmd grompp -f $mdp40 -o $tpr40 -c $pdb -p $top -r $pdb"</span>;
<span class="linenr">20: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md40</span> =<span style="color: #ffa07a;">"$cmd mdrun -v -deffnm step4.0_minimization"</span>;
<span class="linenr">21: </span><span style="color: #ff83fa;">print</span> $cmd40.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">22: </span><span style="color: #9370db;">system</span>($cmd40);
<span class="linenr">23: </span><span style="color: #ff83fa;">print</span> $md40.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">24: </span><span style="color: #9370db;">system</span>($md40);
<span class="linenr">25: </span>
<span class="linenr">26: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">2. &#24179;&#34913;&#21270; MD</span>
<span class="linenr">27: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step4.1</span>
<span class="linenr">28: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$gro41</span>=<span style="color: #ffa07a;">"step4.0_minimization.gro"</span>;
<span class="linenr">29: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$mdp41</span>=<span style="color: #ffa07a;">"step4.1_equilibration.mdp"</span>;
<span class="linenr">30: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$tpr41</span>=<span style="color: #ffa07a;">"step4.1_equilibration.tpr"</span>;
<span class="linenr">31: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd41</span>=<span style="color: #ffa07a;">"$cmd grompp -f $mdp41 -o $tpr41 -c $gro41 -r $pdb -n $idx -p $top"</span>;
<span class="linenr">32: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md41</span> =<span style="color: #ffa07a;">"$cmd mdrun -v -deffnm step4.1_equilibration"</span>;
<span class="linenr">33: </span><span style="color: #ff83fa;">print</span> $cmd41.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">34: </span><span style="color: #9370db;">system</span>($cmd41);
<span class="linenr">35: </span><span style="color: #ff83fa;">print</span> $md41.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">36: </span><span style="color: #9370db;">system</span>($md41);
<span class="linenr">37: </span>
<span class="linenr">38: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">3. Production Run</span>
<span class="linenr">39: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step5</span>
<span class="linenr">40: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$gro50</span>=<span style="color: #ffa07a;">"step4.1_equilibration.gro"</span>;
<span class="linenr">41: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$mdp50</span>=<span style="color: #ffa07a;">"step5_production.mdp"</span>;      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26360;&#12365;&#25563;&#12360;&#12427;</span>
<span class="linenr">42: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$tpr50</span>=<span style="color: #ffa07a;">"step5_0.tpr"</span>;
<span class="linenr">43: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd50</span>=<span style="color: #ffa07a;">"$cmd grompp -f $mdp50 -o $tpr50 -c $gro50 -n $idx -p $top -r $gro50"</span>;
<span class="linenr">44: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md50</span> =<span style="color: #ffa07a;">"$cmd mdrun -v -deffnm step5_0"</span>;
<span class="linenr">45: </span><span style="color: #ff83fa;">print</span> $cmd50.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">46: </span><span style="color: #9370db;">system</span>($cmd50);
<span class="linenr">47: </span><span style="color: #ff83fa;">print</span> $md50.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">48: </span><span style="color: #9370db;">system</span>($md50);
<span class="linenr">49: </span>
<span class="linenr">50: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">$ex(ps) &#12378;&#12388;&#36861;&#21152;&#35336;&#31639;&#12377;&#12427;&#22580;&#21512;(&#24517;&#35201;&#12394;&#12425;&#12400;)</span>
<span class="linenr">51: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">extend 1000(ps)</span>
<span class="linenr">52: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ex</span>=1000; <span style="color: #cd853f;"># </span><span style="color: #cd853f;">ps</span>
<span class="linenr">53: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$max</span>=2;
<span class="linenr">54: </span><span style="color: #20b2aa; font-weight: bold;">for</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$p</span> (0 .. $max) {
<span class="linenr">55: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$n</span>=$p+1;
<span class="linenr">56: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cpi</span>  =<span style="color: #ffa07a;">"step5_"</span>.$p.<span style="color: #ffa07a;">".cpt"</span>;
<span class="linenr">57: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$tpr5p</span>=<span style="color: #ffa07a;">"step5_"</span>.$p.<span style="color: #ffa07a;">".tpr"</span>;
<span class="linenr">58: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$tpr5n</span>=<span style="color: #ffa07a;">"step5_"</span>.$n.<span style="color: #ffa07a;">".tpr"</span>;
<span class="linenr">59: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$deff</span> =<span style="color: #ffa07a;">"step5_"</span>.$n;
<span class="linenr">60: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd5x</span>=<span style="color: #ffa07a;">"$cmd convert-tpr -s $tpr5p -o $tpr5n -extend $ex"</span>;   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">-f -e &#12399;&#24259;&#27490;</span>
<span class="linenr">61: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md5x</span> =<span style="color: #ffa07a;">"$cmd mdrun -v -s $tpr5n -deffnm $deff -cpi $cpi -noappend"</span>;
<span class="linenr">62: </span>  <span style="color: #ff83fa;">print</span> $cmd5x.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">63: </span>  <span style="color: #9370db;">system</span>($cmd5x);
<span class="linenr">64: </span>  <span style="color: #ff83fa;">print</span> $md5x.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">65: </span>  <span style="color: #9370db;">system</span>($md5x);
<span class="linenr">66: </span>}
</pre>
</div>


<p>
手動でやるならば以下のコマンドを順に起動すればよい.<br  />
最適化計算:<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">gmx grompp -f step4.0_minimization.mdp -o step4.0_minization.tpr -c step3_chamm2gmx.pdb -p topol.top -r step3_charmm2gmx.pdb
gmx mdrun -v -deffnm step4.0_minimization
</pre>
</div>

<p>
平衡化MD:<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">gmx grompp -f step4.1_equilibration.mdp -o step4.1_equilibration.tpr -c step4.0_minimization.gro -r step3_charmm2gmx.pdb -n index.ndx -p topol.top
gmx mdrun -v -deffnm step4.1_equilibration
</pre>
</div>

<p>
MD 計算:<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">gmx grompp -f step5_production.mdp -o step5_0.tpr -c step4.1_equilibration.gro -n index.ndx -p topol.top -r step4.1_equilibration.gro
gmx mdrun -v -deffnm step5_0
</pre>
</div>

<p>
extend(必要ならば):<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">gmx convert-tpr -s step5_0.tpr -o step5_1.tpr -extend 1000             <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20197;&#21069;&#12398;&#35336;&#31639;&#12398;&#26368;&#32066;&#12363;&#12425; 1000 (ps) &#12384;&#12369;&#35336;&#31639;&#12434;&#36914;&#12417;&#12427;</span>
gmx mdrun -v -s step5_1.tpr -deffnm step5_1 -cpi step5_0.cpt -noappend <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26032;&#12375;&#12356;&#12501;&#12449;&#12452;&#12523;&#12395;&#26360;&#12365;&#20986;&#12375;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> desmond</h3>
<div class="outline-text-3" id="text-4-2">
<p>
このままでは動かなかったのでファイルを修正する.<br  />
</p>

<p>
4.0_equilibration の計算において<br  />
</p>
<ol class="org-ol">
<li>cfg ファイルを以下のように修正する:<br  />
1.1. list = [status &#x2026; simbox_output maeff_output &#x2026;.] の simbox_output, maeff_output を削除<br  />
1.2. trajectory { name = hogehoge_trj &#x2026;} のように名前の最後に "_trj" をつける<br  />
</li>
<li>cms ファイルを以下のように修正する:<br  />
2.1. 残基名が 4 文字以上のものがあればうまく読み込めないので 4 文字以下に修正する.<br  />
</li>
</ol>

<p>
step5_production.cfg ファイルの time=1000 (1ns) を修正する.<br  />
</p>

<p>
以下で desmond を起動する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">!/usr/bin/env perl</span>
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd</span>=<span style="color: #ffa07a;">'/opt/schrodinger2018-1/desmond'</span>;
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s4</span>=<span style="color: #ffa07a;">'step4.0_minimization.cfg'</span>;
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$eq</span>=<span style="color: #ffa07a;">'step4.1_equilibration.cfg'</span>;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s5</span>=<span style="color: #ffa07a;">'step5_production.cfg'</span>;
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$min</span>=<span style="color: #ffa07a;">"$cmd -c $s4 -WAIT"</span>;
<span class="linenr">12: </span><span style="color: #ff83fa;">print</span> $min.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">13: </span><span style="color: #9370db;">system</span>($min);
<span class="linenr">14: </span>
<span class="linenr">15: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$equ</span>=<span style="color: #ffa07a;">"$cmd -c $eq -WAIT -gpu"</span>;
<span class="linenr">16: </span><span style="color: #ff83fa;">print</span> $equ.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">17: </span><span style="color: #9370db;">system</span>($equ);
<span class="linenr">18: </span>
<span class="linenr">19: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$pro</span>=<span style="color: #ffa07a;">"$cmd -c $s5 -WAIT -gpu"</span>;
<span class="linenr">20: </span><span style="color: #ff83fa;">print</span> $pro.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">21: </span><span style="color: #9370db;">system</span>($pro);
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> namd</h3>
<div class="outline-text-3" id="text-4-3">
<p>
step5_production.inp の run = 500000 (1ns) を書き換えてから<br  />
以下のように起動出来る<br  />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">!/usr/bin/env perl</span>
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd</span>=<span style="color: #ffa07a;">'/usr/local/bin/namd2'</span>;
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s4</span>=<span style="color: #ffa07a;">'step4_equilibration.inp'</span>;
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$l4</span>=<span style="color: #ffa07a;">'step4.log'</span>;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s5</span>=<span style="color: #ffa07a;">'step5_production.inp'</span>;
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$l5</span>=<span style="color: #ffa07a;">'step5.log'</span>;
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step4: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md4</span>=<span style="color: #ffa07a;">"$cmd +p10 $s4 &gt; $l4"</span>;
<span class="linenr">14: </span><span style="color: #ff83fa;">print</span> $md4.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">15: </span><span style="color: #9370db;">system</span>($md4);
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step5: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">18: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$md5</span>=<span style="color: #ffa07a;">"$cmd +p10 $s5 &gt; $l5"</span>;
<span class="linenr">19: </span><span style="color: #ff83fa;">print</span> $md5.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">20: </span><span style="color: #9370db;">system</span>($md5);
<span class="linenr">21: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'end : '</span>.<span style="color: #ffa07a;">`date`</span>;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> amber</h3>
<div class="outline-text-3" id="text-4-4">
<p>
step5_production.mdin nstlim=500000 (=1ns) を修正して<br  />
以下の script で起動する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">!/usr/bin/env perl</span>
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;">#</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">charmm-gui &#12391;&#24471;&#12383;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#29992;&#12356;&#12383; amber(sander) MD &#35336;&#31639;</span><span style="text-decoration: underline;"> </span>
<span class="linenr"> 7: </span><span style="color: #cd853f;">#</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd</span>=<span style="color: #ffa07a;">"/usr/local/bin/sander"</span>;
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27083;&#36896;&#26368;&#36969;&#21270;</span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step4.0</span>
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s3</span>=<span style="color: #ffa07a;">'step3_charmm2amber'</span>;
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s4</span>=<span style="color: #ffa07a;">'step4.0_minimization'</span>;
<span class="linenr">15: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd40</span>=<span style="color: #ffa07a;">"$cmd -O -i $s4.mdin -p $s3.parm7 -c $s3.rst7 -o $s4.mdout -r $s4.rst7 -inf $s4.mdinfo -ref $s3.rst7"</span>;
<span class="linenr">16: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step4.0 stt: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">17: </span><span style="color: #ff83fa;">print</span> $cmd40.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">18: </span><span style="color: #9370db;">system</span>($cmd40);
<span class="linenr">19: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step4.0 end: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">20: </span>
<span class="linenr">21: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24179;&#34913;&#21270;</span>
<span class="linenr">22: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step4.1</span>
<span class="linenr">23: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$eq</span>=<span style="color: #ffa07a;">'step4.1_equilibration'</span>;
<span class="linenr">24: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd41</span>=<span style="color: #ffa07a;">"$cmd -O -i $eq.mdin -p $s3.parm7 -c $s4.rst7 -o $eq.mdout -r $eq.rst7 -inf $eq.mdinfo -ref $s3.rst7 -x $eq.nc"</span>;
<span class="linenr">25: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step4.1 stt: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">26: </span><span style="color: #ff83fa;">print</span> $cmd41.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">27: </span><span style="color: #9370db;">system</span>($cmd41);
<span class="linenr">28: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step4.1 end: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">29: </span>
<span class="linenr">30: </span>
<span class="linenr">31: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">Production Run</span>
<span class="linenr">32: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">step5</span>
<span class="linenr">33: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$s5</span>=<span style="color: #ffa07a;">'step5_production'</span>;
<span class="linenr">34: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$st</span>=<span style="color: #ffa07a;">'step5_0'</span>;
<span class="linenr">35: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd50</span>=<span style="color: #ffa07a;">"$cmd -O -i $s5.mdin -p $s3.parm7 -c $eq.rst7 -o $st.mdout -r $st.rst7 -inf $st.mdinfo -x $st.nc"</span>;
<span class="linenr">36: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step5.0 stt: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">37: </span><span style="color: #ff83fa;">print</span> $cmd50.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">38: </span><span style="color: #9370db;">system</span>($cmd50);
<span class="linenr">39: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step5.0 end: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">40: </span>
<span class="linenr">41: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">Extend</span>
<span class="linenr">42: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$max</span>=2;   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#26356;</span>
<span class="linenr">43: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step5.1 stt: '</span>.<span style="color: #ffa07a;">`date`</span>;
<span class="linenr">44: </span><span style="color: #20b2aa; font-weight: bold;">for</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$p</span> (0 .. $max) {
<span class="linenr">45: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$n</span>=$p+1;
<span class="linenr">46: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$pt</span>=<span style="color: #ffa07a;">'step5_'</span>.$p;
<span class="linenr">47: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$st</span>=<span style="color: #ffa07a;">'step5_'</span>.$n;
<span class="linenr">48: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cmd51</span>=<span style="color: #ffa07a;">"$cmd -O -i $s5.mdin -p $s3.parm7 -c $pt.rst7 -o $st.mdout -r $st.rst7 -inf $st.mdinfo -x $st.nc"</span>;
<span class="linenr">49: </span>  <span style="color: #ff83fa;">print</span> $cmd51.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">50: </span>  <span style="color: #9370db;">system</span>($cmd51);
<span class="linenr">51: </span>}
<span class="linenr">52: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">'step5.1 end: '</span>.<span style="color: #ffa07a;">`date`</span>;
</pre>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[desmond/maestro による MD 計算準備の自動化]]></title>
    <link href="http://saito1369.github.io/blog/2018-10-17-172030.html"/>
    <updated>2018-10-17T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/172030</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. Protein Preparation</a>
<ul>
<li><a href="#sec-2-1">2.1. PDB ファイルの読み込み</a></li>
<li><a href="#sec-2-2">2.2. 水素付加</a></li>
<li><a href="#sec-2-3">2.3. 化合物の削除</a></li>
<li><a href="#sec-2-4">2.4. 変異体の作成</a></li>
<li><a href="#sec-2-5">2.5. mae ファイルへの変換</a></li>
<li><a href="#sec-2-6">2.6. 水素位置の optimize</a></li>
<li><a href="#sec-2-7">2.7. fake X server</a></li>
</ul>
</li>
<li><a href="#sec-3">3. System Setup(multisim)</a></li>
<li><a href="#sec-4">4. Molecular Dynamics</a></li>
<li><a href="#sec-5">5. 手順まとめ</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-10-17 Wed 17:20&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-02-13 Wed 19:06&gt;</span></span><br  />
</p>
<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
maestro/desmond による MD 計算手順の典型例は以下である.<br  />
</p>

<p>
maestro を立ち上げる.<br  />
</p>
<ol class="org-ol">
<li>Protein Preparation ウインドウから<br  />
1.1. Import and Process タブ<br  />
1.1.1. PDB ファイルを読み込む<br  />
1.1.2. 水素付加(Preprocess)<br  />
<ul class="org-ul">
<li>CAP termini にチェックして N端, C端の処理<br  />
</li>
<li>Delete waters beyond 5 (default) (チェック入れたり入れなかったり)<br  />
</li>
</ul>
<p>
1.2. Review and Modify タブ<br  />
     EDO 等のいらない化合物の削除<br  />
     (この時点での PDB ファイル保存しておく)  PDBID_addH_delEDO.pdb<br  />
1.3. mutant 作成(ex. E66K)<br  />
     (この時点での PDB ファイル保存しておく)  PDBID_addH_delEDO_E66K.pdb<br  />
     maestro 形式のファイルを保存する必要あり PDBID_addH_delEDO_E66K.mae<br  />
1.4. Refine タブ<br  />
     Optimize(水素位置の optimize)<br  />
     maestro 形式のファイルを読み込んで,<br  />
     maestro 形式のファイルが出力される PDBID_addH_delEDO_E66K_opt.mae<br  />
</p>
</li>
<li>System Setup<br  />
2.1. Solvation タブ<br  />
     Minimize Volume<br  />
2.2. Ions タブ<br  />
     Na+ (or Cl-) での neutralize<br  />
     Ad salt 0.15M<br  />
     (この時点での cms ファイル保存しておく) PDBID_addH_delEDO_E66K_opt_sol.cms<br  />
</li>
<li>MD パラメータについて<br  />
MD 計算に必要なファイルは cms/msj/cfg ファイル.<br  />
cms は上で作成済<br  />
msj/cfg ファイルは maestro で一度作成したのを使い回すことにする.<br  />
基本的には毎回同じなので.(cfg ファイルのパラメータ seed は毎回変更する)<br  />
</li>
</ol>

<p>
これらを自動化(script 化)したいというのがここでの目標.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Protein Preparation</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> PDB ファイルの読み込み</h3>
<div class="outline-text-3" id="text-2-1">
<p>
まずは PDB ファイルを読み込む.<br  />
getpdb コマンドを使えば良い.<br  />
</p>

<p>
getpdb PDBID<br  />
getpdb PDBID:CHAIN_NAME<br  />
のように使えば良いらしい.<br  />
詳しくは getpdb -h とやれば詳細なパラメタが出てくる.<br  />
とりあえず以下でいいだろう.<br  />
</p>

<p>
001getpdb.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="001getpdb.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/utilities/getpdb PDBID
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">$SCHRODINGER/utilities/getpdb PDBID:A  # chain &#25351;&#23450;&#12391;&#35501;&#12415;&#36796;&#12415;&#12383;&#12356;&#22580;&#21512;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 水素付加</h3>
<div class="outline-text-3" id="text-2-2">
<p>
続いて水素付加を行う.<br  />
水素付加は prepwizard コマンドで出来る.<br  />
prepwizard -h で詳細がみられる.<br  />
</p>

<p>
002addH.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="002addH.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/utilities/prepwizard -c -WAIT -NOJOBID <span style="color: #ffa07a;">\</span>
         -noepik -noimpref -noprotassign PDBID.pdb PDBID_addH.pdb
</pre>
</div>
<p>
-c option は Cap termini のチェック<br  />
Delete waters beyond 5 (default) のチェックを外すときには -keepfarwat option を追加.<br  />
-noepik -noimpref -nopropassign は, maestro Academic Only 版を使ってる場合は必須？これが無いとエラーとなる.<br  />
</p>

<p>
注: 水素付加プログラムを上記コマンドでやるときと, maestro の GUI でやるときでは, 微妙に構造が異なる場合がある. =&gt; 小数点第三位の数値が異なる場合がある.<br  />
    maestro(GUI) と全く同じ座標を使いたい場合には, 水素付加までは maestro(GUI)でやったほうがいいかも知れない(wild-type のを一回やればいいだけなんで問題ないかと思われる).<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 化合物の削除</h3>
<div class="outline-text-3" id="text-2-3">
<p>
これは mutation と一緒にやってもよい.<br  />
GUI の maestro を起動しないとできないが, コマンドからで立ち上げて処理が終われば終了する.<br  />
</p>

<p>
maestro -c file.com<br  />
で, file.com にある命令を実行出来るので, コマンドをファイル(file.com)内に書いておく.<br  />
</p>

<p>
具体的な命令の内容については, 以下を参照せよ.<br  />
$SCHROGINGER/docs/Documentation.htm#maestro_command_reference/Command-Language.html<br  />
</p>

<p>
011delHET.m<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="011delHET.m"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">PDB &#12501;&#12449;&#12452;&#12523;&#12398;&#35501;&#12415;&#36796;&#12415;</span>
entryimport PDBID_addH.pdb

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">EDO &#12392;&#12356;&#12358;&#21517;&#21069;&#12398;&#27531;&#22522;&#12434;&#21066;&#38500;&#12377;&#12427;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12394;&#12380;&#12363;&#30693;&#12425;&#12435;&#12364; res. &#12398;&#24460;&#12429;&#12395;&#12473;&#12506;&#12540;&#12473;&#12364;&#28961;&#12356;&#12392;&#12456;&#12521;&#12540;&#12392;&#12394;&#12427;.</span>
delete res. EDO

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">PDB &#12501;&#12449;&#12452;&#12523;&#12398;&#26360;&#12365;&#36796;&#12415;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">format=pdb &#12434;&#25351;&#23450;&#12375;&#12394;&#12356;&#12392;&#21029;&#12501;&#12457;&#12540;&#12510;&#12483;&#12488;&#12395;&#12394;&#12427;</span>
entryexport <span style="color: #9acd32;">format</span>=pdb PDBID_addH_delHET.pdb

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#32066;&#20102;</span>
quit
</pre>
</div>

<p>
上記ファイルを使って実行する.<br  />
</p>

<p>
012delHET.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="012delHET.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/maestro -c 011delHET.m
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> 変異体の作成</h3>
<div class="outline-text-3" id="text-2-4">
<p>
これも maestro 本体を動かさないといけない.<br  />
</p>

<p>
maestro -c file.com で, file.com の中に変異体作成の命令を書く.<br  />
</p>

<p>
013mut.m<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="013mut.m">entryimport PDBID_addH_delHET.pdb

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21407;&#23376;&#25968;&#12364;&#22793;&#12431;&#12427;&#12398;&#12391;(&#24565;&#12398;&#28858;)&#24460;&#12429;&#12398;&#26041;&#12363;&#12425;&#22793;&#30064;&#20307;&#12434;&#20316;&#25104;&#12377;&#12427;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">chain B &#12391; residue id = 66 &#12398;&#22580;&#25152;&#12434;&#35211;&#12388;&#12369;&#12427;</span>
find chain.name B and res.num 66
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">LYS &#12398; fragment &#12434;&#20316;&#25104;</span>
fragment peptide LYS
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21407;&#23376;&#30058;&#21495; 6634 &#20197;&#19979;&#12398;&#27531;&#22522;( residue id =66) &#12395;&#22793;&#30064;&#12434;&#12363;&#12369;&#12427;.</span>
mutate at.n 6634

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">chain A &#12391;&#21516;&#27096;&#12398;&#35336;&#31639;</span>
find chain.name A and res.num 66
fragment peptide LYS
mutate at.n 527

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26360;&#12365;&#20986;&#12375;</span>
entryexport <span style="color: #9acd32;">format</span>=pdb PDBID_addH_delHET_E66K.pdb
</pre>
</div>

<p>
上記を以下のように実行<br  />
013mut.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="013mut.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/maestro -c 0130mut.m
</pre>
</div>

<p>
化合物の削除と同時にやる version<br  />
普段はこっちを使えばよい<br  />
</p>

<p>
01mut.m<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="01mut.m"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">PDB &#12501;&#12449;&#12452;&#12523;&#12391;&#12418;&#12356;&#12356;&#12364;, maestro(GUI)&#12391;&#27700;&#32032;&#20184;&#21152;&#12398;&#24460;&#12395; mae &#12501;&#12449;&#12452;&#12523;&#12434;&#20445;&#23384;&#12375;&#12390;&#12362;&#12367;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">mae &#12501;&#12449;&#12452;&#12523;&#12398;&#26041;&#12364;&#24773;&#22577;&#37327;&#12364;&#22810;&#12356;&#12398;&#12391;</span>
entryimport PDBID_addH.mae

delete res. EDO


fragment peptide LYS
mutate chain.name B and res.num 66

fragment peptide LYS
mutate chain.name A and res.num 66

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">mae &#12501;&#12449;&#12452;&#12523;&#12391;&#20445;&#23384;&#12377;&#12427;. &#27425;&#12398;&#12467;&#12510;&#12531;&#12489;&#12408;&#12399; mae &#12501;&#12449;&#12452;&#12523;&#12375;&#12363;&#28193;&#12379;&#12394;&#12356;&#12398;&#12391;</span>
entryexport <span style="color: #9acd32;">format</span>=maestro PDBID_addH_delHET_E66K.mae

quit
</pre>
</div>

<p>
01mut.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="01mut.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/maestro -c 01mut.m
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5"><span class="section-number-3">2.5</span> mae ファイルへの変換</h3>
<div class="outline-text-3" id="text-2-5">
<p>
pdb -&gt; mae ファイルへ変換(確認用)<br  />
様々な形式変換が出来る.<br  />
詳しくは pdbconvert -h で見られる.<br  />
</p>

<p>
基本は pdbconvert -i(input_format) hoge.pdb -o(output_format) fuga.mae<br  />
</p>

<p>
0140conv.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="0140conv.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/utilities/pdbconvert -ipdb PDBID_addH_delHET_E66K.pdb -omae PDBID_addH_delHET_E66K.mae
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6"><span class="section-number-3">2.6</span> 水素位置の optimize</h3>
<div class="outline-text-3" id="text-2-6">
<p>
$SCHRODINGER/utilities/protassign を用いる.<br  />
protassign -h で詳細な情報が見られる.<br  />
とりあえず今回使うのは -propka_pH 位か？<br  />
</p>

<p>
02refine.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="02refine.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/utilities/protassign -WAIT -NOJOBID -propka_pH 7 PDBID_addH_delHET_E66K.mae PDBID_addH_delHET_E66K_opt.mae
</pre>
</div>


<p>
ついでに mae -&gt; pdb ファイルへの変換は以下のように実行する.<br  />
conv.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="conv.sh">$<span style="color: #9acd32;">SCHRODINGER</span>/utilities/pdbconvert -imae PDBID_addH_delHET_E66K_opt.mae -opdb PDBID_addH_delHET_E66K_opt.pdb
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-7" class="outline-3">
<h3 id="sec-2-7"><span class="section-number-3">2.7</span> fake X server</h3>
<div class="outline-text-3" id="text-2-7">
<p>
化合物の削除, 及び変異体の作成の際には maestro の GUI が起動してしまう.<br  />
このままではいらん GUI のせいで terminal 上のコマンドでプログラムを動かせない.<br  />
そこで xvfb を使う.<br  />
desmond/maestro が動いている linux server 上で<br  />
</p>

<p>
server@: sudo apt-get install xvfb<br  />
server@: export DISPLAY=:2     # 値は何でもいい. :1 とか.<br  />
server@: Xvfb :2 -screen 2 1280x800x24 &amp;<br  />
</p>

<p>
これで化合物の削除, 変異体の作成の script がいらん GUI が立ち上がらずに動く.<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> System Setup(multisim)</h2>
<div class="outline-text-2" id="text-3">
<p>
System Setup の window で Run を実行せずに保存すると<br  />
desmond_setup_1/ 以下に実行 script が保存されることを見つけた.<br  />
この設定ファイルを使うことにする.<br  />
</p>

<p>
入力ファイル desmond_setup_1.mae として上の計算(水素付加関連の一連の作業)後の mae ファイルを使う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">ln -s PDBID_addH_delHET_E66K_opt.mae desmond_setup_1.mae
</pre>
</div>
<p>
こんな感じで入力構造ファイルを確保しておく.<br  />
</p>

<p>
multisim の設定ファイル.<br  />
minimize_volume = true が無ければ手動で追加.<br  />
</p>

<p>
desmond_setup_1.msj<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_setup_1.msj">ask {
  <span style="color: #9acd32;">task</span> = <span style="color: #ffa07a;">"desmond:auto"</span>
}

build_geometry {
  <span style="color: #9acd32;">add_counterion</span> = {
     <span style="color: #9acd32;">ion</span> = Cl
     <span style="color: #9acd32;">number</span> = neutralize_system
  }
  <span style="color: #9acd32;">add_counterion</span> = {
     <span style="color: #9acd32;">ion</span> = Na
     <span style="color: #9acd32;">number</span> = neutralize_system
  }
  <span style="color: #9acd32;">box</span> = {
     <span style="color: #9acd32;">shape</span> = orthorhombic
     <span style="color: #9acd32;">size</span> = [10.0 10.0 10.0 ]
     <span style="color: #9acd32;">size_type</span> = buffer
  }
  <span style="color: #9acd32;">minimize_volume</span> = true   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25163;&#21205;&#12391;&#36861;&#21152;</span>
  <span style="color: #9acd32;">rezero_system</span> = false
  <span style="color: #9acd32;">salt</span> = {
     <span style="color: #9acd32;">concentration</span> = 0.15
     <span style="color: #9acd32;">negative_ion</span> = Cl
     <span style="color: #9acd32;">positive_ion</span> = Na
  }
  <span style="color: #9acd32;">solvent</span> = SPC
}

assign_forcefield {
}
</pre>
</div>

<p>
shell script<br  />
desmond_setup_1.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_setup_1.sh">${<span style="color: #9acd32;">SCHRODINGER</span>}/utilities/multisim<span style="color: #ffa07a;">" -JOBNAME desmond_setup_1 -m desmond_setup_1.msj \</span>
<span style="color: #ffa07a;">   desmond_setup_1.mae -o desmond_setup_1-out.cms -HOST localhost -TMPLAUNCHDIR -ATTACHED</span>
</pre>
</div>

<p>
中身は正直よくわかってないけど.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Molecular Dynamics</h2>
<div class="outline-text-2" id="text-4">
<p>
このあと水及びイオンが溶かされた系を読み込んで,<br  />
MD 計算のパラメータを書き出して MD 計算(multisim)を行っていく.<br  />
書き出しの際に得られるファイルは,<br  />
</p>
<ul class="org-ul">
<li>cms ファイル (上で作成)<br  />
</li>
<li>msj ファイル<br  />
</li>
<li>cfg ファイル<br  />
</li>
</ul>

<p>
msj と cfg は一度 maestro で作っておけば使い回しが出来るのでそれを使うでいいかも(？)<br  />
cfg ファイルの seed (random seed) の値は変更すること.<br  />
</p>

<p>
demond_md_job_1.cfg<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_md_job_1.cfg"><span style="color: #9acd32;">annealing</span> = false
<span style="color: #9acd32;">backend</span> = {
}
<span style="color: #9acd32;">bigger_rclone</span> = false
<span style="color: #9acd32;">checkpt</span> = {
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">interval</span> = 240.06
   <span style="color: #9acd32;">name</span> = <span style="color: #ffa07a;">"$JOBNAME.cpt"</span>
   <span style="color: #9acd32;">write_last_step</span> = true
}
<span style="color: #9acd32;">cpu</span> = 1
<span style="color: #9acd32;">cutoff_radius</span> = 9.0
<span style="color: #9acd32;">elapsed_time</span> = 0.0
<span style="color: #9acd32;">energy_group</span> = false
<span style="color: #9acd32;">eneseq</span> = {
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">interval</span> = 1.2
   <span style="color: #9acd32;">name</span> = <span style="color: #ffa07a;">"$JOBNAME$[_replica$REPLICA$].ene"</span>
}
<span style="color: #9acd32;">ensemble</span> = {
   <span style="color: #9acd32;">barostat</span> = {
      <span style="color: #9acd32;">tau</span> = 2.0
   }
   <span style="color: #9acd32;">class</span> = NPT
   <span style="color: #9acd32;">method</span> = MTK
   <span style="color: #9acd32;">thermostat</span> = {
      <span style="color: #9acd32;">tau</span> = 1.0
   }
}
<span style="color: #9acd32;">glue</span> = solute
<span style="color: #9acd32;">maeff_output</span> = {
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">interval</span> = 120.0
   <span style="color: #9acd32;">name</span> = <span style="color: #ffa07a;">"$JOBNAME$[_replica$REPLICA$]-out.cms"</span>
   <span style="color: #9acd32;">periodicfix</span> = true
   <span style="color: #9acd32;">trjdir</span> = <span style="color: #ffa07a;">"$JOBNAME$[_replica$REPLICA$]_trj"</span>
}
<span style="color: #9acd32;">meta</span> = false
<span style="color: #9acd32;">meta_file</span> = ?
<span style="color: #9acd32;">pressure</span> = [1.01325 isotropic ]
<span style="color: #9acd32;">randomize_velocity</span> = {
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">interval</span> = inf
   <span style="color: #9acd32;">seed</span> = 2007
   <span style="color: #9acd32;">temperature</span> = <span style="color: #ffa07a;">"@*.temperature"</span>
}
<span style="color: #9acd32;">restrain</span> = none
<span style="color: #9acd32;">simbox</span> = {
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">interval</span> = 1.2
   <span style="color: #9acd32;">name</span> = <span style="color: #ffa07a;">"$JOBNAME$[_replica$REPLICA$]_simbox.dat"</span>
}
<span style="color: #9acd32;">surface_tension</span> = 0.0
<span style="color: #9acd32;">taper</span> = false
<span style="color: #9acd32;">temperature</span> = [
   [300.0 0 ]
]
<span style="color: #9acd32;">time</span> = 100000.0
<span style="color: #9acd32;">timestep</span> = [0.002 0.002 0.006 ]
<span style="color: #9acd32;">trajectory</span> = {
   <span style="color: #9acd32;">center</span> = []
   <span style="color: #9acd32;">first</span> = 0.0
   <span style="color: #9acd32;">format</span> = dtr
   <span style="color: #9acd32;">frames_per_file</span> = 250
   <span style="color: #9acd32;">interval</span> = 10.0
   <span style="color: #9acd32;">name</span> = <span style="color: #ffa07a;">"$JOBNAME$[_replica$REPLICA$]_trj"</span>
   <span style="color: #9acd32;">periodicfix</span> = true
   <span style="color: #9acd32;">write_velocity</span> = false
}
</pre>
</div>

<p>
desmond_md_job_1.msj<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_md_job_1.msj"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">Desmond standard NPT relaxation protocol</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">All times are in the unit of ps.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">Energy is in the unit of kcal/mol.</span>
task {
   <span style="color: #9acd32;">task</span> = <span style="color: #ffa07a;">"desmond:auto"</span>
   <span style="color: #9acd32;">set_family</span> = {
      <span style="color: #9acd32;">desmond</span> = {
         checkpt.write_last_step = no
      }
   }
}

simulate {
   <span style="color: #9acd32;">title</span>       = <span style="color: #ffa07a;">"Brownian Dynamics NVT, T = 10 K, small timesteps, and restraints on solute heavy atoms, 100ps"</span>
   <span style="color: #9acd32;">annealing</span>   = off
   <span style="color: #9acd32;">time</span>        = 100
   <span style="color: #9acd32;">timestep</span>    = [0.001 0.001 0.003 ]
   <span style="color: #9acd32;">temperature</span> = 10.0
   <span style="color: #9acd32;">ensemble</span> = {
      <span style="color: #9acd32;">class</span> = <span style="color: #ffa07a;">"NVT"</span>
      <span style="color: #9acd32;">method</span> = <span style="color: #ffa07a;">"Brownie"</span>
      <span style="color: #9acd32;">brownie</span> = {
         <span style="color: #9acd32;">delta_max</span> = 0.1
      }
   }
   <span style="color: #9acd32;">restrain</span> = {
      <span style="color: #9acd32;">atom</span> = <span style="color: #ffa07a;">"solute_heavy_atom"</span>
      <span style="color: #9acd32;">force_constant</span> = 50.0
   }
}

simulate {
   <span style="color: #9acd32;">effect_if</span>   = [[<span style="color: #ffa07a;">"=="</span> <span style="color: #ffa07a;">"-gpu"</span> <span style="color: #ffa07a;">"@*.*.jlaunch_opt[-1]"</span>] <span style="color: #ffa07a;">'ensemble.method = Langevin'</span>]
   <span style="color: #9acd32;">title</span>       = <span style="color: #ffa07a;">"NVT, T = 10 K, small timesteps, and restraints on solute heavy atoms, 12ps"</span>
   <span style="color: #9acd32;">annealing</span>   = off
   <span style="color: #9acd32;">time</span>        = 12
   <span style="color: #9acd32;">timestep</span>    = [0.001 0.001 0.003]
   <span style="color: #9acd32;">temperature</span> = 10.0
   <span style="color: #9acd32;">restrain</span>    = { <span style="color: #9acd32;">atom</span> = solute_heavy_atom <span style="color: #9acd32;">force_constant</span> = 50.0 }
   <span style="color: #9acd32;">ensemble</span>    = {
      <span style="color: #9acd32;">class</span>  = NVT
      <span style="color: #9acd32;">method</span> = Berendsen
      thermostat.tau = 0.1
   }

   randomize_velocity.interval = 1.0
   eneseq.interval             = 0.3
   trajectory.center           = []
}

simulate {
   <span style="color: #9acd32;">title</span>       = <span style="color: #ffa07a;">"NPT, T = 10 K, and restraints on solute heavy atoms, 12ps"</span>
   <span style="color: #9acd32;">effect_if</span>   = [[<span style="color: #ffa07a;">"=="</span> <span style="color: #ffa07a;">"-gpu"</span> <span style="color: #ffa07a;">"@*.*.jlaunch_opt[-1]"</span>] <span style="color: #ffa07a;">'ensemble.method = Langevin'</span>]
   <span style="color: #9acd32;">annealing</span>   = off
   <span style="color: #9acd32;">time</span>        = 12
   <span style="color: #9acd32;">temperature</span> = 10.0
   <span style="color: #9acd32;">restrain</span>    = retain
   <span style="color: #9acd32;">ensemble</span>    = {
      <span style="color: #9acd32;">class</span>  = NPT
      <span style="color: #9acd32;">method</span> = Berendsen
      thermostat.tau = 0.1
      barostat  .tau = 50.0
   }

   randomize_velocity.interval = 1.0
   eneseq.interval             = 0.3
   trajectory.center           = []
}

solvate_pocket {
   <span style="color: #9acd32;">should_skip</span> = true
   <span style="color: #9acd32;">ligand_file</span> = ?
}

simulate {
   <span style="color: #9acd32;">title</span>       = <span style="color: #ffa07a;">"NPT and restraints on solute heavy atoms, 12ps"</span>
   <span style="color: #9acd32;">effect_if</span>   = [[<span style="color: #ffa07a;">"@*.*.annealing"</span>] <span style="color: #ffa07a;">'annealing = off temperature = "@*.*.temperature[0][0]"'</span>
                  [<span style="color: #ffa07a;">"=="</span> <span style="color: #ffa07a;">"-gpu"</span> <span style="color: #ffa07a;">"@*.*.jlaunch_opt[-1]"</span>] <span style="color: #ffa07a;">'ensemble.method = Langevin'</span>]
   <span style="color: #9acd32;">time</span>        = 12
   <span style="color: #9acd32;">restrain</span>    = retain
   <span style="color: #9acd32;">ensemble</span>    = {
      <span style="color: #9acd32;">class</span>  = NPT
      <span style="color: #9acd32;">method</span> = Berendsen
      thermostat.tau = 0.1
      barostat  .tau = 50.0
   }

   randomize_velocity.interval = 1.0
   eneseq.interval             = 0.3
   trajectory.center           = []
}

simulate {
   <span style="color: #9acd32;">title</span>       = <span style="color: #ffa07a;">"NPT and no restraints, 24ps"</span>
   <span style="color: #9acd32;">effect_if</span>   = [[<span style="color: #ffa07a;">"@*.*.annealing"</span>] <span style="color: #ffa07a;">'annealing = off temperature = "@*.*.temperature[0][0]"'</span>
                  [<span style="color: #ffa07a;">"=="</span> <span style="color: #ffa07a;">"-gpu"</span> <span style="color: #ffa07a;">"@*.*.jlaunch_opt[-1]"</span>] <span style="color: #ffa07a;">'ensemble.method = Langevin'</span>]
   <span style="color: #9acd32;">time</span>        = 24
   <span style="color: #9acd32;">ensemble</span>    = {
      <span style="color: #9acd32;">class</span>  = NPT
      <span style="color: #9acd32;">method</span> = Berendsen
      thermostat.tau = 0.1
      barostat  .tau = 2.0
   }

   eneseq.interval   = 0.3
   trajectory.center = solute
}

simulate {
   <span style="color: #9acd32;">cfg_file</span> = <span style="color: #ffa07a;">"desmond_md_job_1.cfg"</span>
   <span style="color: #9acd32;">jobname</span>  = <span style="color: #ffa07a;">"$MASTERJOBNAME"</span>
   <span style="color: #9acd32;">dir</span>      = <span style="color: #ffa07a;">"."</span>
   <span style="color: #9acd32;">compress</span> = <span style="color: #ffa07a;">""</span>
}

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">Job launching command:</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">$SCHRODINGER/utilities/multisim -VIEWNAME desmond_molecular_dynamics_gui.MDApp -JOBNAME desmond_md_job_1</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">-HOST localhost -maxjob 1 -cpu 1 -m desmond_md_job_1.msj -c desmond_md_job_1.cfg -description 'Molecular Dynamics'</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">desmond_md_job_1.cms -mode umbrella -PROJ /home/vagrant/.schrodinger/tmp/tproj36567a6821</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">-DISP append -o desmond_md_job_1-out.cms -ATTACHED</span>
</pre>
</div>

<p>
MD 計算の shell script もついでに載せておく.<br  />
desmond_md_job_1.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_md_job_1.sh"><span style="color: #ffa07a;">"${SCHRODINGER}/utilities/multisim"</span> -JOBNAME desmond_md_job_1 -HOST localhost -maxjob 1 -cpu 1 -m desmond_md_job_1.msj
     -c desmond_md_job_1.cfg -description <span style="color: #ffa07a;">"Molecular Dynamics"</span>
           desmond_md_job_1.cms -mode umbrella
               -o desmond_md_job_1-out.cms -ATTACHED
</pre>
</div>

<p>
GPU 計算の場合<br  />
desmond_md_job_1.GPU.sh<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh" id="desmond_md_job_1.GPU.sh"><span style="color: #ffa07a;">"${SCHRODINGER}/utilities/multisim"</span> -JOBNAME desmond_md_job_1 -HOST localhost -maxjob 1 -cpu 1 -m desmond_md_job_1.msj
      -c desmond_md_job_1.cfg -description <span style="color: #ffa07a;">"Molecular Dynamics"</span>
            desmond_md_job_1.cms -mode umbrella  -set <span style="color: #ffa07a;">'stage[1].set_family.md.jlaunch_opt=["-gpu"]'</span>
                -o desmond_md_job_1-out.cms -ATTACHED
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 手順まとめ</h2>
<div class="outline-text-2" id="text-5">
<p>
タンパク質の mutant を MD 計算したい場合<br  />
wild type の水素付加したものを maestro(GUI)で作成しておく. これはまぁしょうがない.<br  />
mae ファイルとして保存する.<br  />
出発点: PDBID_addH.mae<br  />
</p>
<ol class="org-ol">
<li>変異体作成(+いらない HET の削除): 01mut.sh (01mut.m に実行内容を書く)<br  />
必要ならば fake X server を立ち上げておくこと.<br  />
</li>
<li>水素の refine: 02refine.sh PDBID_addH_delHET_E66K_opt.mae が出来る.<br  />
PDBID_addH_delHET_E66K_opt.mae -&gt; desmond_setup_1.mae<br  />
</li>
<li>03setup/ system setup: desmond_setup_1.sh の実行<br  />
desmond_setup_1-out.cms -&gt; desmond_md_job_1.cms<br  />
</li>
<li>04md/ MD run: desmond_md_job_1.GPU.sh の実行<br  />
desmond_md_job_1.cfg ファイルの seed の値を変えて疑似乱数の初期値を変更.<br  />
</li>
</ol>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[教材 ppt のレイアウト半自動作成]]></title>
    <link href="http://saito1369.github.io/blog/2018-03-09-layout.html"/>
    <updated>2018-03-09T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/layout</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. やりたいこと(目的)</a></li>
<li><a href="#sec-3">3. 調査</a></li>
<li><a href="#sec-4">4. やったこと</a></li>
<li><a href="#sec-5">5. 仕様とつかいかた</a>
<ul>
<li><a href="#sec-5-1">5.1. 一枚いちまいのスライドに, progress bar をつける</a></li>
<li><a href="#sec-5-2">5.2. 現在のページ数/全体のページ数  としてページ数を追加する</a></li>
<li><a href="#sec-5-3">5.3. gray out した目次を自動で作成して挿入する</a></li>
<li><a href="#sec-5-4">5.4. 階層の情報を各スライドに表示する</a></li>
<li><a href="#sec-5-5">5.5. 章ごとに分割して作成したスライドを統合する</a></li>
<li><a href="#sec-5-6">5.6. 学生用の資料を自動で作成する</a></li>
<li><a href="#sec-5-7">5.7. 教師用の資料を作成</a></li>
<li><a href="#sec-5-8">5.8. そのほか</a>
<ul>
<li><a href="#sec-5-8-1">5.8.1. 目次スライドを消去した新しいスライドを作成する</a></li>
<li><a href="#sec-5-8-2">5.8.2. 目次のフォント大きさを変更</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-6">6. 使用例</a></li>
<li><a href="#sec-7">7. そのほか注意事項</a></li>
<li><a href="#sec-8">8. 追記 <span class="timestamp-wrapper"><span class="timestamp">[2019-02-15 Fri]</span></span></a>
<ul>
<li><a href="#sec-8-1">8.1. hash へのアクセス(Scripting.Dictionary)</a></li>
<li><a href="#sec-8-2">8.2. Sgn(array)=0 の件</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2015-06-01 Mon 10:55&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2019-02-16 Sat 16:03&gt;</span></span><br  />
</p>
<p>
ここで紹介した機能をもつプログラムは以下に置かれている.<br  />
<a href="https://github.com/saito1369/work-lib-Basic">https://github.com/saito1369/work-lib-Basic</a><br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
発表資料, 講義資料作成には PowerPoint を使っている.<br  />
PowerPoint によるプレゼン及び講義での利用については, 様々な考察がなされているようである(PowerPoint プレゼン とかで検索すれば山ほどでてくる).<br  />
</p>

<p>
そんな中, 自分が講義等で使ってみて感じた一番の感想は,<br  />
「今このページが全体の中でどこにいるのか, というのがこのままじゃイマイチわかりにくいんじゃないかなぁ」<br  />
ということである.<br  />
</p>

<p>
PowerPoint 的な資料(というか紙芝居的に, 一次元的に見せていく方法全般)では, 常にそれぞれのスライドしか見えてない状態なので, 今いる場所が全体の中のどのへんにいるのか見失いがちなのではないか？<br  />
全体というのは, 今回の講義の中で, どれくらい進んでるのかとか, あるいは15 回の講義全体の中でどれくらいの位置に今いるのか, この章の中でどこを今やってるのか(どの階層にいるのか)とか, そういったことである.<br  />
</p>

<p>
今どういう位置づけの場所をやってるのか, がわからなければ当然内容の理解も厳しくなるわけである.<br  />
普通は教科書の目次構造がこのガイドの役目を果たしてるのではと思われるのだが, 教科書がある科目ばかりではないのでどーしたもんかなと思っている.<br  />
自分自身でも正直わかりにくいことがあったので, 恐らく学生もそうなんじゃないかなぁ, と思ってとある学生に聞いてみた.<br  />
あとどれくらいで講義が終わるのか, 早くおわってさっさと帰れそうか, 遅れててギリまでかかりそうなのか, わかったら良いと思う, という答えが返ってきた.<br  />
うーん何か質問の趣旨とは違うような気もするけど, とりあえず学生も講義の中で今いる位置を把握したいんだろうと思うことにしよう.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> やりたいこと(目的)</h2>
<div class="outline-text-2" id="text-2">
<p>
ここで実現したいと思ってることは以下である.<br  />
「PowerPoint の資料一枚いちまいで, いろんな意味での全体における位置がぱっとわかるようにしたい.」<br  />
</p>

<p>
教科書はなくても, 一連の資料には教科書のような目次の階層的な構造があるはずである.<br  />
その構造と現在地が資料一枚いちまいに記されてて, 敷衍した状態での位置がわかるようになってる感じをイメージしている.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 調査</h2>
<div class="outline-text-2" id="text-3">
<p>
最初に見たのは以下の URL である.<br  />
<a href="http://oshiete.goo.ne.jp/qa/7109697.html">http://oshiete.goo.ne.jp/qa/7109697.html</a><br  />
ここで質問されてるのは, それぞれの slide に progress bar みたいなもんをつけたいがどーすればいいか, というものだ.<br  />
PowerPoint 資料を作成のちにマクロを動かして, 現在のページが全体のどの位置にあるかを表示する.<br  />
これを使うことで, 階層構造こそわからないものの, 1 回の講義及び発表の中で今どのへんにいるのかを視覚的にわかりやすく示せるのではないかと思う.<br  />
学生が言っていた, あとどれくらいで講義がおわるのか, ということについてはこれでばっちりわかるんでは？<br  />
</p>

<p>
次に参考になりそうなのが以下の URL にある slideshare である.<br  />
<a href="http://www.slideshare.net/hamadakoichi/tree-basedmodelsandrandomforests">http://www.slideshare.net/hamadakoichi/tree-basedmodelsandrandomforests</a><br  />
目次(の階層構造)を最初に見せて, 今やってるところ以外を gray out する.<br  />
この表示方法はとってもかんたんだし, 今自分がいるところが全体の中でどこなのか, とてもわかりやすいと思う.<br  />
この gray out 方式の目次を一般的にしてより便利に使えるようにしたい.<br  />
ただ, 一枚いちまいの slide に情報を載せてるわけではないというてんについては, もう少し考える必要があるかなと思った.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> やったこと</h2>
<div class="outline-text-2" id="text-4">
<p>
色々考えたり試行錯誤していくうちに, 目的を達成するために具体的にすべきことがいくつかでてきたのでここでまとめておく.<br  />
1 から 4 は今回のやりたいこと(目的)に直接関与していそうな事案.<br  />
5 以降は ppt の使い回しや利便性を考えて作成してみたものである.<br  />
</p>

<ol class="org-ol">
<li>一枚いちまいのスライドに, progress bar をつける.<br  />
スライドの左下に, 今どこまで進んでるかを示す bar を作成する.<br  />
</li>
<li>現在のページ数/全体のページ数  としてページ数を追加する.<br  />
全体のページ数 の情報がないとあとどれくらいあるのかがよくわからないので.<br  />
スライドに右下に置いておくことにする.<br  />
</li>
<li>gray out した目次を自動で作成して挿入する.<br  />
作成した slide に対して, 別のテキストファイルに目次を書いておくと gray out した目次を自動で挿入してくれる.<br  />
目次には階層構造があるのが普通なので, 階層構造もそれとわかるように表示する.<br  />
</li>
<li>階層の情報を各スライドに表示する.<br  />
資料の右上には, gray out した小さい目次(簡易版)を載せる<br  />
  (今見ているスライドとは関係ない場所を gray out することで自分がいる位置が明快になる).<br  />
資料の左上には, 今見ているスライドの階層的な目次を載せる<br  />
  (上の補足的な情報として).<br  />
</li>
<li>章ごとに分割して作成したスライドを統合する<br  />
あまりでかい ppt 資料を作るとフリーズしたりするので, 資料は予め章毎にまとまった(内容でまとまった)単位で作成しておく.<br  />
必要な部分だけ結合することで次の講義での資料をさくっと作成したい.<br  />
内容ごとのまとまりで資料を作ることで再利用がかんたんになるだろう.<br  />
</li>
<li>学生用の資料を自動で作成する<br  />
学生は講義を聞いてるだけだとほぼ確実に寝るわけである.<br  />
PowerPoint を使った講義では板書をすることがあまり無く, 学生がメモをとったりすることがないので尚更である.<br  />
そこで, 講義資料を紙で配って, 重要な部分を穴開きにしといて穴埋めさせたい,<br  />
手を動かせば寝る確率は減るだろう.<br  />
いちいち学生用の穴埋め資料を別に作るのは超めんどくさいので, 学生用の穴あき資料を自動で作成できるようにする.<br  />
学生には見せない slide (演習の答えなど)の削除などもここで行う.<br  />
</li>
<li>教師用の資料を作成<br  />
上記のような資料を作って講義をしていると, 穴埋めが色々ありすぎてどこが穴埋めになってるのか, よくわかんなくなってしまうことがある.<br  />
大写しになっている slide には穴埋めの情報が書いてないからである.<br  />
自分用に, 今回どこが穴埋めになっているのかを示した教師用の資料を自動で作成できるようにする.<br  />
これを印刷しておけばどこが穴埋めなのかがわかる.<br  />
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 仕様とつかいかた</h2>
<div class="outline-text-2" id="text-5">
<p>
それぞれの仕事を行う VBA プログラムを作成した.<br  />
<a href="https://github.com/saito1369/work-lib-Basic/lecture/AutoPowerPointDecoration.bas">https://github.com/saito1369/work-lib-Basic/lecture/AutoPowerPointDecoration.bas</a><br  />
</p>

<p>
以下使い方などの説明である.<br  />
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> 一枚いちまいのスライドに, progress bar をつける</h3>
<div class="outline-text-3" id="text-5-1">
<p>
関数名: p02_pageCountsBox<br  />
仕様:<br  />
今作業している ppt ファイルが hoge.ppt だとする.<br  />
default では, 挿入された gray out 目次ページ(後述. p01_grayTOC)以外のスライドの全てに progress bar をつける.<br  />
テキストファイル hoge.txt に以下のように書いておくと,<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::---::
5,10
</pre>
</div>
<p>
5 page 目と 10 page 目には progress bar をつけない.<br  />
テキストファイルの名前は default では ppt ファイルの名前と同じにする(hoge.ppt であれば hoge.txt. 違うファイル名も指定可能).<br  />
各々のスライドの左下に図形で作成された progress bar が追加される.<br  />
</p>

<p>
こんな感じである.<br  />
<img src="dat/img/layout-countbox.png" alt="layout-countbox.png" /><br  />
全体で 26 page あって, 今は 4 page 目である.<br  />
</p>

<p>
<img src="dat/img/layout-countbox2.png" alt="layout-countbox2.png" /><br  />
23 page 目. もうそろそろ終りそうだ!! ということがぱっとみてわかる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> 現在のページ数/全体のページ数  としてページ数を追加する</h3>
<div class="outline-text-3" id="text-5-2">
<p>
関数名: p03_pageNum<br  />
仕様:<br  />
default では, 全体のページ数は挿入された gray out 目次ページ(後述. p01_grayTOC)を除く.<br  />
テキストファイルに以下のように書いておくと,<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::---::
5,10
</pre>
</div>
<p>
5 page 目と 10 page 目は除いてページ数をカウントする.<br  />
上記 pageCountsBox と連動する.<br  />
各々のスライドの右下に作成される.<br  />
</p>

<p>
<img src="dat/img/layout-pagenum.png" alt="layout-pagenum.png" /><br  />
26 page 中 23 page 目<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> gray out した目次を自動で作成して挿入する</h3>
<div class="outline-text-3" id="text-5-3">
<p>
関数名: p01_grayTOC<br  />
仕様:<br  />
hoge.txt に目次を以下のように書く.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::|||::
*     3. &#12503;&#12525;&#12464;&#12521;&#12512;&#12398;&#27969;&#12428;      2
**    3.1. if &#25991;               2
***   3.1.1. if-then           2
***   3.1.2. &#38306;&#20418;&#28436;&#31639;&#23376;        9
***   &#23455;&#32722;                    10
****  &#26032;&#35215;&#12497;&#12483;&#12465;&#12540;&#12472;&#12398;&#20316;&#25104;    10
****  &#23455;&#32722;&#12392;&#28436;&#32722;              12
*     4. &#32368;&#12426;&#36820;&#12375;             13
**    4.0. &#32368;&#12426;&#36820;&#12375;&#12392;&#12399;?      13
***   4.0.1. &#12420;&#12426;&#12383;&#12356;&#12371;&#12392;     13
***   4.0.2. Java &#12391;&#12398;&#25991;      15
**    4.1. do &#25991;              16
</pre>
</div>

<p>
hoge.txt の format は以下のような感じ<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::|||::           <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30446;&#27425;&#35501;&#12415;&#36796;&#12415;&#29992;&#12398;&#30446;&#21360;</span>
*(\t)(&#38542;&#23652;1&#12398;&#30446;&#27425;)(\t)(&#26360;&#12365;&#12384;&#12377;&#12506;&#12540;&#12472;&#25968;)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27880;: &#12371;&#12398;&#12506;&#12540;&#12472;&#12398;&#21069;&#12395;&#36861;&#21152;&#12377;&#12427;. &#12371;&#12398;&#12506;&#12540;&#12472;&#20197;&#38477;&#12398;&#12506;&#12540;&#12472;&#25968;&#12364;&#12378;&#12428;&#12427;.</span>
**(\t)(&#38542;&#23652;2&#12398;&#30446;&#27425;)(\t)(&#26360;&#12365;&#12384;&#12377;&#12506;&#12540;&#12472;&#25968;)
***(\t)(&#38542;&#23652;3&#12398;&#30446;&#27425;)(\t)(&#26360;&#12365;&#12384;&#12377;&#12506;&#12540;&#12472;&#25968;)
</pre>
</div>

<p>
階層構造を示すため, "*" 階層分のアスタリスクを行頭に書く.<br  />
タブのあとに, 各々の階層の目次文字列を書く.<br  />
タブ区切り(何回でもよい)の最後に書き出すページ数を書く.<br  />
このページ数の前のページに目次を追加する.<br  />
このページ以降のページ数はずれていくことになる.<br  />
</p>

<p>
出力として, 新しい ppt ファイル(上の処理によって目次が追加された ppt hoge_grayTOC.ppt) が作成される.<br  />
追加階層目次のページだけずれを補正, 目次をカウントしないスライドとして追加した txt file も作成される(hoge_grayTOC.txt).<br  />
</p>

<p>
上の目次の階層は<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">3. &#12503;&#12525;&#12464;&#12521;&#12512;&#12398;&#27969;&#12428;
   (&#30053;)
4. &#32368;&#12426;&#36820;&#12375;
4.0. &#32368;&#12426;&#36820;&#12375;&#25991;&#12392;&#12399;
4.0.1. &#12420;&#12426;&#12383;&#12356;&#12371;&#12392;
4.0.2. Java &#12391;&#12398;&#25991;
4.1. do &#25991;
</pre>
</div>
<p>
こんな風になっている. 追加される目次スライドは,<br  />
</p>

<p>
(4 に入ります).<br  />
<img src="dat/img/layout-toc01.png" alt="layout-toc01.png" /><br  />
</p>

<p>
(4 の下の階層目次の全体を示します).<br  />
<img src="dat/img/layout-toc02.png" alt="layout-toc02.png" /><br  />
</p>

<p>
(4.0 に入ります).<br  />
<img src="dat/img/layout-toc03.png" alt="layout-toc03.png" /><br  />
</p>

<p>
(4.0 の下の階層目次の全体を示します).<br  />
<img src="dat/img/layout-toc04.png" alt="layout-toc04.png" /><br  />
</p>

<p>
(4.0.1 に入ります).<br  />
<img src="dat/img/layout-toc05.png" alt="layout-toc05.png" /><br  />
</p>

<p>
うーんちょっとしつこいかも知れないが, ちゃんとやるとこうなる筈なのでしょうがない.<br  />
どうせ 1 秒程度しか見せないんだからまぁいいかなぁと思う.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> 階層の情報を各スライドに表示する</h3>
<div class="outline-text-3" id="text-5-4">
<p>
関数名: p04_pageListContents<br  />
仕様:<br  />
hoge.txt ファイル内の目次データを参照して, gray out した目次情報を書き出す.<br  />
各々のページ(右上)に, 今やってる目次の位置を黒い色で, その他の目次の位置を gray out した状態で書き出す.<br  />
default では "::|||::" 以下にかかれる目次情報を参照するが, 独自で指定したい場合(あまり細かく書き出したくない場合など)は以下のように書くこともできる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::###::
1. &#32972;&#26223;              1-3
2. &#30446;&#30340;              4-6
3. &#26041;&#27861;              7-9
4. &#32080;&#26524;              10-
::$<span style="color: #9acd32;">$</span>$::
3,11-15,18
::!!!::
610   140   8
</pre>
</div>
<p>
例えば上記のように書くと, 目次としては最初の階層だけを書くことになる.<br  />
次の "::$$$::" 以下に書かれた数値は, 目次を書き出さないページ数をあらかじめ指定するものである.<br  />
この例では, 3p と 11p から 15p, 18p には目次が書かれないはず.<br  />
目次情報を書き出す場所(default では右上)に色々と書いてあって, ここに情報を載せたくない場合に使う.<br  />
"::!!!::" は書かせる場所のパラメータを指定する.<br  />
指定されていればこの値を使う. 順に書き出す x 座標, テキストボックスの幅, フォントサイズをタブ区切りで書く.<br  />
ここでは, x=610 から幅 140 のテキストボックスを作ってその上に font size = 8 のフォントで gray out された目次を書く.<br  />
無ければ default 値を使う.<br  />
</p>

<div class="org-src-container">

<pre class="src src-sh">::###::
3. &#12503;&#12525;&#12464;&#12521;&#12512;&#20998;&#23696;   2-12
3.1. if &#25991;          2-12
3.1.1. if-then      2-8
3.1.2. &#38306;&#20418;&#28436;&#31639;&#23376;   9
&#23455;&#32722;                10-12
</pre>
</div>
<p>
の場合の 12 page 目はこんな感じ.<br  />
<img src="dat/img/layout-listcontents.png" alt="layout-listcontents.png" /><br  />
</p>


<p>
関数名: p05_pageListHierarchy()<br  />
仕様:<br  />
hoge.txt ファイル内の目次データを参照して, gray out した目次情報を書き出す.<br  />
各々のページ(左上)に, 今やってる目次の位置(階層)を書きだす.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::^^^::
1. &#32972;&#26223;           1-3
1.1. &#12399;&#12376;&#12417;&#12395;     2
1.2. &#27508;&#21490;         3
2. &#30446;&#30340;           4-6
::&amp;&amp;&amp;::
1-4,8
::???::
10   130   8
</pre>
</div>
<p>
"::^^^::" は上の "::###::" と同じで, あればこれを元に階層目次を作成する.<br  />
なければ "::|||::" (gray out する目次スライド挿入の情報)と同じ感じで書く.<br  />
"::&amp;&amp;&amp;::" はこの情報を書き出さないページ数を指定する.<br  />
"::???::" は書き出す場所, テキストボックスのサイズ, フォントの大きさを示す. 無ければ default 値を使う.<br  />
</p>

<p>
以下のように書き出される<br  />
<img src="dat/img/layout-listhierarchy.png" alt="layout-listhierarchy.png" /><br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5"><span class="section-number-3">5.5</span> 章ごとに分割して作成したスライドを統合する</h3>
<div class="outline-text-3" id="text-5-5">
<p>
関数名: p00_collectPpt<br  />
仕様:<br  />
hoge.pptm を作成(大抵は空の ppt ファイル)<br  />
hoge.txt に以下のように書いておく.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::+++::
0    foos.ppt    1-3,10,45-
1    fuga.ppt    *
1    bars.ppt    20,30-40
</pre>
</div>
<p>
最初の 0 または 1 については, foos.ppt のスタイルはコピーしない(0), fuga.ppt のスタイルもコピーする(1) という意味である.<br  />
二つ目は取り込む ppt ファイル名,<br  />
三つ目は取り込むページ数である. "*" は全部という意味である.<br  />
実行すると, 上で示されたファイルを統合して新しく hoge_intg.pptm が作成される.<br  />
それぞれに付随している txt ファイルも統合されて, 新しい hoge_intg.txt ファイルが作成される.<br  />
hoge.txt を読み込むかどうか, output ppt ファイル名が hoge_intg.pptm でいいかどうか聞かれるので指定する.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6"><span class="section-number-3">5.6</span> 学生用の資料を自動で作成する</h3>
<div class="outline-text-3" id="text-5-6">
<p>
関数名: p6_flipTextForStudent<br  />
仕様:<br  />
学生用に, キーワードが(_ アンダーバー等に)置換されたスライドを作成する.<br  />
演習問題の答えが載っているスライドを削除する<br  />
</p>

<p>
hoge.txt に以下のように書く<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::%%%::
Entrez Gene      Entrez ____      *
SNP              ___              1,2,3-10,20
HogeFuga         Hoge____         12
::@@@::
5,8,11
</pre>
</div>
<p>
"::%%%::" の後に置換前, 置換後, ページ数をタブ区切りで書いていく.<br  />
すべてのページで, "Entrez Gene" =&gt; "Entrez <span class="underline">__</span>" と変更(穴あけ)<br  />
1, 2, 3-10, 20 ページ で "SNP" を <span class="underline">_</span> に置換.<br  />
12 ページ のみで "HogeFuga" を "Hoge____" に変更.<br  />
"::@@@::" の後に学生用スライドでは見せないページ数を指定する.<br  />
5,8,11 ページは演習問題の答えなので削除.<br  />
</p>

<p>
ほとんどが削除するページならば, 以下のようにして残すページ数を書くことが可能<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">::===::
1-4,6,7,9,10
</pre>
</div>
<p>
この場合は, 1-4,6,7,9,10 ページは残す. それ以外は削除される.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7"><span class="section-number-3">5.7</span> 教師用の資料を作成</h3>
<div class="outline-text-3" id="text-5-7">
<p>
関数名: p7_watermarkForLecture<br  />
仕様:<br  />
hoge.txt に, 学生用の資料作成のようなテキストファイルが書かれているとする.<br  />
穴埋めの部分の文字列をイタリック体及び下線などで目立たせる.<br  />
学生用での削除ページには斜め線を目立つように入れる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-8" class="outline-3">
<h3 id="sec-5-8"><span class="section-number-3">5.8</span> そのほか</h3>
<div class="outline-text-3" id="text-5-8">
</div><div id="outline-container-sec-5-8-1" class="outline-4">
<h4 id="sec-5-8-1"><span class="section-number-4">5.8.1</span> 目次スライドを消去した新しいスライドを作成する</h4>
<div class="outline-text-4" id="text-5-8-1">
<p>
関数名: p8_removeGrayTOC_asNewName<br  />
仕様:<br  />
gray out する目次スライドを削除して新しい名前の ppt を作成<br  />
</p>
</div>
</div>
<div id="outline-container-sec-5-8-2" class="outline-4">
<h4 id="sec-5-8-2"><span class="section-number-4">5.8.2</span> 目次のフォント大きさを変更</h4>
<div class="outline-text-4" id="text-5-8-2">
<p>
関数名: resizeFontSizeOfGrayTOC<br  />
仕様:<br  />
目次のフォントが大きすぎてページに入らないことがあるので, その対処<br  />
タイトル, 箇条書き部分のフォント大きさを入力するとその大きさに変更する.<br  />
</p>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 使用例</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://github.com/saito1369/work-lib-Basic/tree/master/lecture/ppts">https://github.com/saito1369/work-lib-Basic/tree/master/lecture/ppts</a> も参照.<br  />
</p>

<ol class="org-ol">
<li>元となる ppt 及びテキストファイルの準備<br  />
章ごとに作成した ppt のファイル.<br  />
<ul class="org-ul">
<li>031_if.pptx<br  />
</li>
<li>041_loop.pptx<br  />
</li>
</ul>
<p>
各々に付随したテキストファイル<br  />
</p>
<ul class="org-ul">
<li>031_if.txt<br  />
</li>
<li>041_loop.txt<br  />
</li>
</ul>
</li>
<li>pptm ファイルを作成する<br  />
test.pptm:<br  />
白紙の ppt ファイル(あるいはタイトルだけ作成)<br  />
マクロを import して pptm ファイルとして保存しておく.<br  />
test.txt: 取り込むファイルと取り込み方, ページ数を書いておく.<br  />
</li>
<li>p00_collectPpt<br  />
test.pptm のマクロから, p00_collectPot を走らせる.<br  />
test.txt に基づいて統合された test_intg.pptm, test_intg.txt が作成される.<br  />
</li>
<li>p01_grayTOC<br  />
test_intg.pptm のマクロから走らせる.<br  />
test_intg.txt の目次に基づいて目次が挿入された<br  />
test_intg_gray.pptm 及び test_intg_gray.txt が作成される.<br  />
</li>
<li>p02_pageCountsBox<br  />
     目次スライド以外のスライド左下に progress bar を作成する(上書き)<br  />
</li>
<li>p03_pageNum<br  />
     目次スライド以外のスライド右下に ページ数/全ページ数 を追加(上書き)<br  />
</li>
<li>p04_pageListContents<br  />
     目次スライド以外のスライド右上に gray out した小さい目次を追加(上書き)<br  />
</li>
<li>p05_pageListHierarchy<br  />
     目次スライド以外のスライド左上に 今いるページの階層的目次を追加(上書き)<br  />
</li>
<li>p6_flipTextForStudent<br  />
学生用の穴あき資料, 及び演習問題の答えを書いたページ等を削除した ppt ファイルを作成する.<br  />
別名で保存される.<br  />
default では, _for_student が付加した test_intg_gray_for_student.pptm<br  />
という名前のファイルとして保存される.<br  />
この ppt でプレゼンをするわけではなく, 大抵の場合目次スライドはいらないので消去する.<br  />
p8_removeGrayTOC_asNewName を動かす.<br  />
default では, _delTOC が付加した test_intg_gray_for_student_delTOC.pptm<br  />
という名前のファイルとして保存される.<br  />
</li>
<li>p7_watermarkForLecture<br  />
test_intg_gray.pptm ファイル上で上記マクロを動かすと,<br  />
発表者(講師)が見る用の ppt ファイルが作成される.<br  />
学生が見えてない穴あき部分は gray out + 波線で表示される.<br  />
演習問題の答えなど, 学生には見せない(削除した)スライドには gray で斜め線が入っている.<br  />
default では, _for_teacher が付加した test_intg_gray_for_teacher.pptm<br  />
という名前のファイルとして保存される.<br  />
大抵の場合目次スライドはいらないので消去する.<br  />
p8_removeGrayTOC_asNewName を動かす.<br  />
default では, _delTOC が付加した test_intg_gray_for_teacher_delTOC.pptm<br  />
という名前のファイルとして保存される.<br  />
</li>
</ol>

<p>
3 から 8 までを default parameter で一気にやる場合は, test.pptm から p0_standard を動かす.<br  />
</p>

<p>
あらかじめ作成しておくファイルは 031_if.pptx, 041_loop.pptx 及び付随するテキストファイル.<br  />
今回の資料を作るにあたって最初に作成するファイルは, test.pptm 及び test.txt.<br  />
</p>

<p>
3-10 を実行することで, スライド一枚いちまいの全体からの位置がわかるような資料が作成できた(のか？)<br  />
講義の際に使用するファイルは   test_intg_gray.pptm<br  />
学生に配布する資料は           test_intg_gray_for_student_delTOC.pptm<br  />
発表者が手元に置いておく資料は test_intg_gray_for_teacher_delTOC.pptm<br  />
として保存される.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> そのほか注意事項</h2>
<div class="outline-text-2" id="text-7">
<p>
OS: Windows7<br  />
application: PowerPoint2010<br  />
Intel Core i7-2600K CPU @ 3.40GHz<br  />
RAM: 16GB<br  />
で動作確認.<br  />
</p>

<p>
Mac では Scripting.Directory (連想配列的なもの)が使えないのでそのままでは動かない.<br  />
</p>

<p>
結構な頻度で応答なしになる. プログラムが重いせい.<br  />
しばらく待ってると帰ってくる感じである.<br  />
特に p04_pageListContents が重いようである.<br  />
VBA よくわかんないこともあり, 計算を軽くする工夫は何もしていない点に注意する.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 追記 <span class="timestamp-wrapper"><span class="timestamp">[2019-02-15 Fri]</span></span></h2>
<div class="outline-text-2" id="text-8">
<p>
Windows7 上の仮想マシンで Windows10/PowerPoint2016 の環境を作ったので試してみた.<br  />
</p>

<p>
OS: Windows10<br  />
application: PowerPoint2016<br  />
</p>

<p>
エラーが出て動かない.<br  />
以下のようにプログラムを修正することで対処した.<br  />
</p>
</div>

<div id="outline-container-sec-8-1" class="outline-3">
<h3 id="sec-8-1"><span class="section-number-3">8.1</span> hash へのアクセス(Scripting.Dictionary)</h3>
<div class="outline-text-3" id="text-8-1">
<p>
Set hash = CreateObject("Scripting.Dictionary")<br  />
こんな感じで hash を作って, value へのアクセスは hash(key) で行っていた.<br  />
Office2010 までは特に問題なかった？と思うのだが, Office2016 ではエラーとなって止まってしまった.<br  />
これじゃダメらしい.<br  />
hash.Item(key) としないといけない.<br  />
というわけで hash(key) でエラーになってるところを全て hash.Item(key) に変更.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-8-2" class="outline-3">
<h3 id="sec-8-2"><span class="section-number-3">8.2</span> Sgn(array)=0 の件</h3>
<div class="outline-text-3" id="text-8-2">
<p>
配列が定義されてるかどーか調べるときに使ってた If 文.<br  />
そもそも仕様外の書き方らしい.<br  />
参照: <a href="https://qiita.com/satoko138/items/7e06dda56683065968f7">https://qiita.com/satoko138/items/7e06dda56683065968f7</a><br  />
</p>

<p>
If Sgn(array)=0 Then -&gt; If Not Not array Then &#x2026;.に変更.<br  />
ロジックが逆になる点に注意.<br  />
これでいいのかどうかよくわかんないけど, Office2016 ではこれでエラーがでなくなった.<br  />
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[isearch の改良]]></title>
    <link href="http://saito1369.github.io/blog/2017-09-04-164431.html"/>
    <updated>2017-09-04T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/164431</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. elisp プログラムの作成</a>
<ul>
<li><a href="#sec-3-1">3.1. 作成ほうしん</a></li>
<li><a href="#sec-3-2">3.2. パラメータ</a></li>
<li><a href="#sec-3-3">3.3. isearch-mode-hook</a></li>
<li><a href="#sec-3-4">3.4. isearch-mode-end-hook</a></li>
<li><a href="#sec-3-5">3.5. defadvice</a></li>
<li><a href="#sec-3-6">3.6. idive&#x2013;get-dive-file</a></li>
<li><a href="#sec-3-7">3.7. プログラム全体</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 反省点</a></li>
<li><a href="#sec-5">5. 参考文献</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-09-04 Mon 16:44&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 20:12&gt;</span></span><br  />
</p>
<p>
emacs でメモを検索する isearch (Ctrl-s/Ctrl-r) にちょっと機能をついかしてみた.<br  />
elisp の書き方はよくわかってないけど, 不安定ながらも動くものができたのでその記録を書いておく.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はここ何年か, ChangeLog メモという形式でメモを残している.<br  />
最初に書いた日付を見てみたら 2003 年 10 月であった. なんと, 気づかないうちに 10 年以上も続いてることになるのか&#x2026;<br  />
</p>

<p>
ChangeLog 上でのメモは, 短いメモを書くぶんには問題ないのだが, 少し長めのまとめ文書とかを書こうとするといまいちであった.<br  />
長い文書では, 階層的な構造とか, 図とかを適宜文書の中に入れていきたいことがあるからである.<br  />
</p>

<p>
この問題を解決するために, 私は <a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html</a> で示されている quasi-howm という方法を使っている.<br  />
これを使うと, ChangeLog メモの中に, howm ファイルへのリンクを自動で作ってくれるのだ.<br  />
これを使って, 私は ChangeLog では書きにくい長いまとめ文書などをこの howm ファイルの中に書いている.<br  />
ChangeLog 上に howm へのリンクが張られるので, とりあえずポケット一つの原則は守られている(はず)ので安心だ.<br  />
ちなみに私は org-mode の形式で howm メモを書いている.<br  />
howm の機能はほぼ使っていないので, 今から考えると, 一定の場所へのリンクを自動で作ってくれれば何でもよかった感じだが, 今までずっと使ってきて慣れてるのでこの形式で書き続けている.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
私は ChangeLog メモを検索する際に, インクリメンタルサーチ (isearch. Ctrl-s/Ctrl-r) での検索をよく使う.<br  />
私は基本残しておきたいことは全て ChangeLog メモに書くので, キーワードを覚えてれば ChangeLog ファイル上で Ctrl-s を使ってメモの該当ぶぶんを探し出し, その部分メモを見て思い出したりそこに書いてある URL に行ったりする.<br  />
しかし最近, ChangeLog メモのどっかに書いてた筈なのにインクリメンタルサーチで探し出せないことが頻発してきた.<br  />
キーワードも覚えられない程記憶力が死んできたのかとも考えましたがそーでもなさそうだ.<br  />
よくよく調べてみると, ChangeLog メモには直接書いてないけど, howm(org-mode)の文書中にキーワードが書いてあった場合があって, その場合は当然のことながら ChangeLog ファイルのインクリメンタルサーチでは検索出来ないことがわかった.<br  />
メモとして ChangeLog に書いてたつもりだったけど, 実際は howm(org-mode)のメモに書いていた. そのときのキーワードが ChangeLog ファイル内にあるかと思って探したけどなかった. 理由は探す所を間違ってたから. ほんとは howm(org-mode)のファイルの中を探さないといけない.<br  />
そんな感じである.<br  />
この状況も記憶力的にあんまり良くないような気もするのだが&#x2026;<br  />
</p>

<p>
というわけで, インクリメンタルサーチで以下のようなことが出来ればいいんだけどなぁ&#x2026;<br  />
ChangeLog ファイルをインクリメンタルサーチしたときに,<br  />
</p>
<ol class="org-ol">
<li>ChangeLog 内に howm ファイルへのリンクが書いてあれば途中でそのファイルに立ち寄ってインクリメンタルサーチをする.<br  />
</li>
<li>howm ファイルを探し終わったら ChangeLog ファイルに戻ってきて ChangeLog のその場所からのインクリメンタルサーチを再開.<br  />
</li>
<li>1. に戻る.<br  />
</li>
</ol>

<p>
図で描くと, 以下のような感じになります.<br  />
</p>


<div class="figure">
<p><img src="dat/img/2017-09-04-164431-2017-09-04-164431.jpg" alt="2017-09-04-164431-2017-09-04-164431.jpg" /><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> elisp プログラムの作成</h2>
<div class="outline-text-2" id="text-3">
<p>
この問題を解決するために, まずは同じようなことでめんどくさがってる人がいないかどうかを探した.<br  />
誰かやってる人いないかと思って色々検索してみたが, うまく見つけられなかった.<br  />
こういうことやりたい人いないのかなぁ. 普通は何かもっと効率の良い方法でやるんだろうか？<br  />
やってる人がいなさそうだったので, elisp プログラミングの勉強も兼ねて自分で作ってみることにした.<br  />
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 作成ほうしん</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Ctrl-s を二回以上押下すると isearch-repeat という命令が動くっぽい.<br  />
これの直前で(次の検索ワードへ移動する前に) howm ファイルがあるかどうかを探し, あればその buffer へ移動して検索を続けるようにする.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (before hogehoge activate)
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">1. &#27425;&#12398;&#26908;&#32034;&#12527;&#12540;&#12489;&#12434;&#25506;&#12375;&#12390;&#20301;&#32622;&#12434;&#35519;&#12409;&#12390;&#12362;&#12367;.</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">2. &#27425;&#12398; howm &#12501;&#12449;&#12452;&#12523;&#12398;&#12354;&#12426;&#12363;&#12434;&#25506;&#12375;&#12390;&#20301;&#32622;&#12434;&#35519;&#12409;&#12390;&#12362;&#12367;.</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">3. &#27425;&#12398; howm &#12398;&#12354;&#12426;&#12363; &gt; &#27425;&#12398; hogehoge &#12398;&#12354;&#12426;&#12363; &#12391;&#12354;&#12428;&#12400; howm &#12501;&#12449;&#12452;&#12523;&#12398;&#20013;&#12408;&#20837;&#12426;&#12381;&#12398;&#20013;&#12434;&#26908;&#32034;.</span>
)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> パラメータ</h3>
<div class="outline-text-3" id="text-3-2">
<p>
ChangeLog メモファイル以外でも一応出来るように, パラメータを設定出来るようにする.<br  />
主なパラメータは以下の 4 つ(1 つは toggle によって制御することにした).<br  />
</p>

<ol class="org-ol">
<li>母艦ファイル名(このファイルを Ctrl-s で検索すると, 書いてあるファイル名が存在すればそのファイルを訪れて検索を続ける)<br  />
テキストファイルであれば何でもいい.<br  />
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">ChangeLog &#12501;&#12449;&#12452;&#12523;&#12434;&#26908;&#32034;&#12377;&#12427;&#38555;&#12399;, &#12381;&#12371;&#12395;&#26360;&#12356;&#12390;&#12354;&#12427;&#12501;&#12449;&#12452;&#12523;&#12398;&#20013;&#12418;&#26908;&#32034;&#12377;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-fpath <span style="color: #ffa07a;">"/home/hoge/Memo/ChangeLog"</span>)
</pre>
</div>
</li>
<li>母艦ファイルに書いてあるファイル名のぱたーん<br  />
どのような文字列パターンを読み取って訪れるファイル名を抽出するか?<br  />
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">".howm" &#12392;&#12356;&#12358;&#25991;&#23383;&#21015;&#12434;&#25345;&#12388;&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#25277;&#20986;&#12375;&#12383;&#12356;&#22580;&#21512;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-patterns '(<span style="color: #ffa07a;">".howm"</span>))
</pre>
</div>
<p>
上で得られたファイル名(fname)から実在のファイル名への変換関数<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname &#12434;&#12381;&#12398;&#12414;&#12414;&#23455;&#22312;&#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#21517;&#12392;&#12377;&#12427;&#22580;&#21512;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--expand-file-name</span>(fname)
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (expand-file-name fname))
  (<span style="color: #20b2aa; font-weight: bold;">if</span> (file-exists-p fname) fname nil)   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#23384;&#22312;&#12375;&#12394;&#12369;&#12428;&#12400; nil &#12434;&#36820;&#12377;</span>
)
</pre>
</div>
</li>
<li>ファイル検索の方法<br  />
ChangeLog の中に, 何度か同じファイル名が書いてある場合.<br  />
ファイル名があればそのファイルの中に入って検索したいとき<br  />
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p t)
</pre>
</div>
<p>
一度検索したファイルは検索しないとき.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p nil)
</pre>
</div>
</li>
<li>そもそもこの方式で isearch の機能拡張を使うかどーか.<br  />
普通に検索したいときもあると思うので toggle 出来るようにしたい.<br  />
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defvar</span> <span style="color: #9acd32;">idive-toggle</span> t)
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--toggle</span>()
  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
  (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-toggle (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-toggle nil)
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-toggle t)
    )
  (message <span style="color: #ffa07a;">"idive-toggle=%s"</span> idive-toggle)
  )
</pre>
</div>
<p>
こんな風に global 変数を気軽に使っていいんだろーかとも思うが, いい方法がわかんないのでとりあえずこれで.<br  />
</p>
</li>
</ol>

<p>
上記 1. のパラメータを変更すれば特別な isearch をするファイル(母艦ファイル)名を変更できる.<br  />
私の場合はここは ChangeLog ファイルを指定している.<br  />
上記 2. のパラメータを変更すれば検索するファイル名の文字列パターンを変更できます.<br  />
idive&#x2013;expand-file-name(fname) は文字列 fname から実際のファイル名への変換を行う関数です.<br  />
例:<br  />
  fname から決まった dir を追加してファイル名が完成する場合,<br  />
  fhame = '2017-09-04-111111.howm' =&gt; '/home/saito1369/howm/2017/09/2017-09-04-111111.howm'<br  />
  の対応を return する関数を書くことになる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> isearch-mode-hook</h3>
<div class="outline-text-3" id="text-3-3">
<p>
iserach 開始の際にやることを hook で指定.<br  />
新しい関数をつくって add-hook とやればいいらしい.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(add-hook'isearch-mode-hook 'idive--init)

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#38283;&#12356;&#12390;&#12356;&#12427; buffer &#12364;&#27597;&#33382;&#12391;&#12354;&#12428;&#12400;&#12381;&#12398;&#24460;&#33394;&#12293;&#12420;&#12427;.</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ChangeLog)&#12376;&#12419;&#12394;&#12369;&#12428;&#12400;&#12405;&#12388;&#12540;&#12395;&#12420;&#12427;.</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--init</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((cbuf  (current-buffer)))
    (<span style="color: #20b2aa; font-weight: bold;">when</span> (idive--mother-buffer-p)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">is-dive-mother-fname (&#27597;&#33382;)&#12398; buffer &#12434;&#25345;&#12387;&#12390;&#12362;&#12367;</span>
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-buffer cbuf)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26082;&#12395;&#38283;&#12356;&#12390;&#12356;&#12427; buffer &#12398; list &#12434; hash &#12391;&#12392;&#12427;.</span>
      (idive--get-hash-already-exist-buffers)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35370;&#21839;&#12375;&#12383; buffer &#12434;&#35352;&#37682;&#12377;&#12427;&#22580;&#25152;&#12434;&#21021;&#26399;&#21270;</span>
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-dived-files-hash (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
      )
    )
  )

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#38283;&#12356;&#12390;&#12427;&#12398;&#12364; mother-buffer &#12363;&#12393;&#12358;&#12363;&#12434;&#30906;&#35469;&#12377;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--mother-buffer-p</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((fpath nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> buffer-file-name (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath (expand-file-name buffer-file-name)))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> fpath idive-mother-fpath (string= fpath idive-mother-fpath))
        t
      nil)
    )
  )
</pre>
</div>

<p>
既に開いている buffer のリストを hash でとるのは,<br  />
検索中に訪問するファイルが既に開いているのであればその buffer を開く, 開いてなければ検索終了後に buffer を削除するため.<br  />
</p>

<p>
訪問した buffer を記録するのは, 一度訪問した buffer は訪問しないようにするため.<br  />
(パラメータの項でも書いたが, 以下のように設定すれば何度も同じ buffer を訪問しないようにできる. この動作が default)<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-visit-dived-file-p nil)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> isearch-mode-end-hook</h3>
<div class="outline-text-3" id="text-3-4">
<p>
isearch 終了の際にやること.<br  />
使っていた global な一時変数を全部解放する.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch &#32066;&#20102;</span>
(add-hook 'isearch-mode-end-hook 'idive--reset)

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20197;&#19979;&#12398;&#12497;&#12521;&#12513;&#12540;&#12479;&#12434;&#12522;&#12475;&#12483;&#12488;&#12377;&#12427;.</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--reset</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ex. ChangeLog)&#12398; buffer</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-mother-buffer nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26082;&#12395;&#35370;&#21839;&#12375;&#12383; buffers &#12398;&#12522;&#12473;&#12488;(hash)</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-dived-files-hash nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12434;&#34892;&#12358;&#21069;&#12363;&#12425;&#20803;&#12293;&#38283;&#12356;&#12390;&#12383; buffers</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-already-exist-hash nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35370;&#21839;&#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#12398;&#21517;&#21069;(&#19968;&#30058;&#37325;&#35201;&#12394;&#19968;&#26178;&#22793;&#25968;)</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20803;&#12398;&#26908;&#32034;&#35486;(isearch-string) &#12364;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12391;&#27425;&#12393;&#12371;&#12395;&#12354;&#12427;&#12363;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-next-point nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch-repeat &#30452;&#21069;&#12395;&#12356;&#12383;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-present-point nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch-string(&#26908;&#32034;&#35486;)&#12398;&#36864;&#36991;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-isearch-string nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#12363;&#12425;&#35370;&#21839;&#12377;&#12427; file &#21517;&#12364;&#26360;&#12356;&#12390;&#12354;&#12427;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#19978;&#12398;&#22580;&#25152;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point nil)
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> defadvice</h3>
<div class="outline-text-3" id="text-3-5">
<p>
プログラムの本体部分.<br  />
isearch-repeat を行うタイミングで, howm ファイルを探す.<br  />
条件に合う howm ファイルがあればそのファイルを訪れ検索する.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (around is-dive-isearch-repeat activate)
  <span style="color: #cd5c5c;">"Dive another buffer."</span>
  (<span style="color: #20b2aa; font-weight: bold;">if</span> (idive--mother-buffer-p) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#20869;&#12434;&#26908;&#32034;&#12375;&#12390;&#12356;&#12427;&#22580;&#21512;</span>
      (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
          (idive--dive-another-buffer)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#12354;&#12428;&#12400;&#12381;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#31227;&#21205; (isearch &#12399;&#23455;&#34892;&#12375;&#12394;&#12356;)</span>
        (idive--search-idive-fname)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#28961;&#12369;&#12428;&#12400;&#25506;&#12375;&#12390;</span>
        ad-do-it                        <span style="color: #cd853f;">;;             </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
        )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12375;&#12390;&#12356;&#12427;&#12501;&#12449;&#12452;&#12523;&#12364;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12391;&#12394;&#12356;&#22580;&#21512;</span>
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12434;&#35370;&#21839;&#12375;&#12390;&#12356;&#12390; &#26908;&#32034;&#12364;&#32066;&#12431;&#12387;&#12383;&#22580;&#21512;&#12399;&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12395;&#25147;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (idive--another-buffer-p) (not isearch-success))
        (idive--return-mother))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
    ad-do-it
    )
  )
</pre>
</div>

<p>
idive-toggle 変数を後で追加したので結局は以下のようになる.<br  />
条件を色々考えるのが面倒なので上から被せている.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defadvice</span> <span style="color: #00ff7f;">isearch-repeat</span> (around isearch-repeat-idive-ad activate)
  <span style="color: #cd5c5c;">"Dive another buffer."</span>
  (<span style="color: #20b2aa; font-weight: bold;">when</span> idive-toggle
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (idive--mother-buffer-p) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">mother file &#12398;&#26908;&#32034;&#12398;&#22580;&#21512;</span>
        (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
            (idive--dive-another-buffer)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#12354;&#12428;&#12400;&#12381;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#31227;&#21205; (isearch &#23455;&#34892;&#12375;&#12394;&#12356;)</span>
          (idive--search-idive-fname)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12364;&#28961;&#12369;&#12428;&#12400;&#25506;&#12375;&#12390;</span>
          ad-do-it                        <span style="color: #cd853f;">;;             </span><span style="color: #cd853f;">isearch &#12434;&#23455;&#34892;</span>
          )
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">mother file &#12391;&#12394;&#12356;&#22580;&#21512;</span>
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">idive-fname &#12434;&#35370;&#21839;&#12375;&#12390;&#12356;&#12390; &#26908;&#32034;&#12364;&#32066;&#12431;&#12387;&#12383;&#22580;&#21512;&#12399; mother &#12395;&#25147;&#12427;</span>
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (idive--another-buffer-p) (not isearch-success))
          (idive--return-mother)
        <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12381;&#12358;&#12391;&#12394;&#12369;&#12428;&#12400; isearch &#12434;&#23455;&#34892;(&#26222;&#36890;&#12399;&#12371;&#12371;&#12364;&#21205;&#12367;)</span>
        ad-do-it
        )
      )
    )
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12420;&#12425;&#12394;&#12356;&#12392;&#12365;</span>
  (<span style="color: #20b2aa; font-weight: bold;">unless</span> idive-toggle ad-do-it)
  )
</pre>
</div>

<p>
idive-fname は ChangeLog ファイル(母艦ファイル)上にある howm ファイル名を示す.<br  />
ここに値が入ってなければ, あるかどうかを探す.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--search-idive-fname</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#12398;&#27597;&#33382;&#19978;&#12398;&#22580;&#25152;&#12434;&#20445;&#23384;&#12377;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-present-point (point))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015;&#12434;&#20803;&#12293;&#12398;&#12418;&#12398;&#12395;&#25147;&#12375;&#12390;&#12362;&#12367;(isearch-string)</span>
  (idive--return-isearch-string)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26908;&#32034;&#12375;&#12390;&#27425;&#12398;&#22580;&#25152;&#12434;&#20445;&#23384;&#12375;&#12390;&#12362;&#12367;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-next-point (idive--get-next-point isearch-string nil))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#19978;&#12398;&#22580;&#25152;&#12434;&#19968;&#26086;&#20803;&#12395;&#25147;&#12377;</span>
  (idive--goto-char)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#29694;&#22312;&#12398;&#22580;&#25152;(idive-present-point) - idive-next-point &#20869;&#12395; idive-fname(howm &#12501;&#12449;&#12452;&#12523;)&#12364;&#12354;&#12427;&#12363;&#12393;&#12358;&#12363;&#12434;&#35519;&#12409;&#12427;</span>
  (idive--get-dive-file)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12418;&#12375; idive-fname &#12364;&#12354;&#12428;&#12400;, &#19968;&#26178;&#30340;&#12395;&#26908;&#32034;&#25991;&#23383;&#21015;&#12434; idive-fname &#12395;&#22793;&#26356;&#12377;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">when</span> idive-fname
      (idive--change-isearch-string)
      <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#20301;&#32622;&#12398;&#35519;&#25972;</span>
      (goto-char (<span style="color: #20b2aa; font-weight: bold;">if</span> isearch-forward (- idive-fname-point (length isearch-string))
                   (+ idive-fname-point (length isearch-string))))
    )
  )
</pre>
</div>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--get-next-point</span>(str end)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((pnt nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> migemo-isearch-enable-p
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> pnt (migemo-forward str end t (idive--isdir)))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> (search-forward str end t (idive--isdir)))
      )
    png
    )
  )
</pre>
</div>

<p>
idive-fname があればそのファイルを訪問する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--dive-another-buffer</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;(ex. ChangeLog &#12501;&#12449;&#12452;&#12523;)&#20869;&#12434;&#31227;&#21205;&#12377;&#12427;</span>
  (idive--get-next-point idive-fname idive-next-point)
  <span style="color: #cd853f;">;;</span>
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dive into the file (idive-fname)</span>
  <span style="color: #cd853f;">;;</span>
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12434;&#38283;&#12367;</span>
  (find-file (idive--expand-file-name idive-fname))
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015;&#12434;&#20803;&#12395;&#25147;&#12377;</span>
  (idive--return-isearch-string)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">isearch-forward &#12398;&#20516;&#12395;&#24540;&#12376;&#12390;&#12501;&#12449;&#12452;&#12523;&#12398;&#20808;&#38957;&#12354;&#12427;&#12356;&#12399;&#26368;&#24460;&#12395;&#31227;&#21205;&#12377;&#12427;</span>
  (goto-char (<span style="color: #20b2aa; font-weight: bold;">if</span> isearch-forward (point-min) (point-max)))
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19968;&#12388;&#12418;&#35211;&#12388;&#12363;&#12425;&#12394;&#12356;&#12456;&#12521;&#12540;&#12364;&#20986;&#12427;&#12398;&#12391;</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> isearch-case-fold-search t)
  )
</pre>
</div>

<p>
idive-fname を訪問し終わったら母艦ファイルに戻る<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--return-mother</span>()
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#38283;&#12356;&#12390;&#12427; buffer &#12434;&#38281;&#12376;&#12427;(&#12418;&#12375;&#20803;&#12363;&#12425;&#38283;&#12356;&#12390;&#12394;&#12369;&#12428;&#12400;)</span>
  (idive--kill-buffer-not-already-exist)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#26908;&#32034;&#25991;&#23383;&#21015; isearch-string &#12434; idive-fname &#12395;&#12375;&#12390;</span>
  (idive--change-isearch-string)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">idive-fname &#12399;&#26410;&#23450;&#32681;&#12395;&#12375;&#12390;&#12362;&#12367;.</span>
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#12371;&#12428;&#12391;&#12371;&#12398;&#12501;&#12449;&#12452;&#12523;&#12395;&#38306;&#12375;&#12390;&#12398;&#25506;&#32034;&#12434;&#32066;&#20102;&#12373;&#12379;&#12427;.</span>
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27597;&#33382;&#12501;&#12449;&#12452;&#12523;&#12395;&#25147;&#12427;</span>
  (switch-to-buffer idive-mother-buffer)
  <span style="color: #cd853f;">; </span><span style="color: #cd853f;">&#24565;&#12398;&#12383;&#12417;</span>
  (goto-char idive-fname-point)
  (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point nil)
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> idive&#x2013;get-dive-file</h3>
<div class="outline-text-3" id="text-3-6">
<p>
現在の場所から次にキーワードが見つかった場所の間に idive-fname (howm ファイル名) があるかどうかを調べる.<br  />
一番めんどくさい部分.<br  />
</p>

<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">idive--get-dive-file</span>()
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((suffs       idive-fname-patterns)
        (sff         nil)
        (dpoint      nil)
        (fname       nil)
        (fpath       nil)
        (dive-points (list)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#37197;&#21015;&#12398;&#23450;&#32681;</span>
        (fhash       (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
        (dhash       (make-hash-table <span style="color: #76ee00;">:test</span> 'equal))
        (dp          nil)
        (fnames      (list))
        (rep         nil)
        )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#21021;&#26399;&#21270;</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname nil)
    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
      (<span style="color: #20b2aa; font-weight: bold;">while</span> suffs
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> sff (car suffs))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> rep t)
        (<span style="color: #20b2aa; font-weight: bold;">while</span> rep
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> dpoint (idive--get-next-point sff idive-next-point))
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath nil)
          (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname nil)
          (<span style="color: #20b2aa; font-weight: bold;">when</span> dpoint <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35211;&#12388;&#12363;&#12387;&#12383;&#12425;</span>
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file &#21517;&#12398;&#21462;&#12426;&#20986;&#12375;</span>
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (thing-at-point 'filename))
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fpath (&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12394;&#12369;&#12428;&#12400; nil &#12364;&#36820;&#12427;)</span>
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath (idive--expand-file-name fname))
            <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file &#12364;&#23384;&#22312;&#12375;&#12390;, &#12414;&#12384;&#38283;&#12356;&#12390;&#12356;&#12394;&#12356;&#12392;&#12365;</span>
            (<span style="color: #20b2aa; font-weight: bold;">when</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> fpath (not (gethash fpath idive-dived-files-hash)))
              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dpoint &#12434; push &#12377;&#12427;</span>
              (<span style="color: #20b2aa; font-weight: bold;">push</span> dpoint dive-points)
              <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dpoint =&gt; fname</span>
              (puthash dpoint fname  fhash)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fhash[dpoint] =fname</span>
              (<span style="color: #20b2aa; font-weight: bold;">unless</span> (gethash fname dhash)     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26368;&#21021;&#12395;&#20986;&#12390;&#12365;&#12383; fname &#12398;&#22580;&#25152;&#12434;&#35352;&#37682;&#12375;&#12390;&#12362;&#12367;</span>
                (puthash fname  dpoint dhash))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dhash[fname]  =dpoint</span>
              )
            )
          (<span style="color: #20b2aa; font-weight: bold;">unless</span> dpoint (<span style="color: #20b2aa; font-weight: bold;">setq</span> rep nil))
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#31777;&#26131;&#29256;: &#12501;&#12449;&#12452;&#12523;&#12398;&#25506;&#32034;&#12434;&#26368;&#12418; idive--isdir &#26041;&#21521;&#12391;&#26368;&#12418;&#36817;&#12356;&#19968;&#22238;&#12391;&#32066;&#12431;&#12425;&#12379;&#12427;</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(==&gt; &#12381;&#12398;&#20195;&#12431;&#12426; idive--filtered &#12434;&#12363;&#12369;&#12394;&#12356;)</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20197;&#19979;&#12434;&#12467;&#12513;&#12531;&#12488;&#12450;&#12454;&#12488;&#12377;&#12428;&#12400;  idive-present-point &#12363;&#12425; idive-next-point</span>
          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12414;&#12391;&#12395;&#12354;&#12427;&#20840;&#12390;&#12398;&#12501;&#12449;&#12452;&#12523;&#12398;&#26908;&#32034;&#12434;&#34892;&#12358; =&gt; &#31684;&#22258;&#12364;&#24195;&#12369;&#12428;&#12400;&#32080;&#27083;&#26178;&#38291;&#12364;&#12363;&#12363;&#12427;&#12371;&#12392;&#12418;&#12354;&#12427;.</span>
          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq rep nil)</span>
          )
        (idive--goto-char)
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> suffs (cdr suffs))
        )
      )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= (idive--isdir)  1) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (sort dive-points '&lt;)))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (= (idive--isdir) -1) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (sort dive-points '&gt;)))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#21517;&#12398;&#12522;&#12473;&#12488;&#12434;&#12388;&#12367;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">while</span> dive-points
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> dp          (car dive-points))
      (<span style="color: #20b2aa; font-weight: bold;">push</span> (gethash dp fhash) fnames)
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> dive-points (cdr dive-points))
      )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">filter &#12434;&#12363;&#12369;&#12427;&#22580;&#21512;(&#26908;&#32034;&#25991;&#23383;&#21015;&#12364;&#28961;&#12356;&#12501;&#12449;&#12452;&#12523;&#12399;&#38283;&#12363;&#12394;&#12356;)</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname (idive--filtered fnames))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12418;&#12375; idive-fname &#12364;&#12354;&#12428;&#12400;, fname &#12398;&#22580;&#25152;&#12434;&#30906;&#20445;&#12375;&#12390;&#12362;&#12367;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname (<span style="color: #20b2aa; font-weight: bold;">setq</span> idive-fname-point (gethash idive-fname dhash)))
    <span style="color: #cd853f;">; </span><span style="color: #cd853f;">filter &#12434;&#12363;&#12369;&#12394;&#12356;&#22580;&#21512;&#12399;&#20197;&#19979;</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq idive-fname (car fnames))</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12371;&#12371;&#12391; dive &#12377;&#12427;&#12501;&#12449;&#12452;&#12523;&#12434;&#30331;&#37682;&#12377;&#12427;</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(idive-visit-dived-file-p &#12364; t &#12394;&#12425;&#12400;&#30331;&#37682;&#12375;&#12394;&#12356;)</span>
    (<span style="color: #20b2aa; font-weight: bold;">unless</span> idive-visit-dived-file-p
      (<span style="color: #20b2aa; font-weight: bold;">if</span> idive-fname
          (puthash (idive--expand-file-name idive-fname) t idive-dived-files-hash)))
    )
  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> プログラム全体</h3>
<div class="outline-text-3" id="text-3-7">
<p>
いちおう以下に置いておく.<br  />
<a href="https://github.com/saito1369/isearch-dive">https://github.com/saito1369/isearch-dive</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 反省点</h2>
<div class="outline-text-2" id="text-4">
<p>
自分で使ってる分には今のところ問題なさそうだが, エラーが出る度に勉強しながら継ぎ足しつぎたしで書いてきたので, もうなんか最初から書き直した方がいいような.<br  />
そんな気分.<br  />
限定された使い方ではうまく動いてるように見えるけど, 色々と危ういことをやってそうな雰囲気でいきなり動かなくなりそう.<br  />
isearch の仕組みがよくわかってないまま作ってるので, もう少しきちんと調べてからやればよかったかもしれない.<br  />
特に isearch-なんとか という変数の使い方とか.<br  />
  isearch-string<br  />
  isearch-success<br  />
  isearch-forward<br  />
  isearch-case-fold-search<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 参考文献</h2>
<div class="outline-text-2" id="text-5">
<p>
Unix のメモ技術<br  />
<a href="http://0xcc.net/unimag/1/">http://0xcc.net/unimag/1/</a><br  />
</p>

<p>
ChangeLog メモを試してみよう<br  />
<a href="https://at-aka.blogspot.jp/p/change-log.html">https://at-aka.blogspot.jp/p/change-log.html</a><br  />
</p>

<p>
私の ChangeLog メモ活用法<br  />
<a href="http://ta2o.net/doc/zb/0016.html">http://ta2o.net/doc/zb/0016.html</a><br  />
</p>

<p>
ChangeLog メモで Howm を使う quasi-howm<br  />
<a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html</a><br  />
</p>

<p>
Automatically wrapping I-search?<br  />
<a href="https://stackoverflow.com/questions/285660/automatically-wrapping-i-search">https://stackoverflow.com/questions/285660/automatically-wrapping-i-search</a><br  />
</p>

<p>
"1 of n" result for Emacs search - Stack Overflow<br  />
<a href="https://stackoverflow.com/questions/14764130/1-of-n-result-for-emacs-search">https://stackoverflow.com/questions/14764130/1-of-n-result-for-emacs-search</a><br  />
</p>

<p>
ace-isearch : isearch、ace-jump-mode、avy、helm-swoopを滑らかに統合 - Qiita<br  />
<a href="http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c">http://qiita.com/ballforest/items/7c3f2e64b59d8157bc8c</a><br  />
</p>

<p>
emacs: interactively search open buffers<br  />
<a href="https://stackoverflow.com/questions/2641211/emacs-interactively-search-open-buffers">https://stackoverflow.com/questions/2641211/emacs-interactively-search-open-buffers</a><br  />
</p>

<p>
ace-jump-modeの紹介 - syohex’s diary<br  />
<a href="http://syohex.hatenablog.com/entry/20120304/1330822993">http://syohex.hatenablog.com/entry/20120304/1330822993</a><br  />
</p>

<p>
画面内を素早くカーソル移動する方法のまとめ - Qiita<br  />
<a href="http://qiita.com/ballforest/items/834c92bf5bf262c37973">http://qiita.com/ballforest/items/834c92bf5bf262c37973</a><br  />
</p>

<p>
Emacs Lisp 関数のアドバイス<br  />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_17.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_17.html</a><br  />
<a href="http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_17.html">http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_17.html</a><br  />
</p>

<p>
Emacs Lisp 基礎文法最速マスター<br  />
<a href="http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax">http://d.hatena.ne.jp/rubikitch/20100201/elispsyntax</a><br  />
</p>

<p>
Emacs Lisp でスクリプト処理<br  />
<a href="http://dev.ariel-networks.com/articles/software-design-200802/elisp-scripting/">http://dev.ariel-networks.com/articles/software-design-200802/elisp-scripting/</a><br  />
</p>

<p>
正規表現の検索<br  />
<a href="http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html">http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html</a><br  />
</p>

<p>
バッファファイル名<br  />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html</a><br  />
</p>

<p>
リストと連想配列 - 環境設定のための Emacs Lisp 入門 | プログラマーズ雑記帳<br  />
<a href="http://yohshiy.blog.fc2.com/blog-entry-269.html">http://yohshiy.blog.fc2.com/blog-entry-269.html</a><br  />
</p>

<p>
7.1. Creating Hash Tables<br  />
<a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#Creating-Hash">https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#Creating-Hash</a><br  />
</p>

<p>
re-search-forward<br  />
<a href="https://www.gnu.org/software/emacs/manual/html_node/eintr/re_002dsearch_002dforward.html">https://www.gnu.org/software/emacs/manual/html_node/eintr/re_002dsearch_002dforward.html</a><br  />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_34.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_34.html</a><br  />
<a href="http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html">http://www.math.s.chiba-u.ac.jp/~matsu/lisp/emacs-lisp-intro-jp_13.html</a><br  />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_552.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_552.html</a><br  />
</p>

<p>
2.4. ファイル<br  />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html</a><br  />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_406.html</a><br  />
<a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_27.html">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_27.html</a><br  />
</p>

<p>
エラー(制御構造)<br  />
<a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_104.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_104.html</a><br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主成分分析の学習]]></title>
    <link href="http://saito1369.github.io/blog/2017-07-26-003653.html"/>
    <updated>2017-07-26T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/003653</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 参考 URL</a></li>
<li><a href="#sec-2">2. データ</a></li>
<li><a href="#sec-3">3. 求めたいもの</a></li>
<li><a href="#sec-4">4. 主成分軸の計算</a></li>
<li><a href="#sec-5">5. 第一主成分</a></li>
<li><a href="#sec-6">6. 寄与率(proportion)</a></li>
<li><a href="#sec-7">7. 因子負荷量(factor loading)</a></li>
<li><a href="#sec-8">8. まとめ</a>
<ul>
<li><a href="#sec-8-1">8.1. 主成分分析</a></li>
<li><a href="#sec-8-2">8.2. 主成分得点</a></li>
<li><a href="#sec-8-3">8.3. 寄与率</a></li>
<li><a href="#sec-8-4">8.4. 因子負荷量</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2010-03-24 Wed 00:36&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 13:02&gt;</span></span><br  />
</p>
<p>
主成分分析の学習のきろく.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 参考 URL</h2>
<div class="outline-text-2" id="text-1">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2010-03-24 00:36]</span></span><br  />
<a href="http://www-pse.cheme.kyoto-u.ac.jp/~kano/document/text-PCA.pdf">http://www-pse.cheme.kyoto-u.ac.jp/~kano/document/text-PCA.pdf</a><br  />
もう見れない様子<br  />
</p>

<p>
改めて探したらこっちに移ってた.<br  />
<a href="http://manabukano.brilliant-future.net/document/text-PCA.pdf">http://manabukano.brilliant-future.net/document/text-PCA.pdf</a><br  />
</p>

<p>
以下は, この pdf をよみながら勉強した記録である.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> データ</h2>
<div class="outline-text-2" id="text-2">
<p>
(自分用)<br  />
以下のようなデータを想定する.<br  />
サンプル(測定サンプル)の id: \(n = 1 \ldots N\) (N 個のサンプル)<br  />
測定値(化合物) の        id: \(p = 1 \ldots P\) (P 個の化合物の量)<br  />
</p>

<p>
サンプル 1 の測定値 \(\vec{x}_{1} = (x_{11}, x_{12}, \ldots ,x_{1P})\)<br  />
サンプル 2 の測定値 \(\vec{x}_{2} = (x_{21}, x_{22}, \ldots ,x_{2P})\)<br  />
&#x2026;<br  />
サンプル N の測定値 \(\vec{x}_{N} = (x_{N1}, x_{N2}, \ldots ,x_{NP})\)<br  />
</p>

<p>
註: それぞれの変数 \(x_{np} (n=1 \ldots N)\) に対する平均値 = 0 に規格化されているとする.<br  />
    すなわち, \(x_{11} + x_{21} + \ldots + x_{N1}=0\) などと規格化されているものとする<br  />
    (上の式で列の足し算を計算してこれを 0 とするように変数変換しておく).<br  />
</p>

<p>
行列 \(X\) は以下のように定義する(\(N\) 行 \(P\) 列の行列).<br  />
</p>
\begin{equation*}
  X = \left[
    \begin{array}{rrrr}
       x_{11} & x_{12} & \ldots & x_{1P} \\
       x_{21} & x_{22} & \ldots & x_{2P} \\
       \ldots & \ldots & \ldots & \ldots \\
       x_{i1} & x_{i2} & \ldots & x_{iP} \\
       \ldots & \ldots & \ldots & \ldots \\
       x_{N1} & x_{N2} & \ldots & x_{NP} \\
    \end{array}
  \right]
\end{equation*}

<p>
測定値の種類(化合物. \(X\) における列)に対する名前を \(x_p\) と書く.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 求めたいもの</h2>
<div class="outline-text-2" id="text-3">
<p>
情報の損失を最小限に抑えた新しい軸を作成する.<br  />
= 新しい軸(主成分)で計測したサンプル値の分散が最大となるように, 新しい軸を定める.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 主成分軸の計算</h2>
<div class="outline-text-2" id="text-4">
<p>
測定値の種類(化合物. \(X\) における列)の名前を \(x_p\) とする.<br  />
</p>

<p>
列名 \(x_1, x_2, \ldots, x_p, \ldots, x_P\) に対して<br  />
主成分を以下のようにおく.<br  />
第一主成分 \(z_1\), 第二主成分 \(z_2\), \(\ldots\), 第 \(m\) 主成分 \(z_m\), \(\ldots\), \(z_P\)<br  />
</p>

\begin{align*}
z_1 &= w_{11} x_1 + w_{21} x_2 + \ldots + w_{P1} x_P \\
z_2 &= w_{12} x_1 + w_{22} x_2 + \ldots + w_{P2} x_P \\
\ldots \\
z_m &= w_{1m} x_1 + w_{2m} x_2 + \ldots + w_{Pm} x_P \\
\ldots \\
z_P &= w_{1P} x_1 + w_{2P} x_2 + \ldots + w_{PP} x_P
\end{align*}

<p>
第 \(m\) 主成分 \(z_m\) の係数 \(w_{pm} (p=1 \ldots P)\) に対する条件を以下のようにとる:<br  />
$$
  \sum_{p=1}^{P} w_{pm}^{2} = 1
  $$<br  />
(係数の自乗和 = 1 に制限することで \(w\) の値が具体的にきまる)<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 第一主成分</h2>
<div class="outline-text-2" id="text-5">
<p>
まず第一主成分を求める.<br  />
第一主成分の結合係数 \(w_1\) を以下のように書く.<br  />
</p>

<p>
$$
  w_{1}^{T} = (w_{11}, w_{21}, \ldots ,w_{P1})
  $$<br  />
\(T\) は転置を示す(\(w_{1}\) は列ベクトル).<br  />
</p>

<p>
上の標記を用いると,<br  />
$$
  \sum_{p=1}^{P} w_{pm}^{2} = 1
  $$<br  />
の条件は<br  />
$$
  w_{1}^{T} w_{1} = 1
  $$<br  />
と書ける.<br  />
</p>

<p>
サンプル \(n\) の測定値<br  />
$$
  \vec{x}_{n} = (x_{n1},x_{n2}, \ldots, x_{nP})
  $$<br  />
に対する第一主成分 \(z_1\) の値 \(t_{n1}\) は<br  />
</p>

<p>
$$
  t_{n1} = \sum_{p=1}^{P} w_{pn} x_{np} = \vec{x}_{n} w_1
  $$<br  />
\(t_{n1}\) を \(\vec{x}_{n}\) に対する第一主成分得点と呼ぶ.<br  />
</p>

<p>
\(N\) 個のサンプルに対して, 第一主成分 \(z_1\) に対する主成分得点ベクトル \(t_1\) を以下のように書く.<br  />
</p>

<p>
$$
  t_{1}^{T} =(t_{11}, t_{21}, \ldots, t_{N1})
  $$<br  />
</p>

<p>
これは, 以下のように書ける.<br  />
$$
  t_{1} = X w_{1}
  $$<br  />
</p>

<p>
第一主成分の分散 \(var_{z_1}\) は,<br  />
\(t_{1}\) の平均値は 0 であることに注意すると<br  />
\(var_{z_1} = \frac{t_{1}^{T} t_{1}}{N-1}\) と書け, 以下のように変形できる.<br  />
</p>

\begin{align*}
var_{z_1} &= \frac{t_{1}^{T} t_{1}}  {N-1}  \\
          &= \frac{(X w_1)^T (X w_1)}{N-1}  \\
          &= w_1^T (\frac{X^T X}{N-1}) w_1  \\
          &= w_{1}^{T} V w_1
\end{align*}
<p>
但し \(V = \frac{X^T X}{N-1}\) (共分散行列. \(P\) 次元の正方行列) とした.<br  />
</p>

<p>
第一主成分はその分散 \(var_{z_1}\) が最大値をとる.<br  />
\(w_{1}^{T} w_{1} = 1\) の条件下で \(w_1\) を求めるためには,<br  />
Lagrange の未定乗数法を用いるとよい.<br  />
</p>

\begin{equation*}
J_1 = w_{1}^{T} V w_{1} - \lambda(w_{1}^{T} w_{1} -1)
\end{equation*}
<p>
を考え, \(J_1\) を最大にする \(w_{1}\) を求めれば, 第一主成分 \(z_1\) を求める事ができる.<br  />
\(J_1\) を \(w_1\) で偏微分し 0 とおく.<br  />
</p>

\begin{align*}
\frac{\partial J_1}{\partial w_1} &= 2 V w_1 - 2 \lambda w_1 \\
                                 &= 2(V - \lambda I) w_{1}
\end{align*}
<p>
但し, \(I\) は \(P\) 次元の単位行列.<br  />
上の式は固有値問題にほかならない. 即ち \(w_{1}\) が 0 以外の解を持つためには<br  />
$$
  det| V - \lambda I | = 0
  $$<br  />
でないといけない.<br  />
固有値は, \(\lambda_1 > \lambda_2 > > \ldots > \lambda_P\) と \(P\) 個求められる<br  />
(大きい順から \(\lambda_1\), \(\lambda_2\) と書くことにする).<br  />
</p>

<p>
対応する固有ベクトルのうちのどれかが \(w_1\) となる.<br  />
</p>


<p>
一方, 第一主成分で計測した値の分散 \(var_{z_1}\) は,<br  />
</p>
\begin{align*}
var_{z_1} &= w_{1}^{T} V       w_{1} \\
          &= w_{1}^{T} \lambda w_{1} \\
          &= \lambda
\end{align*}
<p>
1 行目から 2 行目への変換は, \(V-\lambda I = 0\) を用いた.<br  />
</p>

<p>
すなわち, 主成分で計測した値の分散は固有値と等しくなる.<br  />
</p>

<p>
第一主成分はそれで計測した値の分散が最も大きいものであるので,<br  />
第一主成分 \(w_1\) は, 固有値 \(\lambda_1\) に対応する固有ベクトルとなる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 寄与率(proportion)</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://manabukano.brilliant-future.net/document/text-PCA.pdf">http://manabukano.brilliant-future.net/document/text-PCA.pdf</a><br  />
</p>
<pre class="example">
  主成分分析とは少数の統合的指標(主成分)を用いて変数間の関係や特徴を把握するための統計的手法である.
  従って, 各主成分が元のデータに含まれる特徴をどの程度表現しているのか,
  あるいは何個の主成分を採用すれば元のデータに含まれる特徴を十分に表現できるのかを知ることが必要になる.
  このための指標として, 寄与率および累積寄与率がある.
</pre>

<p>
合計 \(P\) 個の変数の分散の和は, その共分散行列を \(V\) とすると, \(V\) の \(p\) 行 \(p\) 列目要素 \(v_{pp}\) が \(x_p\) の分散に等しくなるので,<br  />
$$
  \sum_{p=1}^{P} var_{x_p} = \sum_{p=1}^{P} v_{pp}  = tr(V)
  $$<br  />
</p>

<p>
一方, 第 \(m\) 主成分の分散 \(var_{z_m}\) は共分散行列 \(V\) の \(m\) 番目に大きな固有値 \(\lambda_m\) に等しいので,<br  />
$$
  \sum_{p=1}^{P} var_{z_p} = \sum_{p=1}^{P} \lambda_p = tr(V)
  $$<br  />
(一般に, すべての固有値の和=行列のトレース)<br  />
</p>

<p>
従って, 元の変数で計測した値の分散の総和 = 主成分で計測した値の分散の総和 となる.<br  />
そこで, 第 \(m\) 主成分が元のデータに含まれる特徴をどの程度表現しているかを示す指標として,<br  />
第 \(m\) 主成分(で計測した値)の分散が分散の総和に占める割合<br  />
</p>

<p>
$$
  C_m = \frac{\lambda_m}{\sum_{p=1}^{P} \lambda_p} = \frac{\lambda_m}{tr(V)}
  $$<br  />
</p>

<p>
を利用できる. \(C_m\) は寄与率(proportion)と呼ばれ, 通常 % を用いて示される.<br  />
</p>

<p>
第 \(m\) 主成分までの分散の和<br  />
$$
  P_m = \sum_{i=1}^{m} C_i
  $$<br  />
は累積寄与率(cumulative proportion) と呼ばれる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 因子負荷量(factor loading)</h2>
<div class="outline-text-2" id="text-7">
<p>
<a href="http://manabukano.brilliant-future.net/document/text-PCA.pdf">http://manabukano.brilliant-future.net/document/text-PCA.pdf</a><br  />
</p>
<pre class="example">
  主成分は各変数の線形結合として与えられるので, その解釈のためには, 主成分と各変数との相関を
  把握することにより主成分に強く影響を及ぼす変数を特定することが有効である.
</pre>

<p>
そのための指標 因子負荷量は, 主成分と変数との相関係数として定義される.<br  />
</p>

<p>
第 \(m\) 主成分 \(z_m\) と \(p\) 番目の変数 \(x_p\) との間の因子負荷量は,<br  />
</p>

<p>
$$
  r_{z_m,x_p} = \frac{var_{z_m,x_p}} {sd_{z_m} sd_{x_p}}
  $$<br  />
</p>

<p>
ただし,<br  />
\(sd_{z_m}\) : 主成分 \(z_m\) (で計測した値)の標準偏差 = \(\sqrt{\lambda_m}\)<br  />
\(sd_{x_p}\) : 変数   \(x_p\) (\(N\) 個ある) の値の標準偏差<br  />
\(var_{z_m,x_p}\) : \(z_m\), \(x_p\) の共分散<br  />
</p>

<p>
主成分 \(z_m\) で計測した N 個のデータの値 \(t_{m}^{T} =(t_{1m}, \ldots ,t_{Nm})\) は,<br  />
$$
  t_{1} = X w_{1}
  $$<br  />
より,<br  />
$$
  t_{m} = X w_{m}
  $$<br  />
となる.<br  />
また, \(x_p\) に関しては, \(c_{p}^{T}=(0, \ldots ,1, \ldots 0)\) (\(p\) 番目だけが 1 の \(P\) 次元ベクトル)と書くと<br  />
$$
  x_{p} = X c_{p}
  $$<br  />
</p>

\begin{align*}
var_{z_m, x_p} = \frac{(X w_m)^T X c_p}{N-1}
\end{align*}
<p>
\(X w_m\) は \(t_m\) で, \(X c_p\) は \(x_p\). これらを要素毎に掛け合わせて足して, \(N-1\) (不偏分散を考えてる)で割る.<br  />
平均は 0 で規格化されてるからこの値が共分散となる.<br  />
</p>

<p>
これを展開していくと,<br  />
</p>
\begin{align*}
var_{z_m, x_p} &= \frac{(X w_m)^T X c_p}{N-1} \\
               &= \frac{w_{m}^{T} X^{T} X c_p}{N-1} \\
               &= w_{m}^{T} V c_p \\
               &= (V w_{m})^T c_p \\
               &= (\lambda_m w_{m})^T c_p \\
               &= \lambda_m w_{m}^T c_p \\
               &= \lambda_m w_{pm}
\end{align*}
<p>
2 行目から 3 行目は \(V = \frac{X^{T} X}{N-1}\) より<br  />
4 行目から 5 行目は, \(2(V - \lambda_m I) w_{m}=0\) より<br  />
6 行目から 7 行目は, \(c_p\) は \(p\) 番目の要素を取り出す役割があるので.<br  />
</p>

<p>
従って, 主成分 \(z_m\) と変数 \(x_p\) の因子負荷量<br  />
(主成分 \(z_m\) で計測したデータの値 (N 次元ベクトル) と変数 \(x_p\) の値(N 次元ベクトル \(X\) の縦 1 列分)との相関係数)は<br  />
</p>

\begin{align*}
r_{z_m,x_p} &= \frac{\lambda_m w_{pm}}{(\sqrt{\lambda_m} sd_{x_p})} \\
            &= \frac{\sqrt{\lambda_m} w_{pm}}{sd_{x_p}}
\end{align*}
<p>
となる.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> まとめ</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-sec-8-1" class="outline-3">
<h3 id="sec-8-1"><span class="section-number-3">8.1</span> 主成分分析</h3>
<div class="outline-text-3" id="text-8-1">
<p>
\(V\) を分散共分散行列(\(P\) x \(P\) の行列)として<br  />
$$
   V w = \lambda w
   $$<br  />
固有ベクトル \(w_{m}\) が \(m\) 番目の主成分.<br  />
\(\lambda_m\) は 主成分 \(z_{m}\) で計測したデータの値(N 個ある)の分散の大きさ.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-8-2" class="outline-3">
<h3 id="sec-8-2"><span class="section-number-3">8.2</span> 主成分得点</h3>
<div class="outline-text-3" id="text-8-2">
<p>
主成分 \(z_{m}\) に対するデータ \(\vec{x}_{n}\) の主成分得点は<br  />
$$
   t_{nm} = \vec{x}_{n} w_{m}
   $$<br  />
</p>
</div>
</div>
<div id="outline-container-sec-8-3" class="outline-3">
<h3 id="sec-8-3"><span class="section-number-3">8.3</span> 寄与率</h3>
<div class="outline-text-3" id="text-8-3">
<p>
1 つの主成分が元データの特徴をどの程度表現できてるか.<br  />
$$
   \frac{\lambda_m}{\sum_{p}^{P} \lambda_{p}}
   $$<br  />
</p>
</div>
</div>
<div id="outline-container-sec-8-4" class="outline-3">
<h3 id="sec-8-4"><span class="section-number-3">8.4</span> 因子負荷量</h3>
<div class="outline-text-3" id="text-8-4">
<p>
主成分軸と元の軸の相関係数<br  />
主成分 \(z_m\) で計測したデータの値と変数 \(x_p\) の値との相関<br  />
$$
   \frac{\sqrt{\lambda_m} w_{pm}}{sd_{x_p}}
   $$<br  />
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[統計的学習の導入ぶぶん]]></title>
    <link href="http://saito1369.github.io/blog/2017-06-20-184414.html"/>
    <updated>2017-06-20T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/184414</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 準備</a>
<ul>
<li><a href="#sec-1-1">1.1. \(P(x)\) の数式について</a></li>
<li><a href="#sec-1-2">1.2. 離散と連続</a></li>
<li><a href="#sec-1-3">1.3. 変数名と具体的な値の区別など</a></li>
<li><a href="#sec-1-4">1.4. 回帰分析</a></li>
</ul>
</li>
<li><a href="#sec-2">2. 考える事</a>
<ul>
<li><a href="#sec-2-1">2.1. #01: \(y\) の(\(x\) を固定したときの)分布の形</a>
<ul>
<li><a href="#sec-2-1-1">2.1.1. 分布の形の想定</a></li>
<li><a href="#sec-2-1-2">2.1.2. (参考) \(y\) の値の制限と想定される分布との関係</a></li>
</ul>
</li>
<li><a href="#sec-2-2">2.2. #02: \(y\) のパラメータと \(x\) との関係</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1. \(y\) の分布のパラメータ \(m\) と \(x\) との関係を考える</a></li>
<li><a href="#sec-2-2-2">2.2.2. (参考) 分布のパラメータ値の制限と \(x\) との関係を形作る関数(リンク関数)</a></li>
</ul>
</li>
<li><a href="#sec-2-3">2.3. #03: 同時確率(密度) = 尤度計算</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1. データが得られる確率(密度)の計算</a></li>
<li><a href="#sec-2-3-2">2.3.2. 尤度の計算</a></li>
<li><a href="#sec-2-3-3">2.3.3. 同時確率(密度)の計算</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-3">3. パラメータの推定</a>
<ul>
<li><a href="#sec-3-1">3.1. 最尤推定</a></li>
<li><a href="#sec-3-2">3.2. ベイズ推定</a>
<ul>
<li><a href="#sec-3-2-1">3.2.1. パラメータの「分布」の推定</a></li>
<li><a href="#sec-3-2-2">3.2.2. (参考) 正則化と事前分布</a></li>
<li><a href="#sec-3-2-3">3.2.3. (参考) 階層ベイズ</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-4">4. 例</a>
<ul>
<li><a href="#sec-4-1">4.1. 線形回帰</a>
<ul>
<li><a href="#sec-4-1-1">4.1.1. #01 \(y\) の分布の形</a></li>
<li><a href="#sec-4-1-2">4.1.2. #02 \(y\) のパラメータと \(x\) との関係</a></li>
<li><a href="#sec-4-1-3">4.1.3. #03 同時確率</a></li>
</ul>
</li>
<li><a href="#sec-4-2">4.2. ロジスティック回帰</a>
<ul>
<li><a href="#sec-4-2-1">4.2.1. #01 \(y\) の分布の形</a></li>
<li><a href="#sec-4-2-2">4.2.2. #02 \(y\) のパラメータと \(x\) との関係</a></li>
<li><a href="#sec-4-2-3">4.2.3. #03 同時確率</a></li>
</ul>
</li>
<li><a href="#sec-4-3">4.3. 多クラス分類</a>
<ul>
<li><a href="#sec-4-3-1">4.3.1. #01 \(y\) の分布の形</a></li>
<li><a href="#sec-4-3-2">4.3.2. #02 \(y\) のパラメータと \(x\) との関係</a></li>
<li><a href="#sec-4-3-3">4.3.3. #03 同時確率</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-5">5. ニューラルネット</a>
<ul>
<li><a href="#sec-5-1">5.1. 線形回帰</a>
<ul>
<li><a href="#sec-5-1-1">5.1.1. #02 \(y\) のパラメータと \(x\) との関係</a></li>
</ul>
</li>
<li><a href="#sec-5-2">5.2. ロジスティック回帰</a>
<ul>
<li><a href="#sec-5-2-1">5.2.1. #02 \(y\) のパラメータと \(x\) との関係</a></li>
</ul>
</li>
<li><a href="#sec-5-3">5.3. 多クラス分類</a>
<ul>
<li><a href="#sec-5-3-1">5.3.1. #02 \(y\) のパラメータと \(x\) との関係</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-06-20 Tue 18:44&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2024-10-15 Tue 13:04&gt;</span></span><br  />
</p>
<p>
遅ればせながら統計学とか機械学習とかを改めて勉強しようと思い, 初心者向けの色々な本を読み始めている.<br  />
導入部分を自分なりにまとめる.<br  />
色々と勘違いなどあるかと思いますがきろくとして残しておく.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 準備</h2>
<div class="outline-text-2" id="text-1">
<p>
数式と変数の書き方など<br  />
</p>
</div>
<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> \(P(x)\) の数式について</h3>
<div class="outline-text-3" id="text-1-1">
<p>
確率を示す \(p(x)\) とか \(P(x)\) とか, 普通(?)の数学とは何か意味が違うんだろうか?<br  />
何かいつも途中でわけがわかんなくなるなぁ, と思ってたのだが&#x2026;<br  />
計算統計II マルコフ連鎖モンテカルロ法とその周辺 という本のめちゃ最初の方にに以下の記述があった.<br  />
</p>

<pre class="example">
   さまざまな条件付き確率(密度)があらわれるとき, それらをすべて P あるいは p で表現し,
   独立変数によって区別するという記法がよく用いられるが, この解説でもそれに従った.
</pre>

<p>
あーっ. なんと, そういうことだったのか&#x2026;<br  />
\(P(x)\) と \(P(y)\) は, 違う関数を表してたんだ&#x2026; 知らなかったよ.<br  />
何か最初はいいけど途中から色々と変だなと思ってたんだよなぁ.<br  />
こういうことを明示的に書いてくれる本を今まで読んだことがなかった(見落としてたのかな?)ので, この本を読んで知れてよかった.<br  />
つーか言われなきゃずっとわかんなかったかも&#x2026;<br  />
これって当たり前なんだろーか.<br  />
まぁ読んでたら普通気づくんだろうなぁ.<br  />
\(f(x)=2x+1\) と書くんであれば \(f(y)=2y+1\) だし, 別の関数を表現するんなら名前を変える,<br  />
例えば \(g(x)=x^2\) と書くのがふつーかと思ってたけどそーじゃない.<br  />
\(P(x)=2x+1\) で \(P(y)\) は \(2y+1\) じゃなくて全然違う関数,<br  />
例えば \(P(y)=y^2\) を示しているかも, という点にちゅうい.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 離散と連続</h3>
<div class="outline-text-3" id="text-1-2">
<p>
統計学の教科書では変数 \(x\) が離散変数か連続変数かが重要っぽい.<br  />
そんなに心してかかることなのだろーか?<br  />
連続変数を粗視化してったら離散になるんだから, 連続だけ考えとけばいいんじゃないの?<br  />
と思いましたがそうでもないっぽい.<br  />
この辺色々な教科書を読んみても何かいまいちしっくりこないなーと思いつつ, 違いと対応関係についてまとめておく.<br  />
</p>

<p>
離散変数 \(x\) をとる確率を \(P(x)\) とかく.<br  />
確率なのでとり得る \(x={ x_{(1)}, x_{(2)}, ... x_{(M)} }\) の \(P(x)\) を全部たすと 1 になる.<br  />
</p>

<p>
$$
   \sum_{i=1}^{M} P(x_{(i)}) = 1
   $$<br  />
</p>

<p>
連続変数の場合, \(x\) の具体的な値 \(x=X\) をとる確率は 0.<br  />
確率は微小値 \(\delta X\) を使って \(P(X) = \int_{X}^{X+\delta X} p(x) dx \sim p(X) \delta X\) となる.<br  />
</p>

<p>
\(p(x)\) は積分すると確率になる確率密度関数<br  />
</p>

<p>
$$
   \int_{x_{min}}^{x_{max}} p(x) dx = 1
   $$<br  />
</p>

<p>
\(x_{min}\), \(x_{max}\) はそれぞれ \(x\) がとれる値の最小値, 最大値.<br  />
</p>

<p>
上の 2 つは確率のめちゃ基本的な式.<br  />
離散 &lt;-&gt; 連続での対応関係は以下:<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">離散</th>
<th scope="col" class="left">連続</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">関数</td>
<td class="left">\(P(x)\)</td>
<td class="left">\(p(x)\)</td>
</tr>

<tr>
<td class="left">規格化</td>
<td class="left">和 \(\sum_{i=1}^{M}\)</td>
<td class="left">積分 \(\int_{x_{min}}^{x_{max}} dx\)</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
離散変数のときは \(P(x)\) を使って, 連続変数のときは \(p(x)\) を使う.<br  />
離散のときは和, 連続のときは積分を使う.<br  />
\(P(x)\) と \(p(x)\) は単位が違うような感じがするけどいいんだろうか&#x2026;<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 変数名と具体的な値の区別など</h3>
<div class="outline-text-3" id="text-1-3">
<p>
変数名の添字の意味が色々あってややこしく, 読んでてすぐ挫折しそうになるので, どんなのがあるのかをまとめておく.<br  />
</p>

<ul class="org-ul">
<li>(確率)変数の名前 = 属性(schema)の名前 = (表における)列の名前 = 箱の名前 =&gt; ここでは, 小文字アルファベットで<br  />
例:<br  />
気温 \(x\)<br  />
年齢 \(x\)<br  />
性別 \(x\)<br  />
</li>

<li>データ = 具体的な数値 = (表における)セルに入ってる値  = 箱の中に入ってる値 (の名前) =&gt; 大文字アルファベット<br  />
例:<br  />
気温 \(X (= 25)\) 度<br  />
年齢 \(X (= 20)\) 歳<br  />
性別 \(X (= M)\)<br  />
</li>

<li>各々のサンプルにおける具体的な値(の名前) =&gt; 上付き文字(かっこ入り)<br  />
例:<br  />
気温データ \(X^{(1)}, X^{(2)}, ... X^{(j)}, ... X^{(N)}\)<br  />
   気温の具体的な値が \(N\) 個あってそれぞれ \(X^{(1)}\) &#x2026;<br  />
</li>

<li>ベクトルの要素 =&gt; 下付き文字<br  />
例:<br  />
\(\vec{x} = (x_1,x_2, ... x_k, ... x_K)\)<br  />
\(x\) は基本的にはベクトル. ベクトルと明示したいときに \(\vec{x}\) を使うことにする.<br  />
</li>

<li>離散変数 \(x\) の具体的な値(の名前) =&gt; 下付き文字(かっこ入り)<br  />
離散変数 \(x\) は \(M\) 種類あってその値は \(x_{(i)}\)<br  />
\(x = { x_{(1)}, x_{(2)}, ... x_{(i)}, ... x_{(M)} }\)<br  />
</li>

<li>累乗 =&gt; 上付き文字<br  />
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> 回帰分析</h3>
<div class="outline-text-3" id="text-1-4">
<p>
大抵のばあい, データ \((X,Y)\) から知りたいのは変数 \(x\) と \(y\) との関係性で, \(x\) と \(y\) の関係性は \(y=f(x)\) と書ける(回帰分析).<br  />
実際は, \(y\) は確率変数として取り扱うので左辺は \(y\) そのものというよりは,<br  />
例えば \(y_{mean}\) のような \(y\) の分布の代表値を使って \(y_{mean} = f(x)\) のようになるかと思う.<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 考える事</h2>
<div class="outline-text-2" id="text-2">
<p>
分析を行う際に考えることは以下の 3 つ.<br  />
</p>

<ol class="org-ol">
<li>\(y\) の(\(x\) を固定したときの)分布の形<br  />
</li>
<li>\(y\) の分布のパラメータと \(x\) との関係<br  />
</li>
<li>同時確率<br  />
</li>
</ol>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> #01: \(y\) の(\(x\) を固定したときの)分布の形</h3>
<div class="outline-text-3" id="text-2-1">
</div><div id="outline-container-sec-2-1-1" class="outline-4">
<h4 id="sec-2-1-1"><span class="section-number-4">2.1.1</span> 分布の形の想定</h4>
<div class="outline-text-4" id="text-2-1-1">
<p>
\(y\) は決定的な値ではなく, 偶然によってふらつく値であると考える.<br  />
全く同じ条件で観測しても, あるときは 5 と観測され, あるときは 7 と観測されたりする.<br  />
一つひとつの \(y\) の実現値はそんな値.<br  />
すなわち, (\(x\) を固定して)全く同じ条件で何回も観測すれば, \(y\) のばらつき具合(分布)を見ることが出来る筈である.<br  />
実際は, 全く同じ条件で何度も観測できてる状態はまれなので, \(x\) を固定しない \(y\) のデータ全体から, \(x\) を固定した状態での \(y\) の分布を想定することになる(?).<br  />
</p>

<p>
例えば, 大体いつも出てくる典型的な想定は \(y\) は正規分布をする, というもの.<br  />
観測値 \(y\) のばらつきがいろんな細かい条件の積み重ねに由来するものであれば, \(y\) は正規分布すると考えて問題無いことが多かったりする(中心極限定理. だったっけ？).<br  />
</p>

<p>
例: \(y\) は正規分布してる, と考えた場合, \(y\) の確率密度 \(p(y)\) は以下のようにかける.<br  />
$$
    p(y) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp(-\frac{(y-m)^2}{2\sigma^2})
    $$<br  />
</p>

<p>
正規分布の場合, 分布の具体的な形を決めるためのパラメータは 2 つあって, 一つは期待値 \(m\), もう一つは標準偏差 \(\sigma\) である.<br  />
</p>

<p>
想定した分布のパラメータ(と \(y\) の代表値との関係)を把握したあと次に進む.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-1-2" class="outline-4">
<h4 id="sec-2-1-2"><span class="section-number-4">2.1.2</span> (参考) \(y\) の値の制限と想定される分布との関係</h4>
<div class="outline-text-4" id="text-2-1-2">
<p>
想定される分布は, \(y\) がどのような値をとりえるかによってある程度制限される.<br  />
\(y\) の真の分布はわからないので(うまくデータと合うようにできれば実際はなんでもよい？(注)),<br  />
\(y\) の値の特性によって用いる分布に必要条件的に制限がかけられている, というイメージでかんがえるとよい.<br  />
</p>

<p>
(注)<br  />
Stan と R でベイズ統計モデリング p80 より<br  />
</p>
<pre class="example">
    ほとんどの場合, 現実のデータがある確率分布に従っていると考えるというのは単なる仮定にすぎない.
</pre>

<p>
以下によく見る分布をしめす. 各々の分布についての詳細は省略する.<br  />
</p>

<p>
\(y\) が連続値をとる場合:<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(y\) の範囲</th>
<th scope="col" class="left">分布</th>
<th scope="col" class="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\((-\infty,\infty)\)</td>
<td class="left">正規分布</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">\((0,\infty)\)</td>
<td class="left">ガンマ分布</td>
<td class="left">待ち時間とか</td>
</tr>

<tr>
<td class="left">\((0,\infty)\)</td>
<td class="left">対数正規分布</td>
<td class="left">体重とか</td>
</tr>

<tr>
<td class="left">\((0,1)\)</td>
<td class="left">ベータ分布</td>
<td class="left">比率</td>
</tr>

<tr>
<td class="left">\([0,\infty)\)</td>
<td class="left">指数分布</td>
<td class="left">イベントが起こるまでの時間</td>
</tr>
</tbody>
</table>
<BR>

<p>
\(y\) が \(K\) 次元のベクトルの場合:<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(y_{k}\) の範囲</th>
<th scope="col" class="left">\(\vec{y}\) の条件</th>
<th scope="col" class="left">分布</th>
<th scope="col" class="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\((-\infty,\infty)\)</td>
<td class="left">&#xa0;</td>
<td class="left">多変量正規分布</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">\((0,1)\)</td>
<td class="left">\(\sum y_k = 1\)</td>
<td class="left">ディリクレ分布</td>
<td class="left">ベータ分布の多次元版</td>
</tr>
</tbody>
</table>

<BR><BR>
<p>
\(y\) が離散値をとる場合:<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">y の範囲</th>
<th scope="col" class="left">分布</th>
<th scope="col" class="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\([0,1]\)</td>
<td class="left">ベルヌーイ分布</td>
<td class="left">コイン投げ</td>
</tr>

<tr>
<td class="left">\([0,N]\)</td>
<td class="left">二項分布</td>
<td class="left">複数のコイン投げで表の出た数</td>
</tr>

<tr>
<td class="left">\([0,\infty)\)</td>
<td class="left">ポアソン分布</td>
<td class="left">イベント回数/単位時間</td>
</tr>

<tr>
<td class="left">\([1,K]\)</td>
<td class="left">カテゴリカル分布</td>
<td class="left">サイコロ投げで出た目</td>
</tr>
</tbody>
</table>
<BR>

<p>
\(y\) が \(K\) 次元のベクトルの場合:<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">\(y_{k}\) の範囲</th>
<th scope="col" class="left">\(\vec{y}\) の条件</th>
<th scope="col" class="left">分布</th>
<th scope="col" class="left">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\([0,N]\)</td>
<td class="left">\(\sum y_{k}=N\)</td>
<td class="left">多項分布</td>
<td class="left">複数のサイコロ投げで \(k(k=1,..K)\) が出た数の分布</td>
</tr>
</tbody>
</table>
<BR><BR>

<p>
(注):<br  />
ベルヌーイ分布(0,1)の多次元版(1..K)がカテゴリカル分布<br  />
二項分布(0,1 をN 回)の多次元版(1..K をN 回)が多項分布<br  />
ベルヌーイ分布(0,1)を多数回やったのが二項分布(0,1 を N 回)<br  />
カテゴリカル分布(1..K)を多数回やったのが多項分布(1..K をN回)<br  />
参照:<br  />
<a href="http://machine-learning.hatenablog.com/entry/2016/03/26/211106">ややこしい離散分布に関するまとめ - 作って遊ぶ機械学習。</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> #02: \(y\) のパラメータと \(x\) との関係</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> \(y\) の分布のパラメータ \(m\) と \(x\) との関係を考える</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
\(y\) の確率分布 \(p(y)\) は, パラメータ \(m\), \(\sigma\) (正規分布の場合) の具体的な値が決まれば決るので, この具体的な値を求めることが目標になる.<br  />
\(y\) の分布を正規分布と想定することで, 求めるべきものは \(y\) そのものではなくパラメータ \(m\), \(\sigma\) になった.<br  />
</p>

<p>
ところで, 変数 \(y\) は 変数 \(x\) と関係している筈だからそれらの関係性を知りたい, というのが元の問いである.<br  />
上で, 考えるのは \(y\) そのものではなく分布のパラメータ \(m\), \(\sigma\) に移行しているので, \(m\), \(\sigma\) と \(x\) との関係性について考えることになる.<br  />
</p>

<p>
\(m\) は \(y\) の期待値という代表値の一つを表しており, これが \(x\) の値と関係するのでは, と考えるのはまぁ自然なことかなーと思うけどどうだろうか？<br  />
例えばこんな感じ.<br  />
</p>

<p>
例: \(y\) の代表値(期待値) \(m\) が \(x\) が大きくなるにつれて大きくなる(あるいは小さくなる)と考えた場合:<br  />
$$
      m = \alpha x + \beta
    $$<br  />
</p>

<p>
この場合, パラメータ \(m\) は データ(\(x\)) 毎に異なった値と仮定されて, そのパラメータは \(\alpha\), \(\beta\) となっている.<br  />
</p>

<p>
この段階で, 求めるべき変数は \(m\), \(\sigma\) から \(\alpha\), \(\beta\), \(\sigma\) の 3 つになった(増えちゃった..).<br  />
上の例のように, 普通は, \(y\) の代表値を示すようなパラメータと \(x\) との関係を考えることが多いようである.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> (参考) 分布のパラメータ値の制限と \(x\) との関係を形作る関数(リンク関数)</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
上の例では正規分布の平均値を表すパラメータ \(m\) と \(x\) が線形の関係であると仮定して,<br  />
$$
    m = \alpha x + \beta
    $$<br  />
とした.<br  />
\(m\) の値の範囲は \((-\infty,\infty)\) なので, 右辺をどんなふうに仮定しもとりあえず矛盾することはないかと思われる.<br  />
</p>

<p>
しかし, 正規分布以外の場合には, 推定するパラメータの値の制限によって, \(x\) との関係性(右辺)はある程度制限されることがある.<br  />
</p>

<p>
以下によく見る分布とパラメータの制限, 代表的な \(x\) との関係を表す関数についてまとめておく.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">分布</th>
<th scope="col" class="left">パラメータの制限</th>
<th scope="col" class="left">\(x\) との関係を表す関数</th>
<th scope="col" class="left">備考(glm)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">正規分布</td>
<td class="left">\(m=(-\infty,\infty)\), \(\sigma \geq 0\)</td>
<td class="left">平均値 \(m=ax+b\)</td>
<td class="left">identity</td>
</tr>

<tr>
<td class="left">ガンマ分布</td>
<td class="left">\(\alpha=(0,\infty)\), \(\beta =(0,\infty)\)</td>
<td class="left">平均値 \(\frac{\alpha}{\beta} =\exp(ax+b)\)</td>
<td class="left">log (注1)</td>
</tr>

<tr>
<td class="left">対数正規分布</td>
<td class="left">\(m=(-\infty,\infty)\), \(\sigma=(0,\infty)\)</td>
<td class="left">平均値 \(m=ax+b\) ?</td>
<td class="left">(注2)</td>
</tr>

<tr>
<td class="left">ベータ分布</td>
<td class="left">\(\alpha=(0,\infty)\), \(\beta =(0,\infty)\)</td>
<td class="left">平均値 \(\frac{\alpha}{\alpha+\beta}=\frac{1}{1+\exp(-(ax+b))}\) ?</td>
<td class="left">(注3)</td>
</tr>

<tr>
<td class="left">指数分布</td>
<td class="left">\(\beta=(0,\infty)\)</td>
<td class="left">平均値 \(\frac{1}{\beta}=\frac{1}{exp(ax+b)}\) ?</td>
<td class="left">(注3)</td>
</tr>

<tr>
<td class="left">多変量正規分布</td>
<td class="left">\(m_k=(-\infty,\infty)\)</td>
<td class="left">\(m_k = a_k x + b_k\) (平均値 \(\vec{m}\))</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">ディリクレ分布</td>
<td class="left">\(\alpha_k=(0,\infty)\)</td>
<td class="left">\(\alpha_k=\exp(a_k x + b_k)\) ? (平均値 \(\frac{\alpha_k}{\sum \alpha_k}\))</td>
<td class="left">(注3)</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">ベルヌーイ分布</td>
<td class="left">\(\theta=[0,1]\)</td>
<td class="left">確率 \(\theta=\frac{1}{1+\exp(-(ax+b))}\)</td>
<td class="left">logit</td>
</tr>

<tr>
<td class="left">二項分布</td>
<td class="left">\(\theta=[0,1]\)</td>
<td class="left">確率 \(\theta=\frac{1}{1+\exp(-(ax+b))}\)</td>
<td class="left">logit</td>
</tr>

<tr>
<td class="left">ポアソン分布</td>
<td class="left">\(\lambda=(0,\infty)\)</td>
<td class="left">平均値(分散) \(\lambda=\exp(ax+b)\)</td>
<td class="left">log (注4)</td>
</tr>

<tr>
<td class="left">カテゴリカル分布</td>
<td class="left">\(\theta_k=[0,1]\), \(\sum \theta_k =1\)</td>
<td class="left">確率 \(\theta_k = \frac{\exp(a_k x+b_k)}{\sum \exp(a_k x+b_k)}\)</td>
<td class="left">softmax</td>
</tr>

<tr>
<td class="left">多項分布</td>
<td class="left">\(\theta_k=[0,1]\), \(\sum \theta_k =1\)</td>
<td class="left">確率 \(\theta_k = \frac{\exp(a_k x+b_k)}{\sum \exp(a_k x+b_k)}\)</td>
<td class="left">softmax</td>
</tr>
</tbody>
</table>
<BR>

<p>
(注1):<br  />
ガンマ分布の場合, \(\alpha(shape)\) は一定値で, \(\beta(rate)\) が \(x\) と関係する, と考えることが多い?<br  />
glm の default の link 関数は inverse (<a href="http://www.statmethods.net/advstats/glm.html">http://www.statmethods.net/advstats/glm.html</a>)<br  />
(注2):<br  />
対数正規分布の場合, glm では, family=gaussian で link 関数を log にする(でいいのかな?).<br  />
<a href="http://qiita.com/gigamori/items/acf6b45b4a5cc2f604ce">http://qiita.com/gigamori/items/acf6b45b4a5cc2f604ce</a><br  />
(注3): よくわかんないので適当.<br  />
以下の URL も参照<br  />
<a href="http://tjo.hatenablog.com/entry/2013/09/23/232814">重回帰分析＆一般化線形モデル選択まわりの再まとめ 六本木で働くデータサイエンティストのブログ</a><br  />
<a href="https://www.slideshare.net/simizu706/stan-64926504">Stanコードの書き方　中級編:</a><br  />
(注4): \(\log(\lambda)=ax+b\)<br  />
</p>
<BR><BR>

<p>
パラメータ値の制限と使われる典型的な関数の関係<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">パタメータ制限</th>
<th scope="col" class="left">関数</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">\((-\infty,\infty)\)</td>
<td class="left">\(ax+b\)</td>
</tr>

<tr>
<td class="left">\((0,\infty)\)</td>
<td class="left">\(\exp(ax+b)\)</td>
</tr>

<tr>
<td class="left">\([0,1]\)</td>
<td class="left">\(\frac{1}{1+\exp(-(ax+b))}\)</td>
</tr>

<tr>
<td class="left">\(\sum = 1\)</td>
<td class="left">\(\frac{\exp(a_k x+b_k)}{\sum \exp(a_k x+b_k)}\)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> #03: 同時確率(密度) = 尤度計算</h3>
<div class="outline-text-3" id="text-2-3">
<p>
変数 \((x,y)\) の具体的なデータ \((X^{(i)},Y^{(i)})\) (\(i=1 .. N\). \(N\) はデータ数) から, これらのデータが得られる同時確率(密度)について考える.<br  />
</p>
</div>

<div id="outline-container-sec-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> データが得られる確率(密度)の計算</h4>
<div class="outline-text-4" id="text-2-3-1">
<p>
まずは 1 つ目のデータ \((X^{(1)}, Y^{(1)})\) が得られる確率(密度)は, \(p(y)\) が(今回の例では)以下のように書けると仮定してるので,<br  />
$$
    p(y) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp(-\frac{(y-m)^2}{2\sigma^2})
    $$<br  />
</p>

<p>
\(y\) に具体的な値  \(Y^{(1)}\) を代入して<br  />
$$
    p(y=Y^{(1)}) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp(-\frac{(Y^{(1)}-m)^2}{2\sigma^2})
    $$<br  />
一方 \(m\) については<br  />
$$
      m = \alpha x + \beta
    $$<br  />
と考えているので,<br  />
\(x\) に具体的な値 \(X^{(1)}\) を代入して,<br  />
$$
      m = \alpha X^{(1)} + \beta
    $$<br  />
となって, 結局<br  />
$$
    p(y=Y^{(1)}) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp(-\frac{(Y^{(1)}-\alpha X^{(1)} -\beta)^2}{2\sigma^2})
    $$<br  />
となった.<br  />
</p>

<p>
データ \(2, 3, \ldots N\) についても同様に計算できる.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> 尤度の計算</h4>
<div class="outline-text-4" id="text-2-3-2">
<p>
\(p(y=Y^{(1)})\) の式には, 未知な変数(パラメータ)として \(\alpha\), \(\beta\), \(\sigma\) がある.<br  />
\(Y^{(1)}\), \(X^{(1)}\) は具体的な値で, 例えば 3 とか 5 とかが入っている.<br  />
この式は, \(\alpha\), \(\beta\), \(\sigma\) の関数として見ることができる.<br  />
つかわれてる数(変数, データ)を明示的にするため以下のように書いておく.<br  />
</p>

<p>
$$
    l(\alpha,\beta,\sigma,  y=Y^{(1)}, x=X^{(1)}) = p(y=Y^{(1)})
    $$<br  />
\(y\) についてみるとこの値は確率(密度)である(\(y\) について積分すると 1 になる).<br  />
しかし \(\alpha\), \(\beta\), \(\sigma\) から見ると確率ではなく普通の関数である(規格化されてない)とみなせる.<br  />
\(\alpha\), \(\beta\), \(\sigma\) の関数としてみたとき, この値は「尤度(ゆうど)」と呼ばれている.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2-3-3" class="outline-4">
<h4 id="sec-2-3-3"><span class="section-number-4">2.3.3</span> 同時確率(密度)の計算</h4>
<div class="outline-text-4" id="text-2-3-3">
<p>
さて, \(p(y=Y^{(1)})\) は データ \(Y^{(1)}\) が得られる確率(密度)だが, データはさらに \(Y^{(2)}\), \ldots \(Y^{(N)}\) まで, 全部で \(N\) 個ある.<br  />
ここで, \(N\) 個のデータが得られる同時確率(密度)について考えてみる.<br  />
各々のデータ \(Y^{(i)}\) はそれぞれ独立(\(Y^{(1)}\) の値が \(Y^{(2)}\) の値の出方(確率)に影響しない) であると普通は考えられるので, 同時確率(密度) \(q\) は<br  />
$$
    q = \Pi_{i=1}^{N} p(y=Y^{(i)})
    $$<br  />
となる.<br  />
$$
    p(y=Y^{(i)}) = l(\alpha,\beta,\sigma,   y=Y^{(i)}, x=X^{(i)})
    $$<br  />
なので \(q\) は以下のように書ける.<br  />
$$
    q = \Pi_{i=1}^{N} l(\alpha,\beta,\sigma,  y=Y^{(i)}, x=X^{(i)})
    $$<br  />
使われてる数(パラメータ, データ)を明示して書くと以下のようになる.<br  />
$$
    q(\alpha,\beta,\sigma, Y^{(1)},X^{(1)},...,Y^{(N)},X^{(N)}) =  \Pi_{i=1}^{N} l(\alpha,\beta,\sigma,  Y^{(i)}, X^{(i)})
    $$<br  />
\(Y^{(1)}\), \(X^{(1)}\) &#x2026; には具体的な数値がはいっている.<br  />
</p>

<p>
\(q\) は掛け算の繰り返し(\(\Pi\))があって取扱いにくいので, 計算の際には普通は上式の対数をとったものが使われる.<br  />
対数をとると掛け算(\(\Pi\)) は足し算(\(\sum\)) になる.<br  />
\(L = \log q\) とかいて,<br  />
</p>

<p>
$$
    L(\alpha,\beta,\sigma,  Y^{(1)},X^{(1)},...,Y^{(N)},X^{(N)}) = \sum_{i=1}^{N} \log l(\alpha,\beta,\sigma,  Y^{(i)},X^{(i)})
    $$<br  />
これを「対数尤度」をいったりするらしい.<br  />
基本これを元に色々な計算を行っていく.<br  />
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> パラメータの推定</h2>
<div class="outline-text-2" id="text-3">
<p>
推定はたいていの場合, コンピュータがよしなにやってくれるが, 考え方位は知っておこうと思うので本を読んだ部分をまとめておく.<br  />
</p>
</div>
<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> 最尤推定</h3>
<div class="outline-text-3" id="text-3-1">
<p>
\(q\) (あるいは \(L\)) は \(\alpha\), \(\beta\), \(\sigma\) の関数であるが, データ \(X^{(i)}\), \(Y^{(i)}\) \((i=1..N)\) から見れば確率でもある.<br  />
データ \(X^{(i)}\), \(Y^{(i)}\) (\(i=1..N\)) が得られる同時確率 \(q\) が 最も大きくなる \(\alpha\), \(\beta\), \(\sigma\) が実現する値であると考えるのは自然かとおもわれる.<br  />
</p>

<p>
つまり求める \(\alpha\), \(\beta\), \(\sigma\) は, \(q\) を最大化する  \(\alpha\), \(\beta\), \(\sigma\) と考えていいかと思われる.<br  />
</p>

<p>
具体的に値を求めるには, \(\frac{\partial q}{\partial \alpha} = 0\) などを解けばよい.<br  />
極値の場所は log をとっても変わらないので, \(q\) の全体に log をとった \(L\) を使うことが多いようだ.<br  />
</p>

<p>
$$
   \frac{\partial L}{\partial \alpha} = 0
   $$<br  />
</p>

<p>
\(\beta\), \(\sigma\) についても同様の計算を行う.<br  />
実際には, 上式を数値的に解いてパタメータの値を求める.<br  />
コンピュータにやらせればよい部分である.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> ベイズ推定</h3>
<div class="outline-text-3" id="text-3-2">
</div><div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1"><span class="section-number-4">3.2.1</span> パラメータの「分布」の推定</h4>
<div class="outline-text-4" id="text-3-2-1">
<p>
ベイズ推定では, パラメータの「真の値」を推定するのではなくパラメータの「分布」(事後分布)を求める.<br  />
</p>

<p>
ベイズの公式:<br  />
$$
    P(A,B) = P(A|B)P(B) = P(B|A)P(A)
    $$<br  />
</p>

<p>
$$
    P(A|B) = \frac{P(B|A)P(A)}{P(B)}
    $$<br  />
</p>

<p>
\(A\) を パラメータ(\(\alpha\),\(\beta\),\(\sigma\)), \(B\) をデータ(\(X^{(i)}\),\(Y^{(i)}\) \(i=1..N\)) とすると,<br  />
\(P(B|A)\) (パラメータ \(A\) が与えられたもとでの データ \(B\) の確率)は以下の \(q\) に相当する.<br  />
$$
    q(\alpha,\beta,\sigma, Y^{(1)},X^{(1)},...,Y^{(N)},X^{(N)}) =  \Pi_{i=1}^{N} l(\alpha,\beta,\sigma, Y^{(i)}, X^{(i)})
    $$<br  />
これは \(y\) にとっては確率で, パラメータ(\(\alpha\),\(\beta\),\(\sigma\))にとっては尤度と呼ばれる値でもある.<br  />
</p>

<p>
\(P(A)\) は事前確率と呼ばれていて, パラメータに関するの事前知識に基づいた偏りを示す.<br  />
何も知識がなければ定数にしておく(ほんとは確率(密度)だから足して(積分して) 1 にならないといけないんだけど&#x2026;).<br  />
</p>

<p>
\(P(B)\) はデータが得られる確率で, \(A\) とは関係ない値.<br  />
今の状況ではデータ \(B\) は具体的な値なので, \(P(B)\) も何か具体的な値となる.<br  />
つまりこいつは 5 とか 8 とか 1000 とかの定数値となるはず.<br  />
</p>

<p>
まとめると,<br  />
$$
    (事後分布) = (尤度) * \frac{(事前分布)}{(定数)}
    $$<br  />
</p>

<p>
事前分布が定数であれば事後分布は尤度と同じ(定数分だけ異なる)で, 目的関数は最尤推定とほぼ同様になるが, 最尤推定は最大の尤度をもつパラメータ 1 つをゲットするのに対して,<br  />
ベイズ推定ではパラメータの「分布」を考えるところが違うのであった.<br  />
</p>

<p>
事後分布の推定は, この分布に従う多数の粒子を発生させる方法(MCMC)を用いて数値的に行う.<br  />
コンピュータがいい感じでやってくれると思う.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2"><span class="section-number-4">3.2.2</span> (参考) 正則化と事前分布</h4>
<div class="outline-text-4" id="text-3-2-2">
<p>
ここからは, 求めるパラメータ(上の例では \(\alpha\), \(\beta\), \(\sigma\)) を \(\theta\) という一つの文字で代表させる.<br  />
$$
    p(\theta|y) = \frac{p(y|\theta) p(\theta)}{p(y)}
    $$<br  />
</p>

<p>
\(p(\theta)\) を定数とすれば(= \(\theta\) に関して何の仮定もおかない),<br  />
$$
    \log p(\theta|y) = \log p(y|\theta) + const(\theta) - const(y)
    $$<br  />
なので,<br  />
</p>
\begin{align*}
\log p(\theta|y) &\propto& \log p(y|\theta)
\end{align*}
<p>
となる.<br  />
</p>

<p>
一方, \(p(\theta) \sim  normal(0,\tau)\) (正規分布) とすれば(= \(\theta\) の平均値は 0 っぽい, という仮定をおく. \(\tau\) が小さいほど \(\theta=0\) を確信してる, というイメージ),<br  />
</p>
\begin{align*}
p(\theta) &=& \frac{1}{\sqrt{2\pi\tau^2}} \exp(-\frac{(\theta-0)^2}{2\tau^2}) \\
\log p(\theta) &\sim& - \frac{\theta^2}{2 \tau^2} \equiv  - \gamma \theta^2
\end{align*}

<p>
よって,<br  />
</p>
\begin{align*}
\log p(\theta|y) &\propto& \log p(y|\theta) + \log p(\theta) \\
                 &\propto& \log p(y|\theta) - \gamma \theta^2
\end{align*}
<p>
となる.<br  />
ここで, \(\gamma\) は分散に関係するパラメータ(計算前に自分で適当に決める値. \(\gamma\sim\frac{1}{\tau^2})\) である.<br  />
</p>

<p>
右辺第二項が追加された状態での回帰はリッジ(Ridge)回帰あるいはチノコフの正則化と呼ばれている.<br  />
右辺第二項にパラメータの制限を加えることを正則化というらしいのだが, これはパラメータの事前分布を上のように設定してベイズ的に推定してるのと同じ.<br  />
</p>

<p>
事前分布にラプラス分布<br  />
$$
    p(y) = \frac{1}{2\sigma} \exp(-\frac{|y-m|}{\sigma})
    $$<br  />
を使ったものがラッソ(Lasso)回帰と言われるものである(見た感じラプラス分布だと思うんだけど要確認です).<br  />
</p>

<p>
このあたりの超わかりやすい説明は, プログラミングのための確率統計 8.1.回帰分析と多変量解析から p277 に書いてあった.<br  />
正則化の説明をどっかでみたときに, 後ろに勝手に適当な関数を追加したりして, そんなことやっていいの? とか思ったのだが, ここを読んでやっと意味がわかったような気がした.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3-2-3" class="outline-4">
<h4 id="sec-3-2-3"><span class="section-number-4">3.2.3</span> (参考) 階層ベイズ</h4>
<div class="outline-text-4" id="text-3-2-3">
<p>
パラメータ \(\alpha\) は, 最尤推定ではすべてのデータに共通した一つの値として求まる..<br  />
ベイズ推定ではすべてのデータに共通した一つの分布として求まる.<br  />
階層ベイズでは, パラメータ \(\alpha\) はデータあるいはグループ毎に異なる複数の分布からなると考える.<br  />
ここでは, \(\alpha\) はグループに関するデータ \(z\) に依存すると考え, \(y\) について考えたのと同様に以下の 3 点を考えてみる.<br  />
</p>
</div>

<ol class="org-ol"><li><a id="sec-3-2-3-1" name="sec-3-2-3-1"></a>#01 \(\alpha\) の(観測値 \(z\) を固定したときの)分布の形<br  /><div class="outline-text-5" id="text-3-2-3-1">
<p>
データあるいはグループ毎に異なるパラメータ \(\alpha\) は, ある一つの分布から生成された値.<br  />
この分布によって, 異なる \(\alpha\) にゆるい制限をかける.<br  />
</p>

<p>
例えば, \(\alpha\) は正規分布すると想定出来たとき:<br  />
$$
     \alpha \sim normal(m_a,\sigma_a)
     $$<br  />
</p>
</div>
</li>

<li><a id="sec-3-2-3-2" name="sec-3-2-3-2"></a>#02 \(\alpha\) のパラメータと \(z\) との関係<br  /><div class="outline-text-5" id="text-3-2-3-2">
<p>
例えば, 以下のような線形関係を想定できたとする:<br  />
$$
     m_a = \alpha_a z + \beta_a
     $$<br  />
</p>
</div>
</li>
<li><a id="sec-3-2-3-3" name="sec-3-2-3-3"></a>#03 同時確率(事後確率)<br  /><div class="outline-text-5" id="text-3-2-3-3">
<p>
データ数値をつかって同時確率を考える.<br  />
$$
     p(\alpha_a,\beta_a,\sigma_a,\beta,\sigma,\alpha_{z} |Y^{(i=1..N)})
     $$<br  />
の計算は省略.<br  />
</p>
</div>
</li></ol>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 例</h2>
<div class="outline-text-2" id="text-4">
<p>
#01, #02, #03 に沿って考えを進めていった例をしめす.<br  />
</p>
</div>
<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 線形回帰</h3>
<div class="outline-text-3" id="text-4-1">
</div><div id="outline-container-sec-4-1-1" class="outline-4">
<h4 id="sec-4-1-1"><span class="section-number-4">4.1.1</span> #01 \(y\) の分布の形</h4>
<div class="outline-text-4" id="text-4-1-1">
<p>
\(y\) は正規分布と仮定.<br  />
$$
    p(y) = \frac{1}{\sqrt{2\pi\sigma^2}} \exp(-\frac{(y-m)^2}{2\sigma^2})
    $$<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-1-2" class="outline-4">
<h4 id="sec-4-1-2"><span class="section-number-4">4.1.2</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-4-1-2">
<p>
\(y\) のパラメータ \(m\) (期待値)が, データ \(x\) と線形関係にあると仮定.<br  />
$$
    m = \alpha x + \beta
    $$<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-1-3" class="outline-4">
<h4 id="sec-4-1-3"><span class="section-number-4">4.1.3</span> #03 同時確率</h4>
<div class="outline-text-4" id="text-4-1-3">
<p>
データ \((X^{(i)},Y^{(i)})\) の確率は,<br  />
$$
    l(\alpha,\beta,\sigma,  Y^{(i)}, X^{(i)}) = p(Y^{(i)})
    $$<br  />
同時確率(尤度) \(q\) は<br  />
$$
    q(\alpha,\beta,\sigma) =  \Pi_{i=1}^{N} l(\alpha,\beta,\sigma,  Y^{(i)}, X^{(i)})
    $$<br  />
対数尤度 \(L\) は<br  />
$$
    L(\alpha,\beta,\sigma) = \sum_{i=1}^{N} \log l(\alpha,\beta,\sigma,  Y^{(i)},X^{(i)})
    $$<br  />
この部分の計算を行うと,<br  />
$$
      -\sum_{i=1}^{N} (Y^{(i)}- (\alpha X^{(i)} + \beta))^2
    $$<br  />
という形になる.<br  />
これは最小二乗法として知られている関数の形です.<br  />
つまり, 最小二乗法を使った直線の当てはめ = \(y\) に正規分布を仮定 してるのと同じ.<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> ロジスティック回帰</h3>
<div class="outline-text-3" id="text-4-2">
</div><div id="outline-container-sec-4-2-1" class="outline-4">
<h4 id="sec-4-2-1"><span class="section-number-4">4.2.1</span> #01 \(y\) の分布の形</h4>
<div class="outline-text-4" id="text-4-2-1">
<p>
\(y\) は 0 or 1 であり, ベルヌーイ分布を想定するのが自然だろう.<br  />
$$
    p(y) = t^y (1-t)^{(1-y)}
    $$<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-2-2" class="outline-4">
<h4 id="sec-4-2-2"><span class="section-number-4">4.2.2</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-4-2-2">
<p>
\(y\) のパラメータは \(t\) で, これは \(y=1\) である確率という意味を持つ.<br  />
確率なので, \(0 \leq t \leq 1\) です.<br  />
\(x\) は一般に \(-\infty < x < \infty\) なので, ロジスティック関数<br  />
$$
    f(x) = \frac{1}{1 + \exp(-x)}
    $$<br  />
を使って,<br  />
$$
    t = f(\alpha x + \beta)
    $$<br  />
とし, \(t\) を 0 から 1 の間に押し込めることにする.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-2-3" class="outline-4">
<h4 id="sec-4-2-3"><span class="section-number-4">4.2.3</span> #03 同時確率</h4>
<div class="outline-text-4" id="text-4-2-3">
<p>
データ \((X^{(i)},Y^{(i)})\) の確率は,<br  />
$$
    l(\alpha,\beta,  Y^{(i)}, X^{(i)}) = p(Y^{(i)})
    $$<br  />
同時確率(尤度) \(q\) は<br  />
$$
    q(\alpha,\beta) =  \Pi_{i=1}^{N} l(\alpha,\beta,  Y^{(i)}, X^{(i)})
    $$<br  />
対数尤度 \(L\) は<br  />
$$
    L(\alpha,\beta) = \sum_{i=1}^{N} \log l(\alpha,\beta,  Y^{(i)},X^{(i)})
    $$<br  />
この部分の計算はどんな感じかというと,<br  />
</p>
\begin{align*}
L &=& \sum_{i=1}^{N} [ t \log(Y^{(i)}) + (1-t) \log(1-Y^{(i)}) ]\\
  &=& \sum_{i=1}^{N} [ f(\alpha X^{(i)} + \beta) \log(Y^{(i)}) + (1-f(\alpha X^{(i)} + \beta)) \log(1-Y^{(i)}) ]
\end{align*}
<p>
\(- A \log B\) の和 = 交差エントロピー(cross entropy) と言う.<br  />
L の最大化 = 交差エントロピーの最小化.<br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> 多クラス分類</h3>
<div class="outline-text-3" id="text-4-3">
</div><div id="outline-container-sec-4-3-1" class="outline-4">
<h4 id="sec-4-3-1"><span class="section-number-4">4.3.1</span> #01 \(y\) の分布の形</h4>
<div class="outline-text-4" id="text-4-3-1">
<p>
1-of-K 表記法を利用する.<br  />
この記法では,<br  />
$$
    y = (y_1, y_2, .. y_k, .. y_K)
    $$<br  />
\(y_k\) は, クラス \(k\) であれば 1, それ以外は 0 である.<br  />
(\(y_k\) のうち一つだけが 1, それ以外は 0).<br  />
\(y\) について以下の式が成り立つ.<br  />
$$
    \sum_{i=1}^{K} y_k = 1
    $$<br  />
</p>

<p>
\(p(y)\) は以下のカテゴリカル分布と想定される.<br  />
$$
    p(y) = \Pi_{k=1}^{K} t_{k}^{y_k}
    $$<br  />
\(t_k\) はクラス \(k\) である確率を示す.<br  />
</p>

<p>
\(t\) について以下の式が成り立つ.<br  />
$$
    \sum_{i=1}^{K} t_{k} = 1
    $$<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4-3-2" class="outline-4">
<h4 id="sec-4-3-2"><span class="section-number-4">4.3.2</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-4-3-2">
<p>
\(t_k\) は確率なので \(0 \leq t_k \leq 1\) を満たし,<br  />
なおかつ<br  />
$$
    \sum_{i=1}^{K} t_{k} = 1
    $$<br  />
も満たさないといけない.<br  />
</p>

<p>
これを満たすものとして,<br  />
$$
    t_k = \frac{\exp(\alpha_k x + \beta_k)}{\sum_{k=1}^{K} \exp(\alpha_k x + \beta_k)}
    $$<br  />
例えばこんなのを考える事ができる.<br  />
ソフトマックス関数と呼ばれてるらしい.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4-3-3" class="outline-4">
<h4 id="sec-4-3-3"><span class="section-number-4">4.3.3</span> #03 同時確率</h4>
<div class="outline-text-4" id="text-4-3-3">
<p>
ロジスティック回帰とほぼおなじ.<br  />
対数尤度に 1 から \(K\) の和が加わる.<br  />
$$
    L(\alpha,\beta) = \sum_{k=1}^{K} \sum_{i=1}^{N} \log l(\alpha_k,\beta_k,  Y^{(i)},X^{(i)})
    $$<br  />
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> ニューラルネット</h2>
<div class="outline-text-2" id="text-5">
<p>
ニューラルネットでは, #02 の部分が微妙に変わってくる.<br  />
とは言っても, 求める関数のパラメータ(\(\alpha\),\(\beta\))がニューラルネットの重み \(w\) に変わるだけである.<br  />
ニューラルネットでは一般に入力が多次元なので, \(x =\vec{x}\) とする.<br  />
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> 線形回帰</h3>
<div class="outline-text-3" id="text-5-1">
</div><div id="outline-container-sec-5-1-1" class="outline-4">
<h4 id="sec-5-1-1"><span class="section-number-4">5.1.1</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-5-1-1">
<p>
重み \(w = \vec{w}\) とバイアス \(b\) をパラメータとして \(m = \vec{w} \vec{x} + b\)<br  />
とかる. 上の例と全く一緒である.<br  />
</p>
</div>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> ロジスティック回帰</h3>
<div class="outline-text-3" id="text-5-2">
</div><div id="outline-container-sec-5-2-1" class="outline-4">
<h4 id="sec-5-2-1"><span class="section-number-4">5.2.1</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-5-2-1">
\begin{align*}
\mu &=& \vec{w} \vec{x} + b \\
t   &=& \frac{1}{1 + \exp(-\mu)}
\end{align*}
</div>
</div>
</div>
<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> 多クラス分類</h3>
<div class="outline-text-3" id="text-5-3">
</div><div id="outline-container-sec-5-3-1" class="outline-4">
<h4 id="sec-5-3-1"><span class="section-number-4">5.3.1</span> #02 \(y\) のパラメータと \(x\) との関係</h4>
<div class="outline-text-4" id="text-5-3-1">
<p>
$$
    \vec{\mu} = \vec{w} \vec{x} + \vec{b}
    $$<br  />
\(\vec{\mu}\) は K 次元ベクトル.<br  />
\(\vec{w}\) は K 行 N 列の行列.<br  />
\(\vec{x}\) は N 次元ベクトル.<br  />
\(\vec{b}\) は K 次元ベクトル.<br  />
</p>

<p>
$$
    t_k = \frac{\exp(\mu_k)}{\sum_{k=1}^{K} \exp(\mu_k)}
    $$<br  />
</p>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thing-at-point を応用したファイルの検索]]></title>
    <link href="http://saito1369.github.io/blog/2017-06-01-134010.html"/>
    <updated>2017-06-01T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/134010</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. 解決策</a></li>
<li><a href="#sec-4">4. elisp プログラム</a></li>
<li><a href="#sec-5">5. 使い方例</a></li>
<li><a href="#sec-6">6. elisp 書き方めも</a></li>
<li><a href="#sec-7">7. 参照 URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2016-06-28 Tue 13:40&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-21 Wed 20:51&gt;</span></span><br  />
</p>
<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はここ 10 年ほど, 普段の業務日誌を ChangeLog メモで書いている.<br  />
シンプルな形式なので自分で色々加工が出来るし, 1 ファイルなので管理も楽で気にいっている.<br  />
一時期 org-mode でメモをとろうかなと思って色々やってみたこともあったが, 結局続かなかった.<br  />
自分にとって, やっぱり母艦となるメモは 1 つのファイルにしておくのが性にあってると思った.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
メモは 1 つのファイルが良いとは言え, 作業自身はいろんなところでやるわけで, その場所を忘れないように書いておくことがある.<br  />
あるいは「メモ」では書ききれない「文書」を org-mode 等で書いてその場所を書いておくこともある.<br  />
以下のような感じである.<br  />
</p>

<div class="org-src-container">
<label class="org-src-name">ある日の ChangeLog めも</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * 設定 elisp の変更 [elisp][setup]: find-file
   (file: ~/.emacs.d/inits/51-file.el)
   上記ファイルを変更して fugafuga 出来るようにした.

   * hogehoge 開発 [log]: 進捗確認
   (file: /work/foo/bar/hogehoge.py)

   * ○○の改善案 [foo][log]: 文書下書きの作成
   (file: /work/doc/2016/foo.org)
   あす 4 章目の修正を行う.
   文字数のチェック.
</pre>
</div>

<p>
作成したファイルのある場所を書いておくことで, 作業場所を確認すると共に必要なファイルをさっさと取り出すことが出来る.<br  />
ここから M-x find-file-at-point で直接ファイルが開ける.<br  />
</p>

<p>
例えば hogehoge.pl というプログラムを書いたらその場所をメモしておく.<br  />
</p>
<label class="org-src-name">ファイルのありかを確認する筆者</label><pre class="example">
$: pwd
   /work/theme/
$: ls
   hogehoge.pl
</pre>

<div class="org-src-container">
<label class="org-src-name">hogehoge.pl の場所を ChangeLog に抜かりなくメモる筆者</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * theme 開発 [log]: 一応完成
   (file: /work/theme/hogehoge.pl)
</pre>
</div>

<p>
しかし私の場合, ファイルのパスは結構変わることも多いのだ.<br  />
例えば, 最初は場所として /work/theme で問題なかったものの,<br  />
後日 version2 のデータがやってきたので<br  />
最初のやつは version1 以下に置いておきたい, ということがあったり.<br  />
</p>

<p>
version1 のデータ用プログラム hogehoge.pl は version1 という directory を作ってそこに入れとこう.<br  />
</p>
<label class="org-src-name">version01 ディレクトリを作ってそこにプログラムを移動する筆者</label><pre class="example">
$: pwd
   /work/theme/
$: mkdir version01
$: mv hogehoge.pl version01/
</pre>

<p>
パスが変わってしまうと, ChangeLog との整合性が保てなくなってしまう！！<br  />
directory の構成を変える度に一々 ChangeLog の該当部分を探して修正をするのはめんどくさすぎるし.<br  />
</p>
<div class="org-src-container">
<label class="org-src-name">ファイルのあるパスが変わってしまい整合性がとれなくなってしまったメモファイル</label>
<pre class="src src-mac">2016-06-28 (Tue)  Taro YAMADA  &lt;taro@example.jp&gt;

   * theme 開発 [log]: 一応完成
   (file: /work/theme/hogehoge.pl)
</pre>
</div>

<p>
どーしたらいいんだろう&#x2026;<br  />
と思って色々探してみましたが問題を解決してくれそーなプログラムは落ちてないようだった.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 解決策</h2>
<div class="outline-text-2" id="text-3">
<p>
ファイルを移動したらそれに連動して ChangeLog のリンクの内容を変える.<br  />
そんな魔法のようなことが出来れば超ナイスなのだが,<br  />
やっぱ無理っぽいんじゃないかなぁと思ったので,<br  />
以下のように動くプログラムを作ることでお茶を濁すことにする.<br  />
</p>

<ol class="org-ol">
<li>ChangeLog のリンク部分からパスを抽出し, その存在をチェックする.<br  />
</li>
<li>抽出したパスにファイルが存在すればファイルの存在を示して終了する.<br  />
</li>
<li>無ければその近辺のディレクトリを探して同名のファイルがあるかどうか検索.<br  />
</li>
<li>同名のファイルがあればそのパスに ChangeLog を書き換える.<br  />
</li>
</ol>
<p>
注: ChangeLog めも上じゃなくても使えるようにしたい.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> elisp プログラム</h2>
<div class="outline-text-2" id="text-4">
<p>
ChangeLog 上に書いてあるファイルが無ければその近辺の dir を探して,<br  />
同名のファイルを探してくれる elisp プログラムを色々調べながらつくってみた.<br  />
以下の 3 つの関数を導入する.<br  />
ChangeLog 上じゃなくても動くかと思う.<br  />
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span>(ffap-bindings)
<span class="linenr"> 2: </span><span style="color: #cd853f;">; </span><span style="color: #cd853f;">main function</span>
<span class="linenr"> 3: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">search-file-at-point-with-dir-search</span>()
<span class="linenr"> 4: </span>  (<span style="color: #20b2aa; font-weight: bold;">interactive</span>)
<span class="linenr"> 5: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
<span class="linenr"> 6: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#19978;&#12398;&#12501;&#12449;&#12452;&#12523;&#21517;&#12425;&#12375;&#12365;&#25991;&#23383;&#21015;&#12434;&#12392;&#12427;</span>
<span class="linenr"> 7: </span>         (my-path  (thing-at-point 'filename))           <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname with dir</span>
<span class="linenr"> 8: </span>         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(&#26368;&#21021;&#12398;&#20301;&#32622;, &#26368;&#24460;&#12398;&#20301;&#32622;)&#12434;&#12522;&#12473;&#12488;&#12391;&#21462;&#24471;</span>
<span class="linenr"> 9: </span>         (bounds   (bounds-of-thing-at-point 'filename))
<span class="linenr">10: </span>         (my-dir   nil)
<span class="linenr">11: </span>         (my-pdir  nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; directory</span>
<span class="linenr">12: </span>         (my-fname nil)
<span class="linenr">13: </span>         (stt      nil)
<span class="linenr">14: </span>         (end      nil)
<span class="linenr">15: </span>         )
<span class="linenr">16: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> stt      (car bounds))
<span class="linenr">17: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> end      (cdr bounds))
<span class="linenr">18: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-dir   (file-name-directory    my-path)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dir name</span>
<span class="linenr">19: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-fname (file-name-nondirectory my-path)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">file name</span>
<span class="linenr">20: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "my-path =%s" my-path))</span>
<span class="linenr">21: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; dir &#12391;&#12418;&#26908;&#32034;(dir &#12364;&#20108;&#12388;&#12378;&#12428;&#12390;&#12427;&#12392;&#12365;&#12418;&#23550;&#20966;&#12377;&#12427;&#12424;&#12358;&#12395;</span>
<span class="linenr">22: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> my-pdir  (file-name-directory    (directory-file-name my-dir)))
<span class="linenr">23: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "my-path =%s" my-path))</span>
<span class="linenr">24: </span>    (<span style="color: #20b2aa; font-weight: bold;">cond</span>
<span class="linenr">25: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12390;&#12428;&#12400;&#38283;&#12367;</span>
<span class="linenr">26: </span>     <span style="color: #cd853f;">;</span><span style="color: #cd853f;">((file-exists-p    my-path) (find-file my-path))</span>
<span class="linenr">27: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12420;&#12387;&#12401;&#38283;&#12367;&#12398;&#12399;&#12420;&#12417;&#12390;&#23384;&#22312;&#12434;&#20027;&#24373;&#12375;&#12390;&#32066;&#20102;</span>
<span class="linenr">28: </span>     ((file-exists-p    my-path) (message <span style="color: #ffa07a;">"file %s exists"</span> my-path))
<span class="linenr">29: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#12364;&#23384;&#22312;&#12375;&#12390;&#12394;&#12367;&#12390; dir &#12364;&#12354;&#12428;&#12400;&#26908;&#32034;</span>
<span class="linenr">30: </span>     ((file-directory-p my-dir)  (my-search-path-file my-dir  my-fname stt end))
<span class="linenr">31: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">my-dir &#12364;&#23384;&#22312;&#12375;&#12390;&#12394;&#12367;&#12390;&#12418;&#12418;&#12358;&#23569;&#12375;&#38929;&#24373;&#12427;. &#35242; dir &#12364;&#12354;&#12428;&#12400;&#26908;&#32034;&#12434;&#12377;&#12427;.</span>
<span class="linenr">32: </span>     ((file-directory-p my-pdir) (my-search-path-file my-pdir my-fname stt end))
<span class="linenr">33: </span>     <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35242; dir &#12418;&#23384;&#22312;&#12375;&#12390;&#12394;&#12369;&#12428;&#12400;&#35558;&#12417;&#12390;&#35430;&#21512;&#32066;&#20102;</span>
<span class="linenr">34: </span>     (t (message <span style="color: #ffa07a;">"dir %s is not found"</span> my-dir))
<span class="linenr">35: </span>     )
<span class="linenr">36: </span>    )
<span class="linenr">37: </span>  )
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">my-search-path-file</span>(my-dir my-fname stt end)
<span class="linenr"> 2: </span>  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((files    nil)
<span class="linenr"> 3: </span>        (fpath    nil)
<span class="linenr"> 4: </span>        (maxdepth nil)
<span class="linenr"> 5: </span>        (home-dir (substitute-in-file-name <span style="color: #ffa07a;">"$HOME"</span>)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">see clmemo.el</span>
<span class="linenr"> 6: </span>        )
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#35519;&#26619;&#12377;&#12427; dir &#12398;&#28145;&#12373;&#12434; minifuffer &#12363;&#12425;&#20837;&#12428;&#12383;&#12369;&#12428;&#12400;</span>
<span class="linenr"> 8: </span>    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq maxdepth (string-to-number (read-string "depth:" "3" nil "3")))</span>
<span class="linenr"> 9: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> maxdepth 3)
<span class="linenr">10: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26465;&#20214;&#12395;&#12354;&#12358;&#12501;&#12449;&#12452;&#12523;&#12434;&#12522;&#12473;&#12488;&#12391;&#21462;&#12426;&#20986;&#12377;</span>
<span class="linenr">11: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> files    (directory-files-recursive my-dir my-fname maxdepth nil))
<span class="linenr">12: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26368;&#21021;&#12398;&#12501;&#12449;&#12452;&#12523;&#12434;&#21462;&#12426;&#20986;&#12375;&#12390;, $HOME -&gt; "~" &#12395;&#22793;&#26356;</span>
<span class="linenr">13: </span>    (<span style="color: #20b2aa; font-weight: bold;">setq</span> fpath    (replace-regexp-in-string home-dir <span style="color: #ffa07a;">"~"</span> (car files)))
<span class="linenr">14: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26360;&#12365;&#30452;&#12375;</span>
<span class="linenr">15: </span>    (<span style="color: #20b2aa; font-weight: bold;">save-excursion</span>
<span class="linenr">16: </span>      (delete-region stt end)
<span class="linenr">17: </span>      (goto-char stt)
<span class="linenr">18: </span>      (insert fpath)
<span class="linenr">19: </span>      )
<span class="linenr">20: </span>    )
<span class="linenr">21: </span>  )
</pre>
</div>

<p>
directory-files-recursive は以下の URL から拾ってきた.<br  />
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span class="linenr"> 1: </span><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">Recursively listing directories in elisp - turingMachine</span>
<span class="linenr"> 2: </span><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html</span>
<span class="linenr"> 3: </span>(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">directory-files-recursive</span>(directory match maxdepth ignore)
<span class="linenr"> 4: </span>  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((files-list '())
<span class="linenr"> 5: </span>         (current-directory-list (directory-files directory t))
<span class="linenr"> 6: </span>         )
<span class="linenr"> 7: </span>    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">while we are in the current directory</span>
<span class="linenr"> 8: </span>    (<span style="color: #20b2aa; font-weight: bold;">while</span> current-directory-list
<span class="linenr"> 9: </span>      (<span style="color: #20b2aa; font-weight: bold;">let</span> ((f (car current-directory-list)))
<span class="linenr">10: </span>        (<span style="color: #20b2aa; font-weight: bold;">cond</span>
<span class="linenr">11: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">12: </span>           ignore <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">make sure it is not nil</span>
<span class="linenr">13: </span>           (string-match ignore f))
<span class="linenr">14: </span>           <span style="color: #cd853f;">; </span><span style="color: #cd853f;">ignore</span>
<span class="linenr">15: </span>          nil
<span class="linenr">16: </span>          )
<span class="linenr">17: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">18: </span>           (file-regular-p f)
<span class="linenr">19: </span>           (file-readable-p f)
<span class="linenr">20: </span>           (string-match match f))
<span class="linenr">21: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> files-list (cons f files-list))
<span class="linenr">22: </span>          )
<span class="linenr">23: </span>         ((<span style="color: #20b2aa; font-weight: bold;">and</span>
<span class="linenr">24: </span>           (file-directory-p f)
<span class="linenr">25: </span>           (file-readable-p f)
<span class="linenr">26: </span>           (not (string-equal <span style="color: #ffa07a;">".."</span> (substring f -2)))
<span class="linenr">27: </span>           (not (string-equal <span style="color: #ffa07a;">"."</span> (substring f -1)))
<span class="linenr">28: </span>           (&gt; maxdepth 0))
<span class="linenr">29: </span>          <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">recurse only if necessary</span>
<span class="linenr">30: </span>          (<span style="color: #20b2aa; font-weight: bold;">setq</span> files-list (append files-list (directory-files-recursive f match (- maxdepth -1) ignore)))
<span class="linenr">31: </span>          <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(setq files-list (cons f files-list))</span>
<span class="linenr">32: </span>          )
<span class="linenr">33: </span>         (t)
<span class="linenr">34: </span>         )
<span class="linenr">35: </span>        )
<span class="linenr">36: </span>      (<span style="color: #20b2aa; font-weight: bold;">setq</span> current-directory-list (cdr current-directory-list))
<span class="linenr">37: </span>      )
<span class="linenr">38: </span>    files-list
<span class="linenr">39: </span>    )
<span class="linenr">40: </span>  )
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 使い方例</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">
<label class="org-src-name">ChangeLog メモに書いてある file のありか(既にここにはないんだけど)</label>
<pre class="src src-mac">(file: /work/theme/hogehoge.pl)
</pre>
</div>
<p>
パス名がある場所にカーソルがある状態で M-x search-file-at-point-with-dir-search<br  />
もしファイルがあれば "/work/theme/hogehoge.el exists." というメッセージを書いて終わる.<br  />
無ければ周辺の dir を探して hogehoge.pl が存在すれば<br  />
</p>
<div class="org-src-container">
<label class="org-src-name">修正後</label>
<pre class="src src-mac">(file: /work/theme/version1/hogehoge.pl)
</pre>
</div>
<p>
のようにメモを書き換えてくれます.<br  />
探しても無ければ "not found" と書いて何もしません(のでその場合は手動で何とかするしかない&#x2026;).<br  />
</p>

<p>
注意点: dir を探して最初に見つかった hogehoge.pl の場所を返す仕様になっている.<br  />
/work/theme/version0/hogehoge.pl とか /work/theme/version1/hogehoge.pl とかがある場合は, 実際には一意に特定出来ていない.<br  />
先に見つかった方を書き出す.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> elisp 書き方めも</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">
<label class="org-src-name">親 dir を取得</label>
<pre class="src src-emacs-lisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> pdir (file-name-directory (directory-file-name dir)))
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">dir                   = /foo/bar/hoge/</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/hoge         = (directory-file-name dir)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/             = (file-name-directory "/foo/bar/hoge")</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">minibuffer から入れた文字列を数値へ変更する</label>
<pre class="src src-emacs-lisp">(<span style="color: #20b2aa; font-weight: bold;">setq</span> hoge (read-string <span style="color: #ffa07a;">"prompt:"</span> default&#20516; nil &#20309;&#12418;&#20837;&#12428;&#12394;&#12363;&#12383;&#12392;&#12365;&#12398;&#20516;))
(<span style="color: #20b2aa; font-weight: bold;">setq</span> num  (string-to-number hoge)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25968;&#20516;&#12395;&#12377;&#12427;</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">カーソルにある文字列を取得</label>
<pre class="src src-emacs-lisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(file: /work/theme/hogehoge.pl)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">'filename &#12395;&#12377;&#12427;&#12392;, &#26368;&#24460;&#12398; ")" &#12399;&#12392;&#12387;&#12390;&#12356;&#12356;&#24863;&#12376;&#12391;&#12501;&#12449;&#12452;&#12523;&#21517;&#12434;&#21462;&#12426;&#20986;&#12379;&#12427;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span>    st  (thing-at-point           'filename))
(<span style="color: #20b2aa; font-weight: bold;">setq</span> bounds (bounds-of-thing-at-point 'filename))
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">ffap-file-at-point で文字列を取得する際には, ファイルの存在を確認している.</label>
<pre class="src src-emacs-lisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#12459;&#12540;&#12477;&#12523;&#12399; /foo/bar/hoge/file.pptm &#12398;&#19978;&#12395;&#12354;&#12387;&#12390;,</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">/foo/bar/hoge &#20197;&#19979;&#12395;&#12399;&#23455;&#38555;&#12399; file.pptm &#12392;&#12356;&#12358;&#12501;&#12449;&#12452;&#12523;&#12364;&#28961;&#12356;&#22580;&#21512;&#12395;&#12399;</span>
(<span style="color: #20b2aa; font-weight: bold;">setq</span> fname (ffap-file-at-point))
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">fname="/foo/bar/hoge/" &#12392;&#12394;&#12427;.</span>
</pre>
</div>

<div class="org-src-container">
<label class="org-src-name">リスト dir-list を書き出したいときは, そのまま書き出せばよい.</label>
<pre class="src src-emacs-lisp">(message <span style="color: #ffa07a;">"%s"</span> dir-list)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 参照 URL</h2>
<div class="outline-text-2" id="text-7">
<p>
ChangeLog memo<br  />
<a href="http://0xcc.net/unimag/1/">横着プログラミング 第1回: Unixのメモ技術</a><br  />
<a href="http://masui.org.s3.amazonaws.com/6/4/64dbe7ef223e73dc9eec1805dd514353.pdf">ChangeLogメモによる自分データベースの構築</a><br  />
clmemo<br  />
<a href="https://at-aka.blogspot.jp/p/change-log.html">clmemo@aka: Change Log メモを試してみよう</a><br  />
chalow<br  />
<a href="http://chalow.org/">chalow - CHAngeLog On the Web</a><br  />
<a href="http://chalow.net/">たつをの ChangeLog</a><br  />
quasi-howm<br  />
<a href="https://at-aka.blogspot.jp/2005/06/changelog-howm-quasi-howm.html">clmemo@aka: ChangeLog メモで Howm を使う quasi-howm |ChangeLogメモ|Howm|Emacs|</a><br  />
私は大きなメモは quasi-howm を利用して書いてます<br  />
(howm の中で org-mode 形式でかいています. howm の機能はほとんど使ってません).<br  />
</p>

<p>
emacs-lisp 関連<br  />
ディレクトリ上位方向へ進む際のイディオム - syohex’s diary<br  />
(url: <a href="http://syohex.hatenablog.com/entry/20121008/1349681293">http://syohex.hatenablog.com/entry/20121008/1349681293</a>)<br  />
GNU Emacs Lispリファレンスマニュアル: String Conversion<br  />
(url: <a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_76.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_76.html</a>)<br  />
GNU Emacs Lispリファレンス・マニュアル: 27. 位置<br  />
(url: <a href="http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_29.html">http://www.fan.gr.jp/~ring/doc/elisp_19/elisp-jp_29.html</a>)<br  />
GNU Emacs Lisp Reference Manual - ファイルに関する情報<br  />
(url: <a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html</a>)<br  />
再帰的に file を探す elisp プログラム<br  />
Recursively listing directories in elisp - turingMachine<br  />
(url: <a href="http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html">http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html</a>)<br  />
cond の使い方<br  />
GNU Emacs Lispリファレンスマニュアル: 9. 制御構造<br  />
(url: <a href="http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_10.html">http://www.fan.gr.jp/~ring/doc/elisp_20/elisp_10.html</a>)<br  />
その他参考 URL:<br  />
Emacs Lisp デバッグ — ありえるえりあ<br  />
(url: <a href="http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/">http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/</a>)<br  />
カーソル位置の情報で遊ぼう。 - 日々、とんは語る。<br  />
(url: <a href="http://d.hatena.ne.jp/tomoya/20101213/1292166026">http://d.hatena.ne.jp/tomoya/20101213/1292166026</a>)<br  />
[Home] Thing At Point<br  />
(url: <a href="https://www.emacswiki.org/emacs/ThingAtPoint">https://www.emacswiki.org/emacs/ThingAtPoint</a>)<br  />
GNU Emacs Lisp Reference Manual - ファイルに関する情報<br  />
(url: <a href="http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html">http://flex.phys.tohoku.ac.jp/texi/eljman/eljman_154.html</a>)<br  />
GNU Emacs Lispリファレンスマニュアル: ファイル<br  />
(url: <a href="http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html#SEC385">http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_25.html#SEC385</a>)<br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[diary-float による org-mode の日付作成]]></title>
    <link href="http://saito1369.github.io/blog/2017-05-18-diary_float.html"/>
    <updated>2017-05-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/diary_float</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. 問題点</a></li>
<li><a href="#sec-3">3. 解決策</a></li>
<li><a href="#sec-4">4. 結果</a>
<ul>
<li><a href="#sec-4-1">4.1. 毎月月末の特定曜日を指定</a></li>
<li><a href="#sec-4-2">4.2. 毎週特定曜日(複数)を指定</a></li>
<li><a href="#sec-4-3">4.3. 毎週特定曜日にやることがある(始まり, 終わりなどその他複雑な条件あり)</a></li>
<li><a href="#sec-4-4">4.4. その他いくつか作ったプログラム</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 感想</a></li>
<li><a href="#sec-6">6. 参考 URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2015-05-24 Sun 16:31&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 19:38&gt;</span></span><br  />
</p>

<p>
概要:<br  />
emacs/org-mode での予定の作成方法について,<br  />
特に繰り返して起こるタスクや予定のスケジュール(日時)作成についてのはなし.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私はエディタとして emacs を使っており, 予定やタスクを org-mode のファイルで管理している.<br  />
日時が定まっている予定は<br  />
</p>
<pre class="example">
SCHEDULED: &lt;2015-05-24 Sun 19:00&gt;
</pre>

<p>
のような感じで書いておけばよい.<br  />
しかし, 一回やればそれで終わりではないことや,<br  />
定期的に繰り返して起こるような予定やタスクに関して,<br  />
日付をどのように書けばいいのかよくわからなかったのでしらべてみた.<br  />
</p>

<p>
org-mode の version は 8.2.10, emacs の version は 24.5.4 です.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 問題点</h2>
<div class="outline-text-2" id="text-2">
<p>
週単位で動いたり月単位で動くような仕事をしている場合,<br  />
それらを周期とした少し複雑な予定を書く必要に迫られることがあったりする.<br  />
例えば,<br  />
</p>
<ul class="org-ul">
<li>毎月月末の木曜日には定例会議がある.<br  />
</li>
<li>毎週月, 水, 金にやることがある.<br  />
</li>
<li>4/11  から 15 週に渡って毎週水曜日にやることがあるが,<br  />
3 週目と 4 週目はやらない.<br  />
その代わり 7/3 と 7/4 にちにその代わりをやる.<br  />
</li>
</ul>
<p>
とか.<br  />
私の場合, 週及び月単位, 四半期単位での繰り返しがあり,<br  />
上のような結構めんどくさい条件もあったりすることがわかった.<br  />
最初は手で予定を書き換えてたのだが, 一応ルールがあるのに手で修正するのはめんどくさいし, 何とか自動で出来ないかなぁと思っていた.<br  />
いくつか調べたが, こういうのはもしかして org-mode のカレンダー日付で書くやりかたではちょっと表現しにくい, というか出来ないんじゃないかなーと思ったのであった.<br  />
例えば<br  />
</p>
<pre class="example">
&lt;2015-05-24 Sun +1w&gt;
</pre>
<p>
とかは +1w で毎週を示せますが週一回やることしか表現できないし,<br  />
月末の最後の金曜日のつもりで<br  />
</p>
<pre class="example">
&lt;2015-05-29 Fri +1m&gt;
</pre>
<p>
のように書いても, これが終わった後の次の月の予定は<br  />
</p>
<pre class="example">
&lt;2015-06-29 Mon +1m&gt;
</pre>
<p>
に書き換えられてしまいます.<br  />
+1m はひと月後という意味なので間違ってはないんだけど&#x2026;<br  />
曜日を揃えるにはどーすればいいんだろう.<br  />
こっちの方が何かと使うと思うんだけど. 外人は毎月末の金曜日に会議, とかいう予定は無いんかなぁ.<br  />
それとも自分が知らない何かワザがあるんだろうか&#x2026;<br  />
この辺何とかならないかなぁというのがここでの問題点である.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 解決策</h2>
<div class="outline-text-2" id="text-3">
<p>
色々調べたけど日付の後ろに +1w とかで修飾していくようなやり方では出来ないみたい？<br  />
探してたら出てきたのが diary-float (diary-lib.el) というやつである.<br  />
</p>

<p>
以下のようにかく. diary パッケージの S 式というらしい.<br  />
</p>
<pre class="example">
&lt;%%(diary-float t 4 2)&gt;
</pre>
<p>
何これ.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 結果</h2>
<div class="outline-text-2" id="text-4">
<p>
調べてみた結果を以下にまとめた.<br  />
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> 毎月月末の特定曜日を指定</h3>
<div class="outline-text-3" id="text-4-1">
<p>
毎月第二木曜日 の場合は以下のように書く.<br  />
</p>
<pre class="example">
&lt;%%(diary-float t 4 2)&gt;
</pre>
<p>
パラメータの意味は<br  />
毎月:   t<br  />
木曜日: 4 (0:日 1:月 2:火 3:水 4:木 5:金 6:土)<br  />
第二:   2<br  />
</p>

<p>
10 月の第二木曜日は,<br  />
</p>
<pre class="example">
&lt;%%(diary-float 10 4 2)&gt;
</pre>

<p>
10,11,12 月の第二木曜日は<br  />
</p>
<pre class="example">
&lt;%%(diary-float '(10 11 12) 4 2)&gt;
</pre>

<p>
更にしらべたら, 毎月月末の週の木曜日の会議は以下のように書けることが判明した.<br  />
-1 で月末になるっぽい. ナイスな感じ.<br  />
</p>
<pre class="example">
&lt;%%(diary-float t 4 -1)&gt;
</pre>
<p>
何と, 結構わかりやすいかも.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> 毎週特定曜日(複数)を指定</h3>
<div class="outline-text-3" id="text-4-2">
<pre class="example">
&lt;%%(memq (calendar-day-of-week date) '(1 3 5))&gt;
</pre>
<p>
date というのは何なのか&#x2026;<br  />
書かせてみたりして調べてみると,<br  />
どうやらこの行を評価した日付が '(12 13 2015) みたいな形式で date の中に入るっぽい.<br  />
</p>

<p>
ちなみに date の書かせ方は<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(y-or-n-p (message <span style="color: #ffa07a;">"date=%s"</span> date))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> 毎週特定曜日にやることがある(始まり, 終わりなどその他複雑な条件あり)</h3>
<div class="outline-text-3" id="text-4-3">
<p>
<a href="http://orgmode.org/worg/org-faq.html#Appointments/Diary">http://orgmode.org/worg/org-faq.html#Appointments/Diary</a><br  />
に例となる関数(diary-limited-cyclic)があったので,<br  />
これを参考に見よう見まねで自分でも作ってみよう！！<br  />
</p>

<p>
要は今日(date)が条件を満たしてれば t を返し, 満たしてなければ nil を返す,<br  />
そんなプログラムを作ればいいんじゃないでしょうか.<br  />
私は断固そー思うわけです.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture</span>(stt ival recc <span style="color: #9370db;">&amp;optional</span> exs <span style="color: #9370db;">&amp;rest</span> sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (sttd  (calendar-absolute-from-gregorian stt ))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (today (calendar-absolute-from-gregorian date))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26085;&#20184;</span>
         (diffd (- today sttd)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12392;&#20170;&#26085;&#12398;&#24046;&#20998;. stt &#12424;&#12426;&#20170;&#26085;&#12398;&#26041;&#12364;&#24460;&#12391;&#12354;&#12428;&#12400; &gt;0</span>
         (nths   nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12399;&#20309;&#21608;&#30446;&#12363;&#12434;&#24471;&#12427;</span>
         (jst    nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">diary-limited-cyclic &#12434;&#21442;&#29031;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffd))
             (zerop (% diffd ival))
             (&lt; (floor diffd ival) recc))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> nths (+ (/ diffd ival) 1)))

    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19978;&#12398;&#26465;&#20214;&#12434;&#28288;&#12383;&#12375;&#12390;&#12356;&#12428;&#12400; nths &#12395;&#20309;&#12363;&#20516;&#12364;&#20837;&#12387;&#12390;&#12427;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> nths
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-exception nths exs))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbs))
      )
    jst))

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20363;&#22806;&#36913;(exs) &#12391;&#12354;&#12428;&#12400; nil &#12434;&#36820;&#12377;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture-exception</span>(nths exs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((jst t)
        (ex  nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> exs
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> ex (car exs))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= nths ex) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst nil))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> exs (cdr exs)))
    jst))

<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20195;&#12431;&#12426;&#12398;&#26085;&#20184;&#12391;&#12354;&#12428;&#12400; t &#12434;&#36820;&#12377;</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture-substitution</span>(today sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((jst nil)
        (sb  nil)
        (sbg nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> sbs
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sb (car sbs))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sbg (calendar-absolute-from-gregorian sb))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= today sbg) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> sbs (cdr sbs)))
    jst))
</pre>
</div>

<pre class="example">
(diary-lecture stt ival recc &amp;optional exs &amp;rest sbs)
</pre>
<p>
引数の意味は以下です:<br  />
</p>
<ul class="org-ul">
<li>stt:  始まりの日    '(4 11 2017)<br  />
</li>
<li>ival: 何日おき      7<br  />
</li>
<li>recc: 繰り返し回数  16<br  />
</li>
<li>exs:  除外週        '(3 4 6)<br  />
</li>
<li>sbs:  代わりの日付(配列) '(5 11 2017) '(3 11 2017)<br  />
</li>
</ul>

<p>
&amp;optional 以降の引数(exs, sbs) は無くてもいい<br  />
&amp;rest 右隣の引数(sbs) は, これ以降の変数のリストは全て sbs に入るという意味<br  />
</p>

<p>
例:<br  />
2017/04/14 から毎週, 17 回やる. 4 回目と 10 回目は休み. その代わり 2018/08/08 2018/08/09にやる<br  />
</p>
<pre class="example">
SCHEDULED: &lt;%%(diary-lecture '(4 14 2017) 7 17 '(4 10) '(8 8 2018) '(8 9 2018))&gt;
</pre>

<p>
追記:<br  />
diary-lecture を半年程使ってましたが, 繰り返し回数, 除外週のような, 始まりの週を 1 週目として何周目をというのを数えるのは超めんどくさいことが判明した.<br  />
いちいちカレンダーを見て指折り数えないといけない. やってられないので diary-lecture2 を作った.<br  />
</p>
<div class="org-src-container">

<pre class="src src-elisp"><span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#32368;&#12426;&#36820;&#12375;&#22238;&#25968;&#12399;&#20351;&#12356;&#12395;&#12367;&#12356;&#12398;&#12391;&#26085;&#20184;&#12391;&#25351;&#23450;&#12377;&#12427;</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt:    &#22987;&#12414;&#12426;&#12398;&#26085; '(4 11 2018)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">ival:   &#20309;&#26085;&#12362;&#12365;   7</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">end:    &#32066;&#20102;&#26085;     '(8 10 2018)</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">exdays: &#38500;&#22806;&#26085;     '((5 11 2018) (3 11 2018))</span>
<span style="color: #cd853f;">;; </span><span style="color: #cd853f;">sbdays: &#20195;&#12431;&#12426;&#26085;   '((5 12 2018) (3 12 2018))</span>
(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-lecture2</span>(stt ival end <span style="color: #9370db;">&amp;optional</span> exdays sbdays)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (sttd  (calendar-absolute-from-gregorian stt ))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">stt &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (today (calendar-absolute-from-gregorian date))  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26085;&#20184;</span>
         (endd  (calendar-absolute-from-gregorian end))   <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">end &#12398;&#26085;&#20184;&#12434; 6 &#26689;&#25968;&#20516;&#12391;</span>
         (diffd (- today sttd))
         (diffe (- endd  today))
         (nths   nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12399;&#20309;&#21608;&#30446;&#12363;&#12434;&#24471;&#12427;</span>
         (jst    nil)  <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffd))
             (not (minusp diffe))
             (zerop (% diffd ival)))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> nths (+ (/ diffd ival) 1)))

    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#19978;&#12398;&#26465;&#20214;&#12434;&#28288;&#12383;&#12375;&#12390;&#12356;&#12428;&#12400;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> nths
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (not (diary-lecture-substitution today exdays)))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbdays)))
    jst))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> その他いくつか作ったプログラム</h3>
<div class="outline-text-3" id="text-4-4">
<p>
いちおう何となく作り方がわかったんで, 必要に応じていくつか書いてみた.<br  />
基本すべて同じぱたーんで書ける筈！！<br  />
</p>

<p>
月末にやることを指定.<br  />
月の締めの作業とか.<br  />
2015/03/07 以降の月末日にやることを指定.<br  />
</p>
<pre class="example">
&lt;%%(diary-habit-last-day-of-month '(3 7 2015)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-last-day-of-month</span>(stt)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
         (jst  nil)
         (sttd  (calendar-absolute-from-gregorian stt ))
         (today (calendar-absolute-from-gregorian date))
         (diffd (- today sttd))
         <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">(calendar-last-day-of-month 3&#26376; 2017&#24180;) ;=&gt; 31 &#26085;</span>
         (lday (calendar-last-day-of-month (nth 0 date) (nth 2 date)))
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (= (nth 1 date) lday)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
    jst
    ))
</pre>
</div>

<p>
2015/03/07 以降の月水金だけやることを指定.<br  />
</p>
<pre class="example">
&lt;%%(diary-habit-weekday '(3 7 2015) 1 3 5)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday</span>(stt <span style="color: #9370db;">&amp;rest</span> wds)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> ((jst0 nil)
         (jst  nil)
         (sttd  (calendar-absolute-from-gregorian stt ))
         (today (calendar-absolute-from-gregorian date))
         (diffd (- today sttd)))
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "date=%s" date))</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (not (minusp diffd)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-habit-weekday-week date wds)))
    jst
    ))

(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-habit-weekday-week</span>(date wds)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((wd nil)
        (jst nil))
    (<span style="color: #20b2aa; font-weight: bold;">while</span> wds
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wd (car wds))
      (<span style="color: #20b2aa; font-weight: bold;">if</span> (= wd (calendar-day-of-week date)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst t))
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> wds (cdr wds))
      )
    jst))
</pre>
</div>

<p>
指定した月の毎日やることを指定, 除外曜日があればそれも指定.<br  />
2015/05 の毎日. 但し火曜(2)水曜(3)を除く.<br  />
</p>
<pre class="example">
&lt;%%(diary-every-day-in-month2 2015 5 2 3)&gt;
</pre>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-every-day-in-month</span>(y m <span style="color: #9370db;">&amp;rest</span> wds)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (l     (calendar-last-day-of-month m y))
         (endd  (calendar-absolute-from-gregorian (list m l y)))
         (sttd  (calendar-absolute-from-gregorian (list m 1 y)))
         (today (calendar-absolute-from-gregorian date))
         (jst0  nil)
         (jst   nil)
         )
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp (- today sttd)))
             (not (minusp (- endd  today))))
        (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst0 t))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 (not wds)) (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst  t)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26085;</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> jst0 wds)       (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (not (diary-habit-weekday-week date wds))))
    jst
   ))
</pre>
</div>

<p>
毎月やる会議の指定.<br  />
2017/04/01 から 2018/03/31 まで, ある委員に任命されてしまった&#x2026;<br  />
月末の金曜日に会議がある.<br  />
だけど夏休みの 8 月と春休みの 2 月には会議がない.<br  />
その代わり 2017/05/08 と 2017/03/11 に余計な会議がある予定なのであった.<br  />
そんな場合の予定として, 以下のように書く私であった.<br  />
</p>
<pre class="example">
&lt;%%(diary-monthly-meeting '(4 1 2017) '(3 31 2018) 5 -1 (8 2) '(5 8 2017) '(3 11 2017))&gt;
</pre>
<ul class="org-ul">
<li>stt: はじまりの日: '(4 1 2017)<br  />
</li>
<li>end: 終わりの日:   '(3 31 2018)<br  />
</li>
<li>何曜日(week)<br  />
</li>
<li>第何週(num)<br  />
</li>
<li>除外月(exs): (5 8)<br  />
</li>
<li>代わりの日付(配列) sbs = '(5 8 2017) '(3 11 2017)<br  />
</li>
</ul>
<div class="org-src-container">

<pre class="src src-elisp">(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-monthly-meeting</span>(stt end week num <span style="color: #9370db;">&amp;optional</span> exs <span style="color: #9370db;">&amp;rest</span> sbs)
  (<span style="color: #20b2aa; font-weight: bold;">let*</span> (
         (doweek (calendar-day-of-week   date)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12398;&#26332;&#26085;(1-7)</span>
         (month  (calendar-extract-month date)) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26376;(1-12)</span>
         (sttd   (calendar-absolute-from-gregorian stt))
         (endd   (calendar-absolute-from-gregorian end))
         (today  (calendar-absolute-from-gregorian date))
         (diffs  (- today sttd))
         (diffe  (- endd  today))
         (ist    nil)
         (dst    nil)
         (mst    t)
         (sst    nil)
         (jst    nil) <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#25147;&#12426;&#20516; t or nil</span>
         )
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#23569;&#12394;&#12367;&#12392;&#12418;&#20170;&#26085;&#12364; stt - end &#12398;&#38291;&#12395;&#28961;&#12356;&#12392; nil</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (<span style="color: #20b2aa; font-weight: bold;">and</span> (not (minusp diffs)) (not (minusp diffe))) (<span style="color: #20b2aa; font-weight: bold;">setq</span> ist t))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#27598;&#26376; num &#36913; week &#26332;&#26085;&#12394;&#12425; t</span>
    (<span style="color: #20b2aa; font-weight: bold;">if</span> (diary-float t week num) (<span style="color: #20b2aa; font-weight: bold;">setq</span> dst t))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#38500;&#22806;&#26376;&#12364;&#25351;&#23450;&#12373;&#12428;&#12390;&#12390;&#19969;&#24230;&#12381;&#12398;&#26376;&#12394;&#12425; nil</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> mst (diary-months-excepts month exs))
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#26222;&#36890;&#12398;&#22580;&#21512;</span>
    (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (<span style="color: #20b2aa; font-weight: bold;">and</span> ist dst mst))
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "ist=%s" ist))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "dst=%s" dst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "mst=%s" mst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(y-or-n-p (message "jst=%s" jst))</span>
    <span style="color: #cd853f;">;</span><span style="color: #cd853f;">(if (and ist (and dst mst)) (setq jst t))</span>
    <span style="color: #cd853f;">;; </span><span style="color: #cd853f;">&#20170;&#26085;&#12364;&#20195;&#12431;&#12426;&#12398;&#26085;&#12391;&#12354;&#12428;&#12400; t</span>
    (<span style="color: #20b2aa; font-weight: bold;">unless</span> jst
      (<span style="color: #20b2aa; font-weight: bold;">setq</span> jst (diary-lecture-substitution today sbs)))
    jst
    ))

(<span style="color: #20b2aa; font-weight: bold;">defun</span> <span style="color: #00ff7f;">diary-months-excepts</span>(month exs)
  (<span style="color: #20b2aa; font-weight: bold;">let</span> ((mst t) (ex nil))
    (<span style="color: #20b2aa; font-weight: bold;">if</span> exs
        (<span style="color: #20b2aa; font-weight: bold;">progn</span>
          (<span style="color: #20b2aa; font-weight: bold;">while</span> exs
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> ex (car exs))
            (<span style="color: #20b2aa; font-weight: bold;">if</span> (= ex month) (<span style="color: #20b2aa; font-weight: bold;">setq</span> mst nil))
            (<span style="color: #20b2aa; font-weight: bold;">setq</span> exs (cdr exs))
            )
          )
      )
    mst))
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 感想</h2>
<div class="outline-text-2" id="text-5">
<p>
結構すっきりしてわかりやすいと思ったので, 繰り返し予定やタスクのスケジューリングは<br  />
全てこの形式で統一した方がいいんじゃないかなーとか思ったが&#x2026;<br  />
org-habit とか org-gcal とかを使おうとするといまいちな感じになってしまう.<br  />
これらに対する修正はまた別の記事で書こうかと思う.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 参考 URL</h2>
<div class="outline-text-2" id="text-6">
<p>
Org-mode Frequently Asked Questions<br  />
<a href="http://orgmode.org/worg/org-faq.html#Appointments/Diary">http://orgmode.org/worg/org-faq.html#Appointments/Diary</a><br  />
</p>

<p>
GNU Emacs Lispリファレンスマニュアル: Sexp Diary Entries<br  />
<a href="http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_654.html">http://www.geocities.co.jp/SiliconValley-Bay/9285/ELISP-JA/elisp_654.html</a><br  />
</p>

<p>
GNU Emacs Manual: カレンダーとダイアリー<br  />
<a href="http://www.bookshelf.jp/texi/emacs-24.5/emacs_33.html">http://www.bookshelf.jp/texi/emacs-24.5/emacs_33.html</a><br  />
</p>

<p>
GNU Emacs Lispリファレンス・マニュアル - 関数<br  />
<a href="http://bit.ly/2mZvhnD">http://bit.ly/2mZvhnD</a><br  />
</p>

<p>
Lispプログラミング入門<br  />
<a href="http://bach.istc.kobe-u.ac.jp/lect/ProLang/org/lisp.html">http://bach.istc.kobe-u.ac.jp/lect/ProLang/org/lisp.html</a><br  />
</p>

<p>
Org-mode, Emacs, and Getting Things Done<br  />
<a href="http://members.optusnet.com.au/~charles57/GTD/index.html">http://members.optusnet.com.au/~charles57/GTD/index.html</a><br  />
</p>

<p>
Org mode for Emacs: あなたの生活をプレーンテキストで<br  />
<a href="http://orgmode.org/ja/index.html">http://orgmode.org/ja/index.html</a><br  />
</p>

<p>
Org Mode マニュアル<br  />
<a href="http://orgmode.jp/doc-ja/org-ja.html">http://orgmode.jp/doc-ja/org-ja.html</a><br  />
</p>

<p>
Emacs org-modeを使ってみる - 屯遁のパズルとプログラミングの日記<br  />
<a href="http://d.hatena.ne.jp/tamura70/20100203/org">http://d.hatena.ne.jp/tamura70/20100203/org</a><br  />
</p>

<p>
How to create calendar entry for last weekday of every month? - Emacs Stack Exchange<br  />
<a href="https://emacs.stackexchange.com/questions/30448/how-to-create-calendar-entry-for-last-weekday-of-every-month">https://emacs.stackexchange.com/questions/30448/how-to-create-calendar-entry-for-last-weekday-of-every-month</a><br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tab 区切りファイルの読込み]]></title>
    <link href="http://saito1369.github.io/blog/2017-05-04-fread.html"/>
    <updated>2017-05-04T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/fread</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. はじめに</a></li>
<li><a href="#sec-2">2. Perl</a></li>
<li><a href="#sec-3">3. Python</a></li>
<li><a href="#sec-4">4. Julia</a></li>
<li><a href="#sec-5">5. Ruby</a></li>
<li><a href="#sec-6">6. R</a></li>
<li><a href="#sec-7">7. Java</a></li>
<li><a href="#sec-8">8. かんそう</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2016-07-16 Sat 13:44&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-21 Wed 20:51&gt;</span></span><br  />
</p>
<p>
tab 区切りファイル読込み/書込みの各言語でのやりかたの違いを整理する.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<p>
参考:<br  />
配列操作の比較表: Ruby, Python, JavaScript, Perl, C++ - bkブログ<br  />
<a href="http://0xcc.net/blog/archives/000043.html">http://0xcc.net/blog/archives/000043.html</a><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> はじめに</h2>
<div class="outline-text-2" id="text-1">
<p>
私は普段の生活においては perl でプログラムを書いている.<br  />
ささっと書いて捨てちゃうことが多いが,<br  />
そのようなプログラムで最も多いぱたーんは以下のようなものである:<br  />
</p>

<ol class="org-ol">
<li>何か(tab 区切りとかの)ファイルを読込む.<br  />
</li>
<li>何かやる(読み込んだデータを加工したり計算したりする).<br  />
</li>
<li>別のファイルに結果等を書き出す.<br  />
</li>
</ol>

<p>
Python を始めとした色んな言語をこれから学んでいくにあたって,<br  />
上記操作のやり方の違いををまずは見ていくのが自分にとっては一番しっくり来るかなぁと思ったのでまとめておく.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Perl</h2>
<div class="outline-text-2" id="text-2">
<p>
これが基準<br  />
</p>

<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>;
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ofile</span>=<span style="color: #ffa07a;">'output.perl.txt'</span>;
<span class="linenr"> 6: </span>
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">input</span>
<span class="linenr"> 8: </span><span style="color: #9370db;">open</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$fh</span>,<span style="color: #ffa07a;">"&lt;"</span>,$ifile;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$cnt</span>=0;
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>;
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$data</span>;
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">while</span>(&lt;$fh&gt;) {
<span class="linenr">13: </span>  <span style="color: #ff83fa;">chomp</span>;
<span class="linenr">14: </span>  <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>=<span style="color: #ff83fa;">split</span>(<span style="color: #1e90ff;">/</span><span style="color: #76ee00;">\</span><span style="color: #9370db;">t</span><span style="color: #1e90ff;">/</span>,$_);
<span class="linenr">15: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27096;&#12293;&#12394;&#29366;&#27841;&#12395;&#23550;&#24540;&#12391;&#12365;&#12427;&#12424;&#12358;&#12395;</span>
<span class="linenr">16: </span>  <span style="color: #20b2aa; font-weight: bold;">unless</span>($cnt) { <span style="color: #cd853f;"># </span><span style="color: #cd853f;">header</span>
<span class="linenr">17: </span>    <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>=<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>;
<span class="linenr">18: </span>  }<span style="color: #20b2aa; font-weight: bold;">else</span> {        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">data</span>
<span class="linenr">19: </span>    <span style="color: #ff83fa;">push</span>(@{$data},\<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@bf</span>);
<span class="linenr">20: </span>  }
<span class="linenr">21: </span>  $cnt++;
<span class="linenr">22: </span>}
<span class="linenr">23: </span><span style="color: #9370db;">close</span> $fh;
<span class="linenr">24: </span>
<span class="linenr">25: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">output</span>
<span class="linenr">26: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$prnt</span>;
<span class="linenr">27: </span>$prnt=<span style="color: #9370db;">join</span>(<span style="color: #ffa07a;">"\t"</span>,<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@head</span>).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">28: </span><span style="color: #20b2aa; font-weight: bold;">for</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$d</span> (@{$data}) {
<span class="linenr">29: </span>  $prnt.=<span style="color: #9370db;">join</span>(<span style="color: #ffa07a;">"\t"</span>,@{$d}).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">30: </span>}
<span class="linenr">31: </span><span style="color: #9370db;">open</span> <span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$ofh</span>,<span style="color: #ffa07a;">"&gt;"</span>,$ofile;
<span class="linenr">32: </span><span style="color: #ff83fa;">print</span> $ofh $prnt;
<span class="linenr">33: </span><span style="color: #9370db;">close</span> $ofh;
<span class="linenr">34: </span>
<span class="linenr">35: </span><span style="color: #ff83fa;">print</span> $prnt; <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27161;&#28310;&#20986;&#21147;&#12395;&#12418;&#26360;&#12365;&#20986;&#12377;&#22580;&#21512;</span>
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X
bar 30  usa F 25  0.38  P
hoge  10  jpn F 4 1 P
fuga  40  eng M     X
fuga  35    F 9 0.1 X
</pre>

<p>
header の名前を key にして hash の配列にしてもよい.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Python</h2>
<div class="outline-text-2" id="text-3">
<p>
python での注意点と参考 URL:<br  />
</p>

<ul class="org-ul">
<li>タブ区切りのファイルを読む<br  />
<ul class="org-ul">
<li>Python でファイルを読む<br  />
<a href="http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/python/readfile.html">http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/python/readfile.html</a><br  />
</li>
</ul>
</li>
<li>unless の代わりに not を使う<br  />
<ul class="org-ul">
<li>【python】unlessがないのでnotを使う | chat-blog<br  />
<a href="http://chat-rate.com/it/255">http://chat-rate.com/it/255</a><br  />
</li>
</ul>
</li>
<li>文字列を数値に変換する(めんどくさいなぁ&#x2026;)<br  />
<ul class="org-ul">
<li>Pythonメモ: 文字列を数値に変換する<br  />
<a href="http://yoshi-python.blogspot.jp/2009/09/blog-post_4656.html">http://yoshi-python.blogspot.jp/2009/09/blog-post_4656.html</a><br  />
</li>
</ul>
</li>
<li>辞書オブジェクトの使い方<br  />
<ul class="org-ul">
<li>Python - 辞書（ディクショナリ）の使い方 - ざっくりん雑記<br  />
<a href="http://azuuun-memorandum.hatenablog.com/entry/2015/05/01/075000">http://azuuun-memorandum.hatenablog.com/entry/2015/05/01/075000</a><br  />
</li>
</ul>
</li>
<li>ファイルに書き込み<br  />
<ul class="org-ul">
<li>Python: テキストファイルに書き込み – write()、writelines()メソッド<br  />
<a href="http://www.yukun.info/blog/2008/09/python-file-write-writelines.html">http://www.yukun.info/blog/2008/09/python-file-write-writelines.html</a><br  />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> sys
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">'output.python.txt'</span>
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #9acd32;">fh</span>=<span style="color: #76ee00;">open</span>(ifile,<span style="color: #ffa07a;">'r'</span>)
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">lines=fh.readlines() # &#20840;&#37096;&#35501;&#12415;&#36796;&#12435;&#12391; lines &#12395;&#20837;&#12428;&#12427;&#22580;&#21512;.</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">input</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">perl &#12392;&#21516;&#12376;&#24863;&#12376;&#12391;&#12363;&#12356;&#12390;&#12415;&#12427;.</span>
<span class="linenr">11: </span><span style="color: #9acd32;">cnt</span>=0
<span class="linenr">12: </span><span style="color: #9acd32;">head</span>=[]
<span class="linenr">13: </span><span style="color: #9acd32;">data</span>=[]
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">for</span> li <span style="color: #20b2aa; font-weight: bold;">in</span> fh:   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">li &#12395; 1 &#34892;&#27598;(&#25913;&#34892;&#21547;&#12416;)&#12364;&#20837;&#12387;&#12390;&#12367;&#12427;</span>
<span class="linenr">15: </span>  <span style="color: #9acd32;">bf</span> = li[:-1].split(<span style="color: #ffa07a;">"\t"</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12398;&#25913;&#34892;&#12434;&#21462;&#12426;&#38500;&#12356;&#12390;(li[:-1]) split</span>
<span class="linenr">16: </span>  <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> cnt:
<span class="linenr">17: </span>     <span style="color: #9acd32;">head</span>=bf
<span class="linenr">18: </span>  <span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr">19: </span>     data.append(bf)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">push &#12391;&#12399;&#12394;&#12367; append</span>
<span class="linenr">20: </span>  <span style="color: #9acd32;">cnt</span>+=1
<span class="linenr">21: </span>fh.close
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12392;&#12375;&#12390;&#20837;&#12387;&#12390;&#12427;&#12371;&#12392;&#12434;&#30906;&#35469;&#12377;&#12427;.</span>
<span class="linenr">24: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(head)</span>
<span class="linenr">25: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(data)</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12398;&#37197;&#21015;&#12392;&#12375;&#12390;&#20837;&#12428;&#12390;&#12415;&#12427;</span>
<span class="linenr">28: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hashs[0]['name'] &#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#21508;&#12293;&#12398;&#35201;&#32032;&#12395;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427;.</span>
<span class="linenr">29: </span><span style="color: #9acd32;">hashs</span>=[]
<span class="linenr">30: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dr <span style="color: #20b2aa; font-weight: bold;">in</span> data:
<span class="linenr">31: </span>  <span style="color: #76ee00;">hash</span>={}
<span class="linenr">32: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">print(dr)</span>
<span class="linenr">33: </span>  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">sys.exit(0) # &#12371;&#12371;&#12391;&#32066;&#12431;&#12427;&#26178;(for debug)</span>
<span class="linenr">34: </span>  <span style="color: #20b2aa; font-weight: bold;">for</span> j,d <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">enumerate</span>(dr):
<span class="linenr">35: </span>     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">j &#12364; 1 &#12363; 4 &#12398;&#12392;&#12365;&#12399;, &#25972;&#25968;&#12392;&#12375;&#12390;&#20837;&#12428;&#12427;</span>
<span class="linenr">36: </span>     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">j &#12364; 5      &#12398;&#12392;&#12365;&#12399;, &#28014;&#21205;&#23567;&#25968;&#28857;&#12392;&#12375;&#12390;&#20837;&#12428;&#12427;. &#38754;&#20498;...</span>
<span class="linenr">37: </span>     <span style="color: #9acd32;">dk</span> = d
<span class="linenr">38: </span>     <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> d==<span style="color: #ffa07a;">''</span>:
<span class="linenr">39: </span>       <span style="color: #20b2aa; font-weight: bold;">if</span> j==1 <span style="color: #20b2aa; font-weight: bold;">or</span> j==4:
<span class="linenr">40: </span>         <span style="color: #9acd32;">dk</span> = <span style="color: #76ee00;">int</span>(d)
<span class="linenr">41: </span>       <span style="color: #20b2aa; font-weight: bold;">elif</span> j==5:         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">elsif &#12391;&#12399;&#12394;&#12367; elif</span>
<span class="linenr">42: </span>         <span style="color: #9acd32;">dk</span> = <span style="color: #76ee00;">float</span>(d)
<span class="linenr">43: </span>     <span style="color: #76ee00;">hash</span>[head[j]]=dk
<span class="linenr">44: </span>  hashs.append(<span style="color: #76ee00;">hash</span>)
<span class="linenr">45: </span>
<span class="linenr">46: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(hashs)</span>
<span class="linenr">47: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(hashs[0]['name'])</span>
<span class="linenr">48: </span>
<span class="linenr">49: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">output</span>
<span class="linenr">50: </span><span style="color: #9acd32;">ofh</span>=<span style="color: #76ee00;">open</span>(ofile,<span style="color: #ffa07a;">'w'</span>)
<span class="linenr">51: </span><span style="color: #9acd32;">prnt</span>=<span style="color: #ffa07a;">"\t"</span>.join(head)+<span style="color: #ffa07a;">"\n"</span>
<span class="linenr">52: </span><span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> data:
<span class="linenr">53: </span>  <span style="color: #9acd32;">prnt</span>+=<span style="color: #ffa07a;">"\t"</span>.join(d)+<span style="color: #ffa07a;">"\n"</span>
<span class="linenr">54: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(prnt)
<span class="linenr">55: </span>ofh.write(prnt)
<span class="linenr">56: </span>ofh.close()
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X
bar 30  usa F 25  0.38  P
hoge  10  jpn F 4 1 P
fuga  40  eng M     X
fuga  35    F 9 0.1 X
</pre>

<p>
dataframe とか使う場合はまた別でまとめようと思うが, 一応書いておく.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">'input.txt'</span>
<span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">'output.pandas.txt'</span>

<span style="color: #9acd32;">df</span> = pd.read_csv(ifile,sep=<span style="color: #ffa07a;">"\t"</span>,header=0)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12363;&#12420;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">0 &#34892;&#30446;&#12398; 'name' &#21015;&#12434;&#26360;&#12365;&#25563;&#12360;</span>
<span style="color: #9acd32;">df.ix</span>[0,<span style="color: #ffa07a;">'name'</span>] = <span style="color: #ffa07a;">'foo2'</span>
df.to_csv(ofile,sep=<span style="color: #ffa07a;">"\t"</span>,index=<span style="color: #1e90ff;">False</span>)

<span style="color: #20b2aa; font-weight: bold;">print</span>(df)
</pre>
</div>

<pre class="example">
   name  age origin gender  idata  fdata type
0  foo2   10    jpn      M   50.0   0.25    X
1   bar   30    usa      F   25.0   0.38    P
2  hoge   10    jpn      F    4.0   1.00    P
3  fuga   40    eng      M    NaN    NaN    X
4  fuga   35    NaN      F    9.0   0.10    X
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Julia</h2>
<div class="outline-text-2" id="text-4">
<p>
Julia での注意点と参考 URL:<br  />
</p>

<p>
全般的に, 型を意識する必要がある(? 全部 Any でいいのかなぁ)のでちょっと面倒くさい印象.<br  />
文字列は '' ではなく "" で囲わないといけない(Java と同じ)<br  />
and, or は &amp;&amp; || (これも Java と同じ)<br  />
if 文は, if .. elseif .. end という感じで書く.<br  />
関数は function hoge(x) &#x2026; end という感じで書く.<br  />
配列の添字は 1 から始まる.<br  />
二次元配列は arr[1,2] (1行2列目), 配列の配列は arr<br  />
hash の宣言: Dict{keyの型, value の型}()<br  />
主な型指定: Int64, Float64, ASCIIString, Any(何を入れてもいい型)<br  />
文字列連結は "." でも "+" でもなく, 何と "*" を使うらしい. 何で?<br  />
</p>

<ul class="org-ul">
<li>基本<br  />
<ul class="org-ul">
<li>Juliaことはじめ - 0x00 nullbyte blog<br  />
<a href="http://nullbyte.hatenablog.com/entry/2015/05/27/013949">http://nullbyte.hatenablog.com/entry/2015/05/27/013949</a><br  />
</li>
<li>Julia Language Programming (Julia の基礎知識)<br  />
<a href="http://www.geocities.jp/m_hiroi/light/julia01.html#abc02">http://www.geocities.jp/m_hiroi/light/julia01.html#abc02</a><br  />
</li>
</ul>
</li>
<li>ファイルの開き方など<br  />
<ul class="org-ul">
<li>Introducing Julia/Working with text files - Wikibooks, open books for an open world<br  />
<a href="https://en.wikibooks.org/wiki/Introducing_Julia/Working_with_text_files">https://en.wikibooks.org/wiki/Introducing_Julia/Working_with_text_files</a><br  />
</li>
<li>Juliaでファイル操作 | mwSoft<br  />
<a href="http://www.mwsoft.jp/programming/julia/file.html">http://www.mwsoft.jp/programming/julia/file.html</a><br  />
</li>
<li>Julia でデータのセーブとロード - yomichi's blog<br  />
<a href="http://yomichi.hateblo.jp/entry/2015/12/19/014201">http://yomichi.hateblo.jp/entry/2015/12/19/014201</a><br  />
</li>
<li>＜紙＞さんＬｏＧ Julia 学習：ファイル入出力<br  />
<a href="http://jn1inl.blog77.fc2.com/blog-entry-2209.html">http://jn1inl.blog77.fc2.com/blog-entry-2209.html</a><br  />
</li>
</ul>
</li>
<li>型について<br  />
<ul class="org-ul">
<li>Julia カテゴリーの記事一覧 - 0x00 nullbyte blog<br  />
<a href="http://nullbyte.hatenablog.com/archive/category/Julia">http://nullbyte.hatenablog.com/archive/category/Julia</a><br  />
</li>
</ul>
</li>
<li>配列など<br  />
<ul class="org-ul">
<li>Learn Julia in Y Minutes<br  />
<a href="https://learnxinyminutes.com/docs/julia/">https://learnxinyminutes.com/docs/julia/</a><br  />
</li>
<li>Julia入門 配列 - 0x00 nullbyte blog<br  />
<a href="http://nullbyte.hatenablog.com/entry/2015/05/30/001107">http://nullbyte.hatenablog.com/entry/2015/05/30/001107</a><br  />
</li>
<li>Julia の超入門（配列編） - 中野智文<br  />
<a href="http://blog.goo.ne.jp/nakano-tomofumi/e/135ed54502fd7a23d4b53fc3340240d2">http://blog.goo.ne.jp/nakano-tomofumi/e/135ed54502fd7a23d4b53fc3340240d2</a><br  />
</li>
<li>光学設計者の学習メモ: Julia Array操作の基本をメモ。<br  />
<a href="http://retrofocus28.blogspot.jp/2014/11/julia-array.html">http://retrofocus28.blogspot.jp/2014/11/julia-array.html</a><br  />
</li>
</ul>
</li>
<li>ハッシュ等<br  />
<ul class="org-ul">
<li>Julia入門 辞書（ハッシュテーブル）、Set型について - 0x00 nullbyte blog<br  />
<a href="http://nullbyte.hatenablog.com/entry/2015/06/03/000106">http://nullbyte.hatenablog.com/entry/2015/06/03/000106</a><br  />
</li>
</ul>
</li>
<li>join<br  />
<ul class="org-ul">
<li>配列から文字列、文字列から配列への変換 (convert array to string, string to array) - MATLAB移民のためのJulia tips<br  />
<a href="http://julia.hatenablog.jp/entry/2016/04/17/144129">http://julia.hatenablog.jp/entry/2016/04/17/144129</a><br  />
</li>
</ul>
</li>
<li>文字列連結<br  />
<ul class="org-ul">
<li>Julia の文字列結合演算が積 (*) である理由（他言語との比較） - Moriturus te saluto<br  />
<a href="http://dsng.hatenablog.com/entry/2014/07/03/214526">http://dsng.hatenablog.com/entry/2014/07/03/214526</a><br  />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span>ifile=<span style="color: #ffa07a;">"input.txt"</span>
<span class="linenr"> 2: </span>ofile=<span style="color: #ffa07a;">"output.julia.txt"</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">fh=open(ifile,"r")</span>
<span class="linenr"> 5: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">str=readall(fh)  # &#19968;&#27671;&#12395;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512;&#12399;&#12371;&#12358;&#12377;&#12427;.</span>
<span class="linenr"> 6: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(str)</span>
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>head=[]  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">head=Array{Any,1}()</span>
<span class="linenr"> 9: </span>data=<span style="color: #9370db;">Array</span>{<span style="color: #9370db;">Array</span>{<span style="color: #9370db;">Any</span>,1},1}()  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1x1 &#12398;, &#37197;&#21015;&#12398;&#37197;&#21015;&#12434;&#20316;&#12387;&#12390;&#12362;&#12367;.</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">data=[][] &#12371;&#12428;&#12376;&#12419;&#12480;&#12513;&#12425;&#12375;&#12356;.</span>
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">filehandle &#12399;&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#26360;&#12367;&#12398;&#12364;&#26222;&#36890;&#12398;&#12424;&#12358;&#12384;</span>
<span class="linenr">13: </span>open(ifile,<span style="color: #ffa07a;">"r"</span>) <span style="color: #20b2aa; font-weight: bold;">do</span> fh
<span class="linenr">14: </span>    cnt=0
<span class="linenr">15: </span>    <span style="color: #20b2aa; font-weight: bold;">for</span> li <span style="color: #20b2aa; font-weight: bold;">in</span> eachline(fh)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#34892;&#12378;&#12388;&#35501;&#12435;&#12391;&#12356;&#12367;</span>
<span class="linenr">16: </span>        <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(li)</span>
<span class="linenr">17: </span>        li = chomp(li)          <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25913;&#34892;&#12434;&#21462;&#12426;&#38500;&#12367;</span>
<span class="linenr">18: </span>        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">li = rstrip(li,'\n')  # &#25913;&#34892;&#21066;&#38500;&#12399;&#12371;&#12428;&#12391;&#12418;&#12356;&#12356;</span>
<span class="linenr">19: </span>        bf = split(li,<span style="color: #ffa07a;">"\t"</span>)     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">\t &#12391; split</span>
<span class="linenr">20: </span>        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(bf)</span>
<span class="linenr">21: </span>        <span style="color: #20b2aa; font-weight: bold;">if</span> cnt == 0             <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#34892;&#30446;(header)</span>
<span class="linenr">22: </span>            append!(head,bf)       <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head=bf &#12391;&#12399;&#12456;&#12521;&#12540;&#12392;&#12394;&#12427;. append! &#12434;&#20351;&#12358;</span>
<span class="linenr">23: </span>            <span style="color: #cd853f;">#</span><span style="color: #cd853f;">for i in 1:length(bf)</span>
<span class="linenr">24: </span>            <span style="color: #cd853f;">#   </span><span style="color: #cd853f;">push!(head,bf[i])</span>
<span class="linenr">25: </span>            <span style="color: #cd853f;">#</span><span style="color: #cd853f;">end</span>
<span class="linenr">26: </span>        <span style="color: #20b2aa; font-weight: bold;">else</span>                    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892;&#30446;&#20197;&#38477;(&#12391;&#12540;&#12383;)</span>
<span class="linenr">27: </span>            push!(data,bf)
<span class="linenr">28: </span>        <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">29: </span>        cnt+=1
<span class="linenr">30: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">31: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">32: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">close(fh) # &#33258;&#21205;&#12391;&#38281;&#12376;&#12427;&#12398;&#12391;&#26360;&#12363;&#12394;&#12367;&#12390;&#12418;&#12356;&#12356;&#12387;&#12413;&#12356;.</span>
<span class="linenr">33: </span>
<span class="linenr">34: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">data[][] &#12434; hash &#12398;&#37197;&#21015;&#12395;&#12375;&#12390;&#12415;&#12427;.</span>
<span class="linenr">35: </span>hashs=[]
<span class="linenr">36: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dt <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">37: </span>    hash = <span style="color: #9370db;">Dict</span>{<span style="color: #9370db;">Any</span>,<span style="color: #9370db;">Any</span>}()
<span class="linenr">38: </span>     <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:length(dt)
<span class="linenr">39: </span>        hash[head[i]]=dt[i]
<span class="linenr">40: </span>     <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">41: </span>    push!(hashs,hash)
<span class="linenr">42: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">43: </span>
<span class="linenr">44: </span>println(head)
<span class="linenr">45: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">println(data)</span>
<span class="linenr">46: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">println(data[1][1])</span>
<span class="linenr">47: </span>
<span class="linenr">48: </span>println(head[1])
<span class="linenr">49: </span>println(hashs[1][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">50: </span>println(hashs[2][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">51: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">exit() &#12503;&#12525;&#12464;&#12521;&#12512;&#12434;&#32066;&#12431;&#12425;&#12379;&#12427;&#12392;&#12365;</span>
<span class="linenr">52: </span>
<span class="linenr">53: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12461;&#12515;&#12473;&#12488;&#30340;&#12394;&#12371;&#12392;&#12399;, parse(type,str) &#12434;&#29992;&#12356;&#12427;</span>
<span class="linenr">54: </span>itx = parse(<span style="color: #9370db;">Float64</span>,hashs[1][<span style="color: #ffa07a;">"fdata"</span>]) + parse(<span style="color: #9370db;">Float64</span>,hashs[2][<span style="color: #ffa07a;">"fdata"</span>])
<span class="linenr">55: </span>println(itx)
<span class="linenr">56: </span>
<span class="linenr">57: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#26360;&#12365;&#36796;&#12415;</span>
<span class="linenr">58: </span>open(ofile,<span style="color: #ffa07a;">"w"</span>) <span style="color: #20b2aa; font-weight: bold;">do</span> fp
<span class="linenr">59: </span>   write(fp,join(head,<span style="color: #ffa07a;">"\t"</span>)*<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">60: </span>   <span style="color: #20b2aa; font-weight: bold;">for</span> d <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">61: </span>      write(fp,join(d,<span style="color: #ffa07a;">"\t"</span>)*<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">62: </span>   <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">63: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
Any["name","age","origin","gender","idata","fdata","type"]
name
0.25
0.38
0.63
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Ruby</h2>
<div class="outline-text-2" id="text-5">
<p>
Ruby での注意点と参考 URL:<br  />
</p>
<ul class="org-ul">
<li>基本<br  />
<ul class="org-ul">
<li>逆引きRuby - ファイルアクセス<br  />
<a href="http://bit.ly/2am8jkn">http://bit.ly/2am8jkn</a><br  />
</li>
<li>【Ruby】表示メソッドについて（print,puts,p） - TASK NOTES<br  />
<a href="http://www.task-notes.com/entry/20141109/1415520719">http://www.task-notes.com/entry/20141109/1415520719</a><br  />
</li>
</ul>
</li>
<li>hash<br  />
<ul class="org-ul">
<li>【Ruby】配列とハッシュの基本的な使い方 - TASK NOTES<br  />
<a href="http://www.task-notes.com/entry/20141115/1416045573">http://www.task-notes.com/entry/20141115/1416045573</a><br  />
</li>
</ul>
</li>
<li>型キャスト(to_f)<br  />
<ul class="org-ul">
<li>数値クラスを変換する - 数値(Numeric)クラス - Ruby入門<br  />
<a href="http://www.rubylife.jp/ini/numeric_class/index2.html">http://www.rubylife.jp/ini/numeric_class/index2.html</a><br  />
</li>
</ul>
</li>
<li>each_with_index (python の enumerate に相当)<br  />
<ul class="org-ul">
<li>Python's enumerate in Ruby? - Stack Overflow<br  />
<a href="http://stackoverflow.com/questions/13936922/pythons-enumerate-in-ruby">http://stackoverflow.com/questions/13936922/pythons-enumerate-in-ruby</a><br  />
</li>
</ul>
</li>
<li>join 等(文字列連結)<br  />
ruby の文字列連結は "+" あるいは "&lt;&lt;"<br  />
<ul class="org-ul">
<li>Rubyの文字列連結に関して知っておくべきこと - Qiita<br  />
<a href="http://qiita.com/Kta-M/items/c7c2fb0b61b11d3a2c48">http://qiita.com/Kta-M/items/c7c2fb0b61b11d3a2c48</a><br  />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span>ifile=<span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 2: </span>ofile=<span style="color: #ffa07a;">'output.ruby.txt'</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>fh=<span style="color: #76ee00;">open</span>(ifile,<span style="color: #ffa07a;">"r"</span>)
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">str=fh.read     # &#19968;&#27671;&#12395;&#20840;&#37096;&#35501;&#12415;&#36796;&#12416;&#22580;&#21512;</span>
<span class="linenr"> 6: </span>cnt=0
<span class="linenr"> 7: </span>head=[]    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">head=Array.new &#12391;&#12418;&#33391;&#12356;</span>
<span class="linenr"> 8: </span>data=[]
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">while</span> li = fh.gets
<span class="linenr">10: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print li</span>
<span class="linenr">11: </span>  li=li.chomp         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25913;&#34892;&#21462;&#12426;&#38500;&#12365;</span>
<span class="linenr">12: </span>  bf=li.split(<span style="color: #ffa07a;">"\t"</span>)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tab &#12391; split</span>
<span class="linenr">13: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(bf)</span>
<span class="linenr">14: </span>  <span style="color: #cd853f;">#</span><span style="color: #cd853f;">exit</span>
<span class="linenr">15: </span>  <span style="color: #20b2aa; font-weight: bold;">if</span> cnt==0
<span class="linenr">16: </span>    head=bf
<span class="linenr">17: </span>  <span style="color: #20b2aa; font-weight: bold;">else</span>
<span class="linenr">18: </span>    data.push(bf)
<span class="linenr">19: </span>  <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">20: </span>  cnt+=1
<span class="linenr">21: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">22: </span>fh.close
<span class="linenr">23: </span>
<span class="linenr">24: </span><span style="color: #76ee00;">print</span>(head)
<span class="linenr">25: </span><span style="color: #76ee00;">print</span>(<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">26: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(data[0])</span>
<span class="linenr">27: </span><span style="color: #cd853f;">#</span><span style="color: #cd853f;">exit   &#12371;&#12371;&#12391;&#32066;&#12431;&#12427;&#12392;&#12365; (for debug)</span>
<span class="linenr">28: </span>
<span class="linenr">29: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12398;&#37197;&#21015;&#12395;&#12375;&#12390;&#12415;&#12427;.</span>
<span class="linenr">30: </span>hashs=[]
<span class="linenr">31: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dr <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">32: </span>  hash={}
<span class="linenr">33: </span>  dr.each_with_index <span style="color: #20b2aa; font-weight: bold;">do</span> |d,j|   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">enumerate</span>
<span class="linenr">34: </span>    dk=d
<span class="linenr">35: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span> <span style="color: #20b2aa; font-weight: bold;">not</span> d==<span style="color: #ffa07a;">''</span>
<span class="linenr">36: </span>       <span style="color: #20b2aa; font-weight: bold;">if</span> j==1 <span style="color: #20b2aa; font-weight: bold;">or</span> j==4
<span class="linenr">37: </span>         dk=d.to_i         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25972;&#25968;&#22411;&#12408;&#12461;&#12515;&#12473;&#12488;</span>
<span class="linenr">38: </span>       <span style="color: #20b2aa; font-weight: bold;">elsif</span> j==5
<span class="linenr">39: </span>         dk=d.to_f         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#28014;&#21205;&#23567;&#25968;&#28857;&#22411;&#12408;&#12461;&#12515;&#12473;&#12488;</span>
<span class="linenr">40: </span>       <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">41: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">42: </span>    hash[head[j]]=dk
<span class="linenr">43: </span>  <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">44: </span>  hashs.push(hash)
<span class="linenr">45: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">46: </span>
<span class="linenr">47: </span><span style="color: #76ee00;">print</span>(hashs[0])
<span class="linenr">48: </span><span style="color: #76ee00;">print</span>(<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">49: </span>
<span class="linenr">50: </span>itx = hashs[0][<span style="color: #ffa07a;">"fdata"</span>] + hashs[1][<span style="color: #ffa07a;">"fdata"</span>]
<span class="linenr">51: </span><span style="color: #76ee00;">puts</span>(itx)
<span class="linenr">52: </span>
<span class="linenr">53: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">file &#26360;&#12365;&#20986;&#12375;</span>
<span class="linenr">54: </span>ofh=<span style="color: #76ee00;">open</span>(ofile,<span style="color: #ffa07a;">"w"</span>)
<span class="linenr">55: </span>ofh.write(head.join(<span style="color: #ffa07a;">"\t"</span>)+<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">56: </span><span style="color: #20b2aa; font-weight: bold;">for</span> dt <span style="color: #20b2aa; font-weight: bold;">in</span> data
<span class="linenr">57: </span>   str=dt.join(<span style="color: #ffa07a;">"\t"</span>)
<span class="linenr">58: </span>   ofh.write(str+<span style="color: #ffa07a;">"\n"</span>)
<span class="linenr">59: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">60: </span>ofh.close
</pre>
</div>

<pre class="example">
["name", "age", "origin", "gender", "idata", "fdata", "type"]
{"name"=&gt;"foo", "age"=&gt;10, "origin"=&gt;"jpn", "gender"=&gt;"M", "idata"=&gt;50, "fdata"=&gt;0.25, "type"=&gt;"X"}
0.63
</pre>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> R</h2>
<div class="outline-text-2" id="text-6">
<p>
おまけ(1)<br  />
read.table でファイルを読むプログラムを一応作っておく.<br  />
</p>

<p>
R での注意点と参考 URL:<br  />
</p>
<ul class="org-ul">
<li>read.table()<br  />
<ul class="org-ul">
<li>R-Source 40. ファイルからデータを読み込む<br  />
<a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/40.html">http://cse.naro.affrc.go.jp/takezawa/r-tips/r/40.html</a><br  />
</li>
</ul>
</li>
<li>write.table() のパラメータ<br  />
<ul class="org-ul">
<li>R: データ出力<br  />
<a href="http://www.is.titech.ac.jp/~mase/mase/html.jp/temp/write.table.jp.html">http://www.is.titech.ac.jp/~mase/mase/html.jp/temp/write.table.jp.html</a><br  />
</li>
<li>R-Source 45. ファイルへのデータ出力<br  />
<a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/45.html">http://cse.naro.affrc.go.jp/takezawa/r-tips/r/45.html</a><br  />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>ifile <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'input.txt'</span>
<span class="linenr"> 2: </span>ofile <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">'output.R.txt'</span>
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span>data <span style="color: #1e90ff;">&lt;-</span> read.table(ifile,sep=<span style="color: #ffa07a;">"\t"</span>,head=T)
<span class="linenr"> 5: </span>data
<span class="linenr"> 6: </span>names(data)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">header &#12398;&#21517;&#21069;</span>
<span class="linenr"> 7: </span>data[<span style="color: #ffa07a;">'name'</span>]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21462;&#24471;</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">quote=F  : "" &#12434;&#20184;&#12369;&#12394;&#12356;</span>
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">append=F : &#19978;&#26360;&#12365;</span>
<span class="linenr">11: </span>write.table(data,ofile,quote=F,sep=<span style="color: #ffa07a;">"\t"</span>,col.names=T,row.names=F,append=F,na=<span style="color: #ffa07a;">""</span>)
</pre>
</div>

<pre class="example">
  name age origin gender idata fdata type
1  foo  10    jpn      M    50  0.25    X
2  bar  30    usa      F    25  0.38    P
3 hoge  10    jpn      F     4  1.00    P
4 fuga  40    eng      M    NA    NA    X
5 fuga  35             F     9  0.10    X
[1] "name"   "age"    "origin" "gender" "idata"  "fdata"  "type"  
  name
1  foo
2  bar
3 hoge
4 fuga
5 fuga
</pre>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Java</h2>
<div class="outline-text-2" id="text-7">
<p>
おまけ(2)<br  />
</p>

<p>
Java での注意点と参考 URL:<br  />
</p>
<ul class="org-ul">
<li>join(Java8)<br  />
<ul class="org-ul">
<li>あなたのJavaコードをスッキリさせる、地味に便利な新API 10選（前編） - Taste of Tech Topics<br  />
<a href="http://acro-engineer.hatenablog.com/entry/2014/03/12/112402">http://acro-engineer.hatenablog.com/entry/2014/03/12/112402</a><br  />
</li>
</ul>
</li>
<li>可変長の配列は List(ArrayList), hash は Map(HashMap) を用いるが何か面倒<br  />
push するために List という配列の拡張を使ったが, 何かイマイチな感じ.<br  />
<ul class="org-ul">
<li>【Java】配列・リスト・マップの使い方についての基本 - TASK NOTES<br  />
<a href="http://www.task-notes.com/entry/20140923/1411477102">http://www.task-notes.com/entry/20140923/1411477102</a><br  />
</li>
<li>ArrayListクラス - コレクション(ArrayList) - Java入門<br  />
<a href="http://www.javadrive.jp/start/arraylist/index1.html">http://www.javadrive.jp/start/arraylist/index1.html</a><br  />
</li>
</ul>
</li>
<li>ファイル書き出し<br  />
<ul class="org-ul">
<li>便利な書き込み用クラス - テキストファイルの入出力 - Java入門<br  />
<a href="http://www.javadrive.jp/start/stream/index7.html">http://www.javadrive.jp/start/stream/index7.html</a><br  />
</li>
</ul>
</li>
<li>trim()<br  />
<ul class="org-ul">
<li>先頭又は最後の空白を取り除く(trim) - Stringクラス<br  />
<a href="http://www.javadrive.jp/start/string_class/index4.html">http://www.javadrive.jp/start/string_class/index4.html</a><br  />
</li>
</ul>
</li>
<li>拡張 for 文<br  />
<ul class="org-ul">
<li>【Java】for文と拡張for文の違い - Qiita<br  />
<a href="http://qiita.com/Mocacamo/items/290457f9d378ad80ddba">http://qiita.com/Mocacamo/items/290457f9d378ad80ddba</a><br  />
</li>
</ul>
</li>
</ul>

<div class="org-src-container">

<pre class="src src-java"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">File</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">FileReader</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">BufferedReader</span>;
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">HashMap</span>;
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">Map</span>;
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">List</span>;
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">util</span>.<span style="color: #9370db;">ArrayList</span>;
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">FileWriter</span>;
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">BufferedWriter</span>;
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">import</span> <span style="color: #1e90ff;">java</span>.<span style="color: #1e90ff;">io</span>.<span style="color: #9370db;">PrintWriter</span>;
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">public</span> <span style="color: #20b2aa; font-weight: bold;">class</span> <span style="color: #9370db;">fread</span> {
<span class="linenr">12: </span>  <span style="color: #20b2aa; font-weight: bold;">public</span> <span style="color: #20b2aa; font-weight: bold;">static</span> <span style="color: #9370db;">void</span> <span style="color: #00ff7f;">main</span>(<span style="color: #9370db;">String</span>[] <span style="color: #9acd32;">args</span>) {
<span class="linenr">13: </span>    <span style="color: #9370db;">String</span> <span style="color: #9acd32;">ifile</span>=<span style="color: #ffa07a;">"input.txt"</span>;
<span class="linenr">14: </span>    <span style="color: #9370db;">String</span> <span style="color: #9acd32;">ofile</span>=<span style="color: #ffa07a;">"output.java.txt"</span>;
<span class="linenr">15: </span>
<span class="linenr">16: </span>    <span style="color: #9370db;">List</span>&lt;<span style="color: #9370db;">Map</span>&gt; <span style="color: #9acd32;">data</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">ArrayList</span>();<span style="color: #4682b4; text-decoration: underline;"> </span>
<span class="linenr">17: </span>    <span style="color: #9370db;">List</span>&lt;<span style="color: #9370db;">String</span>&gt; <span style="color: #9acd32;">head</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">ArrayList</span>();
<span class="linenr">18: </span>    <span style="color: #20b2aa; font-weight: bold;">try</span> {
<span class="linenr">19: </span>      <span style="color: #9370db;">File</span> <span style="color: #9acd32;">file</span>=<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">File</span>(ifile);
<span class="linenr">20: </span>      <span style="color: #9370db;">BufferedReader</span> <span style="color: #9acd32;">br</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">BufferedReader</span>(<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">FileReader</span>(file));
<span class="linenr">21: </span>      <span style="color: #9370db;">int</span> <span style="color: #9acd32;">cnt</span>=0;
<span class="linenr">22: </span>      <span style="color: #9370db;">String</span> <span style="color: #9acd32;">str</span>;
<span class="linenr">23: </span>      <span style="color: #20b2aa; font-weight: bold;">while</span>((str=br.readLine())!=<span style="color: #1e90ff;">null</span>) {
<span class="linenr">24: </span>        <span style="color: #9370db;">String</span> [] <span style="color: #9acd32;">row</span>=str.split(<span style="color: #ffa07a;">"\t"</span>);
<span class="linenr">25: </span>        <span style="color: #20b2aa; font-weight: bold;">if</span>(cnt==0) {
<span class="linenr">26: </span>          <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : row) { <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#20309;&#12363;&#27671;&#25345;&#12385;&#24746;&#12356;&#12369;&#12393;</span>
<span class="linenr">27: </span>             head.add(s);
<span class="linenr">28: </span>          }
<span class="linenr">29: </span>        }<span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr">30: </span>          <span style="color: #9370db;">Map</span>&lt;<span style="color: #9370db;">String</span>,<span style="color: #9370db;">String</span>&gt; <span style="color: #9acd32;">hash</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">HashMap</span>();
<span class="linenr">31: </span>          <span style="color: #9370db;">int</span> <span style="color: #9acd32;">i</span>=0;
<span class="linenr">32: </span>          <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : head) {
<span class="linenr">33: </span>             hash.put(s,row[i++]);
<span class="linenr">34: </span>          }
<span class="linenr">35: </span>          data.add(hash);
<span class="linenr">36: </span>        }
<span class="linenr">37: </span>        cnt++;
<span class="linenr">38: </span>      }
<span class="linenr">39: </span>    }<span style="color: #20b2aa; font-weight: bold;">catch</span>(<span style="color: #9370db;">Exception</span> <span style="color: #9acd32;">e</span>) {
<span class="linenr">40: </span>      System.out.println(e);
<span class="linenr">41: </span>    }
<span class="linenr">42: </span>    System.out.println(String.join(<span style="color: #ffa07a;">"\t"</span>,head));
<span class="linenr">43: </span>    System.out.println(data.get(0).get(<span style="color: #ffa07a;">"name"</span>));
<span class="linenr">44: </span>    <span style="color: #cd853f;">// </span><span style="color: #cd853f;">System.exit(0);  // &#32066;&#12431;&#12427;&#12392;&#12365;</span>
<span class="linenr">45: </span>
<span class="linenr">46: </span>    <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#12501;&#12449;&#12452;&#12523;&#26360;&#12365;&#20986;&#12375;</span>
<span class="linenr">47: </span>    <span style="color: #20b2aa; font-weight: bold;">try</span> {
<span class="linenr">48: </span>      <span style="color: #9370db;">File</span> <span style="color: #9acd32;">ofh</span>          = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">File</span>(ofile);
<span class="linenr">49: </span>      <span style="color: #9370db;">FileWriter</span> <span style="color: #9acd32;">fw</span>     = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">FileWriter</span>(ofh);
<span class="linenr">50: </span>      <span style="color: #9370db;">BufferedWriter</span> <span style="color: #9acd32;">bw</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">BufferedWriter</span>(fw);
<span class="linenr">51: </span>      <span style="color: #9370db;">PrintWriter</span> <span style="color: #9acd32;">pw</span>    = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">PrintWriter</span>(bw);
<span class="linenr">52: </span>      <span style="color: #9370db;">String</span> <span style="color: #9acd32;">prnt</span>=String.join(<span style="color: #ffa07a;">"\t"</span>,head)+<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">53: </span>      <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">Map</span> <span style="color: #9acd32;">mp</span> : data) {       <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#25313;&#24373; for</span>
<span class="linenr">54: </span>        <span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #9370db;">String</span> <span style="color: #9acd32;">s</span> : head) {   <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#33510;&#32905;&#12398;&#31574;</span>
<span class="linenr">55: </span>          prnt+=mp.get(s)+<span style="color: #ffa07a;">"\t"</span>;
<span class="linenr">56: </span>        }
<span class="linenr">57: </span>        prnt.trim();  <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#20808;&#38957;, &#26368;&#24460;&#12398;&#31354;&#30333;&#12434;&#21462;&#12426;&#38500;&#12367;</span>
<span class="linenr">58: </span>        prnt+=<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">59: </span>      }
<span class="linenr">60: </span>      System.out.print(prnt);
<span class="linenr">61: </span>      pw.print(prnt);
<span class="linenr">62: </span>      pw.close();
<span class="linenr">63: </span>    }<span style="color: #20b2aa; font-weight: bold;">catch</span>(<span style="color: #9370db;">Exception</span> <span style="color: #9acd32;">e</span>) {
<span class="linenr">64: </span>      System.out.println(e);
<span class="linenr">65: </span>    }
<span class="linenr">66: </span>  }
<span class="linenr">67: </span>}
</pre>
</div>

<pre class="example">
name  age origin  gender  idata fdata type
foo
name  age origin  gender  idata fdata type
foo 10  jpn M 50  0.25  X 
bar 30  usa F 25  0.38  P 
hoge  10  jpn F 4 1 P 
fuga  40  eng M     X 
fuga  35    F 9 0.1 X
</pre>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> かんそう</h2>
<div class="outline-text-2" id="text-8">
<p>
perl, python, ruby は似たような感じ.<br  />
ruby は書きやすかった. きっちりしてる感じ.<br  />
ruby に比べると python はやっぱり何か, 開きっぱなしで閉じてない感じがいまんとこしっくりこないんだけどなぁ.<br  />
常に何か忘れてるような, そんな一抹の不安を覚えたりします. 慣れればなんともないんでしょーか.<br  />
変数のスコープもよくわかんないし&#x2026;<br  />
Julia も上記の言語と同じような感じでいけるのかなぁと思っていたのですが, 何かいちいち勝手が違う感じ.<br  />
こんな感じでうまくいくかな, という適当さが全然通用しなかった. python, ruby は適当にやっても何とかなったんだけど&#x2026;<br  />
色々と調べることが多かった.<br  />
つーか文字列の連結が "*" って意味わかんないような&#x2026; こういうの検索とかで探しにくいから困るんだよなぁ.<br  />
"." か "+" か, 最悪 "&amp;" とか, わかりやすい感じにして欲しいなぁ&#x2026; あるいは concat とか.<br  />
R, Java はおまけでやってみましたが, いまいちうまく比較できなかったのでやらなくてもよかったかも.<br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Julia Essentials のまとめ]]></title>
    <link href="http://saito1369.github.io/blog/2017-03-18-0103_Julia_Essentials.html"/>
    <updated>2017-03-18T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/0103_Julia_Essentials</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Common Data Types</a>
<ul>
<li><a href="#sec-1-1">1.1. 真偽値</a>
<ul>
<li><a href="#sec-1-1-1">1.1.1. julia</a></li>
<li><a href="#sec-1-1-2">1.1.2. perl</a></li>
<li><a href="#sec-1-1-3">1.1.3. python</a></li>
<li><a href="#sec-1-1-4">1.1.4. R</a></li>
<li><a href="#sec-1-1-5">1.1.5. Ruby</a></li>
<li><a href="#sec-1-1-6">1.1.6. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-2">1.2. 整数及び浮動小数点</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1. julia</a></li>
<li><a href="#sec-1-2-2">1.2.2. perl</a></li>
<li><a href="#sec-1-2-3">1.2.3. python</a></li>
<li><a href="#sec-1-2-4">1.2.4. R</a></li>
<li><a href="#sec-1-2-5">1.2.5. ruby</a></li>
<li><a href="#sec-1-2-6">1.2.6. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-3">1.3. 文字列</a></li>
<li><a href="#sec-1-4">1.4. タプル</a>
<ul>
<li><a href="#sec-1-4-1">1.4.1. julia</a></li>
<li><a href="#sec-1-4-2">1.4.2. python</a></li>
<li><a href="#sec-1-4-3">1.4.3. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-5">1.5. 配列</a>
<ul>
<li><a href="#sec-1-5-1">1.5.1. julia</a></li>
<li><a href="#sec-1-5-2">1.5.2. perl</a></li>
<li><a href="#sec-1-5-3">1.5.3. python</a></li>
<li><a href="#sec-1-5-4">1.5.4. R</a></li>
<li><a href="#sec-1-5-5">1.5.5. ruby</a></li>
<li><a href="#sec-1-5-6">1.5.6. numpy</a></li>
<li><a href="#sec-1-5-7">1.5.7. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-1-6">1.6. 辞書(hash)</a>
<ul>
<li><a href="#sec-1-6-1">1.6.1. julia</a></li>
<li><a href="#sec-1-6-2">1.6.2. perl</a></li>
<li><a href="#sec-1-6-3">1.6.3. python</a></li>
<li><a href="#sec-1-6-4">1.6.4. ruby</a></li>
<li><a href="#sec-1-6-5">1.6.5. js</a></li>
<li><a href="#sec-1-6-6">1.6.6. まとめ</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-2">2. Basic file I/O</a></li>
<li><a href="#sec-3">3. 繰り返し</a>
<ul>
<li><a href="#sec-3-1">3.1. julia</a></li>
<li><a href="#sec-3-2">3.2. perl</a></li>
<li><a href="#sec-3-3">3.3. python</a></li>
<li><a href="#sec-3-4">3.4. ruby</a></li>
<li><a href="#sec-3-5">3.5. R</a></li>
<li><a href="#sec-3-6">3.6. js</a></li>
<li><a href="#sec-3-7">3.7. まとめ</a></li>
<li><a href="#sec-3-8">3.8. 内包表記</a>
<ul>
<li><a href="#sec-3-8-1">3.8.1. julia</a></li>
<li><a href="#sec-3-8-2">3.8.2. python</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-4">4. 比較</a>
<ul>
<li><a href="#sec-4-1">4.1. julia</a></li>
<li><a href="#sec-4-2">4.2. perl</a></li>
<li><a href="#sec-4-3">4.3. python</a></li>
<li><a href="#sec-4-4">4.4. ruby</a></li>
<li><a href="#sec-4-5">4.5. R</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 関数</a>
<ul>
<li><a href="#sec-5-1">5.1. julia</a></li>
<li><a href="#sec-5-2">5.2. まとめ</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-03-18 Sat 15:18&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 19:19&gt;</span></span><br  />
</p>
<p>
<a href="https://lectures.quantecon.org/jl/julia_essentials.html">https://lectures.quantecon.org/jl/julia_essentials.html</a><br  />
をもとにして, julia 言語での書き方を見てみたのでその記録.<br  />
混乱は忘却の素ともいうので, 自分がちょっとだけ知ってる他の言語での書き方との違いを比較しながらみていこうと思う.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Common Data Types</h2>
<div class="outline-text-2" id="text-1">
<p>
まずは基本的な型についてみていく.<br  />
Julia は他の script 言語とひかくして<br  />
型の取扱いがちょっとめんどくさい印象.<br  />
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> 真偽値</h3>
<div class="outline-text-3" id="text-1-1">
<p>
true, false は言語によって微妙に取扱いがことなる.<br  />
0 を true/false どちらに入れるかとか?<br  />
各言語でどーなってるのか比較.<br  />
</p>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="section-number-4">1.1.1</span> julia</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
typeof: Bool<br  />
値:   true, false<br  />
</p>

<p>
julia では Boolian 値は true, false (全部小文字)<br  />
0, 1 は自動で Bool に直してくれない(java と同じ).<br  />
いちいち convert(型, 値) としないといけないようです.<br  />
</p>

<p>
<a href="http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/">http://docs.julialang.org/en/release-0.4/manual/conversion-and-promotion/</a><br  />
julia のこの型指定, これからも色々と出て来るみたいだけどちょっと面倒なかんじ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">true, false &#12364;&#20104;&#32004;&#35486;(&#23567;&#25991;&#23383;&#12391;&#26360;&#12367;)</span>
x=<span style="color: #1e90ff;">true</span>
println(x)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12399; Bool &#22411;</span>
println(typeof(x))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12363;&#12369;&#12427;.</span>
y= 1 &gt; 2
println(y)

<span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"T+F = %d\n"</span>,<span style="color: #1e90ff;">true</span> + <span style="color: #1e90ff;">false</span>)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25968;&#20516;&#12395;&#30452;&#12377;&#12392; true &#12399; 1, false &#12399; 0</span>
<span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"sum=%d\n"</span>,sum([<span style="color: #1e90ff;">true</span>,<span style="color: #1e90ff;">false</span>,<span style="color: #1e90ff;">false</span>,<span style="color: #1e90ff;">true</span>]))

<span style="color: #cd853f;">#</span><span style="color: #cd853f;">if(1) &#12392;&#12363;&#12420;&#12427;&#12392;  error &#12392;&#12394;&#12427;. &#20197;&#19979;&#12398;&#27096;&#12395;&#26360;&#12367;&#24517;&#35201;&#12364;&#12354;&#12427;.</span>
<span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,1))
    println(<span style="color: #ffa07a;">"1 is true"</span>)
<span style="color: #20b2aa; font-weight: bold;">end</span>

<span style="color: #cd853f;">#</span><span style="color: #cd853f;">if(0) &#12392;&#12363;&#26360;&#12367;&#12392;&#12371;&#12428;&#12418; error &#12392;&#12394;&#12427;</span>
<span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,0))
    println(<span style="color: #ffa07a;">"pass"</span>)
<span style="color: #20b2aa; font-weight: bold;">else</span>
    println(<span style="color: #ffa07a;">"0 is false"</span>)
<span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
true
Bool
false
T+F = 1
sum=2
1 is true
0 is false
</pre>
</div>
</div>
<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2"><span class="section-number-4">1.1.2</span> perl</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
perl には, true, false に相当する語句がない?<br  />
0, '0', undef, '', (), ('') は false<br  />
それ以外は                     true<br  />
</p>
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21442;&#29031;:</span>
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">http://stackoverflow.com/questions/1036347/how-do-i-use-boolean-variables-in-perl</span>
<span class="linenr">5: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">"true\n"</span>  <span style="color: #20b2aa; font-weight: bold;">if</span>(1);
<span class="linenr">6: </span><span style="color: #ff83fa;">print</span> <span style="color: #ffa07a;">"false\n"</span> <span style="color: #20b2aa; font-weight: bold;">unless</span>(0);
</pre>
</div>

<pre class="example">
true
false
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-3" class="outline-4">
<h4 id="sec-1-1-3"><span class="section-number-4">1.1.3</span> python</h4>
<div class="outline-text-4" id="text-1-1-3">
<p>
python は, True, False(一文字目が大文字)<br  />
1 は True. 0 は False<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">True</span>):
<span class="linenr"> 2: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"True"</span>)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">False</span>):
<span class="linenr"> 5: </span>    <span style="color: #20b2aa; font-weight: bold;">pass</span>
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr"> 7: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"False"</span>)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1):
<span class="linenr">10: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"1 is True"</span>)
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0):
<span class="linenr">13: </span>    <span style="color: #20b2aa; font-weight: bold;">pass</span>
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">else</span>:
<span class="linenr">15: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"0 is False"</span>)
</pre>
</div>

<pre class="example">
True
False
1 is True
0 is False
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-4" class="outline-4">
<h4 id="sec-1-1-4"><span class="section-number-4">1.1.4</span> R</h4>
<div class="outline-text-4" id="text-1-1-4">
<p>
R は TRUE, FALSE (全部大文字)<br  />
1 は TRUE, 0 は FALSE<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">TRUE</span>) {
<span class="linenr"> 2: </span>    print(<span style="color: #ffa07a;">"TRUE"</span>)
<span class="linenr"> 3: </span>}
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">FALSE</span>) {
<span class="linenr"> 5: </span>    print(<span style="color: #ffa07a;">"pass"</span>)
<span class="linenr"> 6: </span>} <span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr"> 7: </span>    print(<span style="color: #ffa07a;">"FALSE"</span>)
<span class="linenr"> 8: </span>}
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1) {
<span class="linenr">10: </span>    print(<span style="color: #ffa07a;">"1 is TRUE"</span>)
<span class="linenr">11: </span>}
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0) {
<span class="linenr">13: </span>    print(<span style="color: #ffa07a;">"pass"</span>)
<span class="linenr">14: </span>}<span style="color: #20b2aa; font-weight: bold;">else</span> {
<span class="linenr">15: </span>    print(<span style="color: #ffa07a;">"0 is FALSE"</span>)
<span class="linenr">16: </span>}
</pre>
</div>

<pre class="example">
[1] "TRUE"
[1] "FALSE"
[1] "1 is TRUE"
[1] "0 is FALSE"
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-5" class="outline-4">
<h4 id="sec-1-1-5"><span class="section-number-4">1.1.5</span> Ruby</h4>
<div class="outline-text-4" id="text-1-1-5">
<p>
Ruby は true/TRUE どっちでもいいのか?<br  />
他の言語と違い 0 は true!! (何かやな感じ)<br  />
false と nil 以外は true として扱われる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #9370db;">TRUE</span>)
<span class="linenr"> 2: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"TRUE"</span>)
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">true</span>)
<span class="linenr"> 6: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"true"</span>)
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(<span style="color: #1e90ff;">false</span>)
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">else</span>
<span class="linenr">11: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"false"</span>)
<span class="linenr">12: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">13: </span>
<span class="linenr">14: </span><span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"FALSE"</span>)        <span style="color: #20b2aa; font-weight: bold;">unless</span>(<span style="color: #9370db;">FALSE</span>)
<span class="linenr">15: </span><span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"nil is FALSE"</span>) <span style="color: #20b2aa; font-weight: bold;">unless</span>(<span style="color: #1e90ff;">nil</span>)
<span class="linenr">16: </span>
<span class="linenr">17: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(0)
<span class="linenr">18: </span>   <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"0 is true!!"</span>)
<span class="linenr">19: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
TRUE
true
false
FALSE
nil is FALSE
0 is true!!
</pre>
</div>
</div>

<div id="outline-container-sec-1-1-6" class="outline-4">
<h4 id="sec-1-1-6"><span class="section-number-4">1.1.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-1-6">
<p>
微妙に違ってて間違えそう.<br  />
表でまとめておく.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">true を示すもじ</th>
<th scope="col" class="left">0 の扱い</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">true</td>
<td class="left">false (convert(Bool,0)</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">1</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">True</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">TRUE</td>
<td class="left">false</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">true/TRUE</td>
<td class="left">true</td>
</tr>
</tbody>
</table>


<p>
もう既にまとめがあったのでこっちを参照した方がよいでしょう.<br  />
<a href="http://blog.mirakui.com/entry/20090604/truefalse">http://blog.mirakui.com/entry/20090604/truefalse</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> 整数及び浮動小数点</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="section-number-4">1.2.1</span> julia</h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
typeof: Int64, Float64<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">1.0 &#12392;&#26360;&#12367;&#12392;&#33258;&#21205;&#12391; Float64</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1   &#12392;&#26360;&#12367;&#12392;&#33258;&#21205;&#12391; Int64</span>
println(<span style="color: #ffa07a;">"type of 1.0="</span>,typeof(1.0))
println(<span style="color: #ffa07a;">"type of 1  ="</span>,typeof(1))

x=2
y=1.0
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#33258;&#21205;&#12391;&#22411;&#12434; Float64 &#12395;&#12375;&#12390;&#12367;&#12428;&#12427;.</span>
println(<span style="color: #ffa07a;">"x*y="</span>,x*y)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#32047;&#20055;&#12399; ^ &#12391;&#26360;&#12367;(** &#12391;&#12399;&#12394;&#12356;. LaTeX &#25968;&#24335;)</span>
println(<span style="color: #ffa07a;">"x^2="</span>,x^2)
println(<span style="color: #ffa07a;">"y/x="</span>,y/x)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2*x &#12399; 2x &#12392;&#26360;&#12369;&#12427;(&#24517;&#35201;&#12354;&#12427;&#12398;&#12363;&#12394;...)</span>
println(<span style="color: #ffa07a;">"2x-3y="</span>,2x-3y)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">+, * &#12434;&#38306;&#25968;&#12392;&#12415;&#12394;&#12375;&#12390;&#24460;&#12429;&#12395;&#24341;&#25968;, &#30340;&#12394;&#26360;&#12365;&#26041;&#12418;&#12391;&#12365;&#12427;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12394;&#12427;&#12411;&#12393;. &#19968;&#36011;&#12375;&#12390;&#12390;&#12356;&#12356;&#12424;&#12358;&#12394;.</span>
println(<span style="color: #ffa07a;">"10+20="</span>,+(10,20))
println(<span style="color: #ffa07a;">"10*20="</span>,*(10,20))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35079;&#32032;&#25968; im</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12354;&#12435;&#12414;&#12426;&#20351;&#12431;&#12394;&#12356;&#12392;&#24605;&#12358;&#12369;&#12393;&#12392;&#12426;&#12354;&#12360;&#12378;&#26360;&#12356;&#12390;&#12362;&#12367;.</span>
x=1+2im
println(<span style="color: #ffa07a;">"1+2i="</span>,x)
y=1-2im
println(<span style="color: #ffa07a;">"1-2i="</span>,y)
x*y
println(<span style="color: #ffa07a;">"x*y="</span>,x*y)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">"" &#12398;&#20013;&#12391;&#22793;&#25968;&#12434;&#26360;&#12363;&#12379;&#12383;&#12356;&#12392;&#12365;&#12399;, $&#22793;&#25968; &#12392;&#26360;&#12367;&#12392;&#12424;&#12356;.</span>
println(<span style="color: #ffa07a;">"x=$x"</span>)
println(<span style="color: #ffa07a;">"x+y=$(x+y)"</span>)
</pre>
</div>

<pre class="example">
type of 1.0=Float64
type of 1  =Int64
x*y=2.0
x^2=4
y/x=0.5
2x-3y=1.0
10+20=30
10*20=200
1+2i=1 + 2im
1-2i=1 - 2im
x*y=5 + 0im
x=1 + 2im
x+y=2 + 0im
</pre>

<p>
julia が他のと違うのは, 2x 的な表現で書けること位.<br  />
何か気持ち悪いので多分使わないと思うけど&#x2026;<br  />
</p>

<p>
以下別の言語でどーかくのか.<br  />
累乗だけ書いておきます.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2"><span class="section-number-4">1.2.2</span> perl</h4>
<div class="outline-text-4" id="text-1-2-2">
<div class="org-src-container">

<pre class="src src-perl"><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$x</span>=10;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$y</span>=$x**3;
<span style="color: #ff83fa;">print</span> $y.<span style="color: #ffa07a;">"\n"</span>;
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3"><span class="section-number-4">1.2.3</span> python</h4>
<div class="outline-text-4" id="text-1-2-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #9acd32;">x</span>=10
<span style="color: #9acd32;">y</span>=x**3
<span style="color: #20b2aa; font-weight: bold;">print</span>(y)
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-4" class="outline-4">
<h4 id="sec-1-2-4"><span class="section-number-4">1.2.4</span> R</h4>
<div class="outline-text-4" id="text-1-2-4">
<div class="org-src-container">

<pre class="src src-R">x <span style="color: #1e90ff;">&lt;-</span> 10
y <span style="color: #1e90ff;">&lt;-</span> x**3
y
z <span style="color: #1e90ff;">&lt;-</span> x^3  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12428;&#12418;&#12356;&#12369;&#12427;&#65281;&#65281;</span>
z
</pre>
</div>

<pre class="example">
[1] 1000
[1] 1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-5" class="outline-4">
<h4 id="sec-1-2-5"><span class="section-number-4">1.2.5</span> ruby</h4>
<div class="outline-text-4" id="text-1-2-5">
<div class="org-src-container">

<pre class="src src-ruby">x = 10
y = x**3
<span style="color: #76ee00;">puts</span> y
</pre>
</div>

<pre class="example">
1000
</pre>
</div>
</div>

<div id="outline-container-sec-1-2-6" class="outline-4">
<h4 id="sec-1-2-6"><span class="section-number-4">1.2.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-2-6">
<p>
一応まとめておきます.<br  />
julia だけ累乗は 2^3 みたいに書くらしい.<br  />
こういうオリジナリティいらないんだけどなー(注: R でも同じように書けるっぽい).<br  />
ついつい 2**3 って書いてしまいそう.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">累乗</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">2^3</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">2**3</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">2**3</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 文字列</h3>
<div class="outline-text-3" id="text-1-3">
<p>
typeof: String<br  />
</p>

<p>
文字列操作は自分の場合 perl でやったほうが早そう.<br  />
なので julia での書き方だけさらっと見ておく.<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#36899;&#32080;&#12395;&#12399;, &#20309;&#12392; "*" &#12434;&#20351;&#12358;.</span>
<span class="linenr"> 2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12391;&#12371;&#12398;&#35352;&#21495;&#12394;&#12398;&#12363;...</span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12431;&#12363;&#12425;&#12435;&#12369;&#12393;&#20309;&#12363;&#28145;&#12356;&#29702;&#30001;&#12364;&#12354;&#12427;&#12435;&#12384;&#12429;&#12358;.</span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12388;&#12540;&#12363; perl &#12392;&#21516;&#12376; "." &#12392;&#12363; python, Java &#12398; "+" &#12391;&#12356;&#12356;&#12424;&#12358;&#12394;...</span>
<span class="linenr"> 5: </span>fb = <span style="color: #ffa07a;">"foo"</span> * <span style="color: #ffa07a;">"bar"</span>
<span class="linenr"> 6: </span>println(<span style="color: #ffa07a;">"concat foo and  bar = foo * bar: "</span>,fb)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span>s=<span style="color: #ffa07a;">"Charlie don't surf"</span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">perl &#12391;&#12418;&#12362;&#12394;&#12376;&#12415;&#12398; split &#38306;&#25968;</span>
<span class="linenr">10: </span>println(split(s))
<span class="linenr">11: </span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#32622;&#25563;</span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12398;&#36794;&#12399;&#23455;&#38555;&#12395;&#20351;&#12358;&#12424;&#12358;&#12395;&#12394;&#12387;&#12390;&#12363;&#12425;&#35443;&#12375;&#12367;&#35519;&#12409;&#12424;&#12358;</span>
<span class="linenr">14: </span>println(replace(s,<span style="color: #ffa07a;">"surf"</span>,<span style="color: #ffa07a;">"ski"</span>))
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">split(&#25991;&#23383;&#21015;,&#20998;&#21106;&#25991;&#23383;)</span>
<span class="linenr">17: </span>println(split(<span style="color: #ffa07a;">"fee,fi,fo"</span>,<span style="color: #ffa07a;">","</span>))
<span class="linenr">18: </span>
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">trim</span>
<span class="linenr">20: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;&#24460;&#12398;&#31354;&#30333;&#21462;&#12426;&#38500;&#12365;&#12395;&#12399; strip &#12392;&#12356;&#12358;&#38306;&#25968;&#12364;&#12354;&#12427;.</span>
<span class="linenr">21: </span>println(strip(<span style="color: #ffa07a;">" foobar "</span>))
<span class="linenr">22: </span>
<span class="linenr">23: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12398;&#20013;&#12363;&#12425;&#25968;&#20516;&#12434;&#12415;&#12388;&#12369;&#12427;.</span>
<span class="linenr">24: </span>println(match(r<span style="color: #ffa07a;">"(\d+)"</span>,<span style="color: #ffa07a;">"Top 10"</span>))
</pre>
</div>

<pre class="example">
concat foo and  bar = foo * bar: foobar
SubString{String}["Charlie","don't","surf"]
Charlie don't ski
SubString{String}["fee","fi","fo"]
foobar
RegexMatch("10", 1="10")
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> タプル</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1"><span class="section-number-4">1.4.1</span> julia</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
typeof: Tuple, Array<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">tuple &#12398;&#23459;&#35328;</span>
<span class="linenr">2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x = ("foo","bar") &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x = "foo", "bar"  &#12391;&#12418;&#12424;&#12356;.</span>
<span class="linenr">4: </span>x=tuple(<span style="color: #ffa07a;">"foo"</span>,<span style="color: #ffa07a;">"bar"</span>)
<span class="linenr">5: </span>println(x)
<span class="linenr">6: </span>println(typeof(x))
<span class="linenr">7: </span>w1, w2 = x
<span class="linenr">8: </span>println(w1)
<span class="linenr">9: </span>print(length(x))
</pre>
</div>

<pre class="example">
("foo","bar")
Tuple{String,String}
foo
2
</pre>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2"><span class="section-number-4">1.4.2</span> python</h4>
<div class="outline-text-4" id="text-1-4-2">
<p>
python での宣言<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #9acd32;">x</span>=<span style="color: #76ee00;">tuple</span>([1,2,3])
<span style="color: #9acd32;">y</span>=(2,3,4)
<span style="color: #9acd32;">z</span>=x+y
<span style="color: #20b2aa; font-weight: bold;">print</span>(z)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">type</span>(z))
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(z))
<span style="color: #20b2aa; font-weight: bold;">for</span> p <span style="color: #20b2aa; font-weight: bold;">in</span> z:
    <span style="color: #20b2aa; font-weight: bold;">print</span>(p)
</pre>
</div>

<pre class="example">
(1, 2, 3, 2, 3, 4)
&lt;class 'tuple'&gt;
6
1
2
3
2
3
4
</pre>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3"><span class="section-number-4">1.4.3</span> まとめ</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
まとめ表です.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">宣言</th>
<th scope="col" class="left">長さ</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">tuple(1,2,3)</td>
<td class="left">length(x)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">tuple([1,2,3])</td>
<td class="left">len(x)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> 配列</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1"><span class="section-number-4">1.5.1</span> julia</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
julia では配列の添字は 1 はじまり!!<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12398;&#23459;&#35328;</span>
<span class="linenr">2: </span>x= [10,20,30,40]
<span class="linenr">3: </span>println(x)
<span class="linenr">4: </span>println(typeof(x))
<span class="linenr">5: </span>println(<span style="color: #ffa07a;">"x[end  ]="</span>,x[<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">6: </span>println(<span style="color: #ffa07a;">"x[end-1]="</span>,x[<span style="color: #20b2aa; font-weight: bold;">end</span>-1])
<span class="linenr">7: </span>println(<span style="color: #ffa07a;">"x[1:3]  ="</span>,x[1:3])
<span class="linenr">8: </span>println(<span style="color: #ffa07a;">"x[2:end]="</span>,x[2:<span style="color: #20b2aa; font-weight: bold;">end</span>])
</pre>
</div>

<pre class="example">
[10,20,30,40]
Array{Int64,1}
x[end  ]=40
x[end-1]=30
x[1:3]  =[10,20,30]
x[2:end]=[20,30,40]
</pre>

<div class="org-src-container">

<pre class="src src-julia"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25991;&#23383;&#21015;&#12392;&#37197;&#21015;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37096;&#20998;&#25991;&#23383;&#21015;</span>
println(<span style="color: #ffa07a;">"foobar"</span>[3:<span style="color: #20b2aa; font-weight: bold;">end</span>])
</pre>
</div>

<pre class="example">
obar
</pre>

<p>
配列に関する書き方いろいろ.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12395;&#12388;&#12356;&#12390;</span>
<span class="linenr"> 2: </span>a=[1,2,3]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr"> 3: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"array a = %s\n"</span>, a)
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">"," &#12434;&#12388;&#12369;&#12394;&#12356;&#12391;&#12363;&#12367;&#12371;&#12392;&#12418;&#12391;&#12365;&#12427;.</span>
<span class="linenr"> 6: </span>b=[1 2 3]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12505;&#12463;&#12488;&#12523;&#12395;&#12394;&#12427;.</span>
<span class="linenr"> 7: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"array b = %s\n"</span>, b)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12399;&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#23459;&#35328;</span>
<span class="linenr">10: </span>mat=[1 4 7; 2 5 8; 3 6 9]
<span class="linenr">11: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[2,1]  =%d\n"</span>,mat[2,1]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#34892; 1 &#21015;&#30446;</span>
<span class="linenr">12: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[1,3]  =%d\n"</span>,mat[1,3])
<span class="linenr">13: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[1,end]=%d\n"</span>,mat[1,<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">14: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[4]    =%d\n"</span>,mat[4])
<span class="linenr">15: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat[end]  =%d\n"</span>,mat[<span style="color: #20b2aa; font-weight: bold;">end</span>])
<span class="linenr">16: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat=%s\n"</span>,mat)
<span class="linenr">17: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat'=%s\n"</span>,mat')  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36578;&#32622;&#34892;&#21015; &#12395;&#12399; ' &#12434;&#12388;&#12369;&#12427;</span>
<span class="linenr">18: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mat'=%s\n"</span>,transpose(mat)) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">transpose &#38306;&#25968;&#12391;&#12418;&#12424;&#12356;</span>
<span class="linenr">19: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">exit()</span>
<span class="linenr">20: </span>
<span class="linenr">21: </span>col=[1,2,3] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr">22: </span>row=[1 2 3] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12505;&#12463;&#12488;&#12523;</span>
<span class="linenr">23: </span>
<span class="linenr">24: </span>inn=row*col <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12388;&#12375;&#12363;&#35201;&#32032;&#12434;&#25345;&#12383;&#12394;&#12356;&#37197;&#21015;</span>
<span class="linenr">25: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"inner product=%d\n"</span>,inn[1]) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35201;&#32032;&#12399; 1 &#12363;&#12425;&#22987;&#12414;&#12427;.</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22411;&#12398;&#34920;&#31034;</span>
<span class="linenr">28: </span>println(typeof(inn))
<span class="linenr">29: </span>
<span class="linenr">30: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#21021;&#26399;&#21270;</span>
<span class="linenr">31: </span>xs = zeros(<span style="color: #9370db;">Float64</span>,5)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#37197;&#21015;&#12434; 0 &#12391;&#21021;&#26399;&#21270;</span>
<span class="linenr">32: </span>print(<span style="color: #ffa07a;">"xs ="</span>)
<span class="linenr">33: </span>println(xs)
<span class="linenr">34: </span>
<span class="linenr">35: </span>xs2=[0.0 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:5] <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12522;&#12473;&#12488;&#20869;&#21253;&#34920;&#35352;</span>
<span class="linenr">36: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"xs2=%s\n"</span>,xs2)
<span class="linenr">37: </span>
<span class="linenr">38: </span>x1=ones(<span style="color: #9370db;">Float64</span>,5) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12391;&#21021;&#26399;&#21270;</span>
<span class="linenr">39: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x1=ones(5)       # Float64 &#12399;&#30465;&#30053;&#21487;&#33021;</span>
<span class="linenr">40: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"x1=%s\n"</span>,x1)
<span class="linenr">41: </span>
<span class="linenr">42: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21336;&#20301;&#34892;&#21015;</span>
<span class="linenr">43: </span>mt0=eye(<span style="color: #9370db;">Float64</span>,3)
<span class="linenr">44: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"mt0=%s\n"</span>,mt0)
<span class="linenr">45: </span>
<span class="linenr">46: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">3x4 &#34892;&#21015;(&#21021;&#26399;&#21270;&#12394;&#12375;)</span>
<span class="linenr">47: </span>m34=<span style="color: #9370db;">Array</span>(<span style="color: #9370db;">Float64</span>,(3,4))
<span class="linenr">48: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36969;&#24403;&#12394;&#20516;&#12364;&#20837;&#12387;&#12390;&#12427;</span>
<span class="linenr">49: </span><span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"m34=%s\n"</span>,m34)
</pre>
</div>

<pre class="example">
array a = [1,2,3]
array b = [1 2 3]
mat[2,1]  =2
mat[1,3]  =7
mat[1,end]=7
mat[4]    =4
mat[end]  =9
mat=[1 4 7; 2 5 8; 3 6 9]
mat'=[1 2 3; 4 5 6; 7 8 9]
mat'=[1 2 3; 4 5 6; 7 8 9]
inner product=14
Array{Int64,1}
xs =[0.0,0.0,0.0,0.0,0.0]
xs2=[0.0,0.0,0.0,0.0,0.0]
x1=[1.0,1.0,1.0,1.0,1.0]
mt0=[1.0 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 1.0]
m34=[2.22637e-314 2.22637e-314 0.0 0.0; 2.22619e-314 2.22619e-314 0.0 0.0; 2.22619e-314 2.22619e-314 0.0 0.0]
</pre>

<p>
他言語との比較用<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>ar = [ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9 ]
<span class="linenr">2: </span>println(length(ar))
<span class="linenr">3: </span>push!(ar,1)
<span class="linenr">4: </span>unshift!(ar,2)
<span class="linenr">5: </span>pop!(ar)
<span class="linenr">6: </span>shift!(ar)
<span class="linenr">7: </span>ax=[1,2]
<span class="linenr">8: </span>append!(ar,ax)
<span class="linenr">9: </span>println(ar)
</pre>
</div>

<pre class="example">
9
[2,4,6,8,10,12,14,16,18,1,2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2"><span class="section-number-4">1.5.2</span> perl</h4>
<div class="outline-text-4" id="text-1-5-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">Data::Dumper</span>;
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$arr</span>=[1 .. 9];
<span class="linenr"> 6: </span><span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span> = <span style="color: #ff83fa;">map</span> {$_*2} <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>;
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #ff83fa;">print</span> <span style="color: #ff83fa;">scalar</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>).<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr"> 9: </span><span style="color: #ff83fa;">push</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,1);            <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429; &#12367;&#12387;&#12388;&#12369;</span>
<span class="linenr">10: </span><span style="color: #ff83fa;">unshift</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,1);         <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;   &#12367;&#12387;&#12388;&#12369;</span>
<span class="linenr">11: </span><span style="color: #ff83fa;">pop</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>);               <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429; &#21066;&#38500;</span>
<span class="linenr">12: </span><span style="color: #ff83fa;">shift</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>);             <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;   &#21066;&#38500;</span>
<span class="linenr">13: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ax</span>=(1,2);
<span class="linenr">14: </span><span style="color: #ff83fa;">push</span>(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@</span><span style="color: #9acd32;">$arr</span>,<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ax</span>);
<span class="linenr">15: </span>
<span class="linenr">16: </span><span style="color: #ff83fa;">print</span> Data::Dumper-&gt;Dump([$arr]);
</pre>
</div>

<pre class="example">
9
$VAR1 = [
          2,
          4,
          6,
          8,
          10,
          12,
          14,
          16,
          18,
          1,
          2
        ];
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-3" class="outline-4">
<h4 id="sec-1-5-3"><span class="section-number-4">1.5.3</span> python</h4>
<div class="outline-text-4" id="text-1-5-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #9acd32;">arr</span> = [ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10)]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(arr))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#38263;&#12373;</span>
<span class="linenr">3: </span>arr.append(1)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">4: </span>arr.insert(0,2)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;(0 &#30058;&#30446;)&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">5: </span>arr.pop()        <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12434;&#21066;&#38500;</span>
<span class="linenr">6: </span>arr.pop(0)       <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21069;(0 &#30058;&#30446;)&#12434;&#21066;&#38500;</span>
<span class="linenr">7: </span><span style="color: #9acd32;">ax</span> = [1,2]
<span class="linenr">8: </span>arr.extend(ax)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#24460;&#12429;&#12395;&#12367;&#12387;&#12388;&#12369;&#12427;</span>
<span class="linenr">9: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(arr)
</pre>
</div>

<pre class="example">
9
[2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-4" class="outline-4">
<h4 id="sec-1-5-4"><span class="section-number-4">1.5.4</span> R</h4>
<div class="outline-text-4" id="text-1-5-4">
<p>
R も添え字は 1 からはじまります.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span class="linenr"> 1: </span>ar <span style="color: #1e90ff;">&lt;-</span> 2*seq(1:9)
<span class="linenr"> 2: </span>length(ar)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">push</span>
<span class="linenr"> 5: </span>ar <span style="color: #1e90ff;">&lt;-</span> append(ar,1)
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">unshift</span>
<span class="linenr"> 7: </span>ar <span style="color: #1e90ff;">&lt;-</span> append(ar,2,1)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">append(array,value,index)</span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">pop</span>
<span class="linenr"> 9: </span>ar <span style="color: #1e90ff;">&lt;-</span> ar[-length(ar)]
<span class="linenr">10: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">shift</span>
<span class="linenr">11: </span>ar <span style="color: #1e90ff;">&lt;-</span> ar[-1]
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">extend</span>
<span class="linenr">13: </span>ax <span style="color: #1e90ff;">&lt;-</span>c(1,2)
<span class="linenr">14: </span>ar <span style="color: #1e90ff;">&lt;-</span>append(ar,ax,length(ar))
<span class="linenr">15: </span>ar
</pre>
</div>

<pre class="example">
[1] 9
 [1]  2  4  6  8 10 12 14 16 18  1  2
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-5" class="outline-4">
<h4 id="sec-1-5-5"><span class="section-number-4">1.5.5</span> ruby</h4>
<div class="outline-text-4" id="text-1-5-5">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr"> 1: </span>arr = [*1..9]
<span class="linenr"> 2: </span>arr = arr.map {|i| i*2}
<span class="linenr"> 3: </span><span style="color: #76ee00;">puts</span> arr.length
<span class="linenr"> 4: </span>arr.push(1)
<span class="linenr"> 5: </span>arr.unshift(2)
<span class="linenr"> 6: </span>arr.pop
<span class="linenr"> 7: </span>arr.shift
<span class="linenr"> 8: </span>ax = [1,2]
<span class="linenr"> 9: </span>arr.concat(ax)
<span class="linenr">10: </span><span style="color: #76ee00;">print</span>(arr)
</pre>
</div>

<pre class="example">
9
[2, 4, 6, 8, 10, 12, 14, 16, 18, 1, 2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-6" class="outline-4">
<h4 id="sec-1-5-6"><span class="section-number-4">1.5.6</span> numpy</h4>
<div class="outline-text-4" id="text-1-5-6">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">import</span> numpy <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span class="linenr"> 2: </span><span style="color: #9acd32;">ar</span> = np.array([ i*2 <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10)])
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(ar))
<span class="linenr"> 4: </span><span style="color: #9acd32;">ar</span> = np.append(ar,1)
<span class="linenr"> 5: </span><span style="color: #9acd32;">ar</span> = np.insert(ar,0,2)
<span class="linenr"> 6: </span><span style="color: #9acd32;">ar</span> = np.delete(ar,-1)
<span class="linenr"> 7: </span><span style="color: #9acd32;">ar</span> = np.delete(ar, 0)
<span class="linenr"> 8: </span><span style="color: #9acd32;">ax</span> = [1,2]
<span class="linenr"> 9: </span><span style="color: #9acd32;">ar</span> = np.append(ar,ax)
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(ar)
</pre>
</div>

<pre class="example">
9
[ 2  4  6  8 10 12 14 16 18  1  2]
</pre>
</div>
</div>

<div id="outline-container-sec-1-5-7" class="outline-4">
<h4 id="sec-1-5-7"><span class="section-number-4">1.5.7</span> まとめ</h4>
<div class="outline-text-4" id="text-1-5-7">
<p>
書き方が似ててややこしいので以下にまとめておく.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">length</th>
<th scope="col" class="left">push</th>
<th scope="col" class="left">unshift</th>
<th scope="col" class="left">pop</th>
<th scope="col" class="left">shift</th>
<th scope="col" class="left">extend</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">length(a)</td>
<td class="left">push!(a)</td>
<td class="left">unshift!(a)</td>
<td class="left">pop!(a)</td>
<td class="left">shift!(a)</td>
<td class="left">append!(a,x)</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">length(@a)</td>
<td class="left">push(@a,$x)</td>
<td class="left">unshift(@a,$x)</td>
<td class="left">pop(@a)</td>
<td class="left">shift(@a)</td>
<td class="left">push(@a,@x)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">len(a)</td>
<td class="left">a.append(x)</td>
<td class="left">a.insert(0,x)</td>
<td class="left">a.pop()</td>
<td class="left">a.pop(0)</td>
<td class="left">a.extend(x)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">length(a)</td>
<td class="left">append(a,1)</td>
<td class="left">append(a,x,1)</td>
<td class="left">a[-length(a)]</td>
<td class="left">a[-1]</td>
<td class="left">append(a,x,length(a))</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">a.length</td>
<td class="left">a.push(x)</td>
<td class="left">a.unshift(x)</td>
<td class="left">a.pop</td>
<td class="left">a.shift</td>
<td class="left">a.concat(x)</td>
</tr>

<tr>
<td class="left">numpy</td>
<td class="left">len(a)</td>
<td class="left">np.append(a,x)</td>
<td class="left">np.insert(a,0,x)</td>
<td class="left">np.delete(a,-1)</td>
<td class="left">np.delete(a,0)</td>
<td class="left">np.append(a,x)</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">a.length</td>
<td class="left">a.push(x)</td>
<td class="left">a.unshift(x)</td>
<td class="left">a.pop()</td>
<td class="left">a.shift()</td>
<td class="left">a.concat(x)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="section-number-3">1.6</span> 辞書(hash)</h3>
<div class="outline-text-3" id="text-1-6">
</div><div id="outline-container-sec-1-6-1" class="outline-4">
<h4 id="sec-1-6-1"><span class="section-number-4">1.6.1</span> julia</h4>
<div class="outline-text-4" id="text-1-6-1">
<p>
typeof: Dict<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">tuple &#12399;&#23567;&#25991;&#23383;&#12394;&#12398;&#12395; Dict &#12399;&#22823;&#25991;&#23383;. &#12362;&#12412;&#12360;&#12395;&#12367;&#12356;.</span>
<span class="linenr">2: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">{} &#12391;&#12399;&#12394;&#12367; () &#12391;&#22258;&#12416;.</span>
<span class="linenr">3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12450;&#12463;&#12475;&#12473;&#12399; hash["key"] &#12391;, &#37197;&#21015;&#12392;&#21516;&#12376;&#12424;&#12358;&#12394;&#26360;&#12365;&#26041;.</span>
<span class="linenr">4: </span>hash = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span> =&gt; <span style="color: #ffa07a;">"Frodo"</span>, <span style="color: #ffa07a;">"age"</span>=&gt;33)
<span class="linenr">5: </span>println(typeof(hash))
<span class="linenr">6: </span>println(<span style="color: #ffa07a;">"hash="</span>,hash)
<span class="linenr">7: </span>println(<span style="color: #ffa07a;">"name="</span>,hash[<span style="color: #ffa07a;">"name"</span>])
<span class="linenr">8: </span>println(<span style="color: #ffa07a;">"age ="</span>,hash[<span style="color: #ffa07a;">"age"</span>])
</pre>
</div>

<pre class="example">
Dict{String,Any}
hash=Dict{String,Any}(Pair{String,Any}("name","Frodo"),Pair{String,Any}("age",33))
name=Frodo
age =33
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-2" class="outline-4">
<h4 id="sec-1-6-2"><span class="section-number-4">1.6.2</span> perl</h4>
<div class="outline-text-4" id="text-1-6-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">Data::Dumper</span>;
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$hash</span>={<span style="color: #ffa07a;">name</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">age</span>=&gt;33};
<span class="linenr"> 5: </span><span style="color: #ff83fa;">print</span> Data::Dumper-&gt;Dump([$hash]);
<span class="linenr"> 6: </span><span style="color: #ff83fa;">print</span> $hash-&gt;{<span style="color: #ffa07a;">'name'</span>}.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr"> 7: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">print $hash-&gt;['name']."\n";  # &#12456;&#12521;&#12540;&#12392;&#12394;&#12427;.</span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20197;&#19979;&#12398;&#12424;&#12358;&#12395;&#12418;&#26360;&#12369;&#12427;.</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ff0000; background-color: #000080; font-weight: bold; font-style: italic;">%hash</span>=(<span style="color: #ffa07a;">name</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>, <span style="color: #ffa07a;">agen</span>=&gt;33);
<span class="linenr">10: </span><span style="color: #ff83fa;">print</span> <span style="color: #ff0000; background-color: #000080; font-weight: bold; font-style: italic;">$hash</span>{<span style="color: #ffa07a;">name</span>}.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">print </span><span style="color: #ffff00; background-color: #000080; font-weight: bold;">$hash</span><span style="color: #cd853f;">['name']."\n";    # &#12371;&#12435;&#12394;&#12405;&#12358;&#12395;&#12399;&#26360;&#12369;&#12394;&#12356;.</span>
</pre>
</div>

<pre class="example">
$VAR1 = {
          'name' =&gt; 'Frodo',
          'age' =&gt; 33
        };
Frodo
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-3" class="outline-4">
<h4 id="sec-1-6-3"><span class="section-number-4">1.6.3</span> python</h4>
<div class="outline-text-4" id="text-1-6-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #76ee00;">hash</span>={<span style="color: #ffa07a;">'name'</span>:<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">'age'</span>:33}
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">hash</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">hash</span>[<span style="color: #ffa07a;">'name'</span>])
</pre>
</div>

<pre class="example">
{'age': 33, 'name': 'Frodo'}
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-4" class="outline-4">
<h4 id="sec-1-6-4"><span class="section-number-4">1.6.4</span> ruby</h4>
<div class="outline-text-4" id="text-1-6-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span>hash = {<span style="color: #ffa07a;">'name'</span>=&gt;<span style="color: #ffa07a;">'Frodo'</span>,<span style="color: #ffa07a;">'age'</span>=&gt;33}
<span class="linenr">2: </span><span style="color: #76ee00;">puts</span> hash
<span class="linenr">3: </span><span style="color: #76ee00;">puts</span> hash[<span style="color: #ffa07a;">'age'</span>]
</pre>
</div>

<pre class="example">
{"name"=&gt;"Frodo", "age"=&gt;33}
33
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-5" class="outline-4">
<h4 id="sec-1-6-5"><span class="section-number-4">1.6.5</span> js</h4>
<div class="outline-text-4" id="text-1-6-5">
<div class="org-src-container">

<pre class="src src-js"><span class="linenr">1: </span>hash = {<span style="color: #ffa07a;">'name'</span>:<span style="color: #ffa07a;">'Frodo'</span>,age:33}
<span class="linenr">2: </span>console.log(hash)
<span class="linenr">3: </span>console.log(hash[<span style="color: #ffa07a;">'name'</span>])
</pre>
</div>

<pre class="example">
{ name: 'Frodo', age: 33 }
Frodo
</pre>
</div>
</div>

<div id="outline-container-sec-1-6-6" class="outline-4">
<h4 id="sec-1-6-6"><span class="section-number-4">1.6.6</span> まとめ</h4>
<div class="outline-text-4" id="text-1-6-6">
<p>
以下に書き方をまとめる.<br  />
R はパッケージをインストールしないとダメっぽいので省略.<br  />
その代わり JavaScript をいれてみた.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">定義</th>
<th scope="col" class="left">アクセス</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">Dict(key:value)</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">{key=&gt;value}</td>
<td class="left">$hash-&gt;{key}</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">{key:value}</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">{key=&gt;value}</td>
<td class="left">hash["key"]</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">{key:value}</td>
<td class="left">hash["key"]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic file I/O</h2>
<div class="outline-text-2" id="text-2">
<p>
ファイル書き込み<br  />
標準的な書き方でわかりやすい.<br  />
ファイルへの書き込みは print ではなく write<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>f=open(<span style="color: #ffa07a;">"newfile.txt"</span>, <span style="color: #ffa07a;">"w"</span>)
<span class="linenr">2: </span>write(f,<span style="color: #ffa07a;">"testing\n"</span>)
<span class="linenr">3: </span>write(f,<span style="color: #ffa07a;">"more testing\n"</span>)
<span class="linenr">4: </span>close(f)
</pre>
</div>

<p>
ファイル読み込み<br  />
readall(f) でファイル中身を読み込み<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>f=open(<span style="color: #ffa07a;">"newfile.txt"</span>,<span style="color: #ffa07a;">"r"</span>)
<span class="linenr">2: </span>x=readall(f)
<span class="linenr">3: </span>print(x)
<span class="linenr">4: </span>close(f)
</pre>
</div>

<pre class="example">
testing
more testing
</pre>

<p>
file 読み書きについてはまた別途.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 繰り返し</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> julia</h3>
<div class="outline-text-3" id="text-3-1">
<p>
for 文は in を使って書く.<br  />
python みたいにいちいち ":" を使わなくてよい.<br  />
end で終わる ruby みたいな書き方.<br  />
終わりがはっきりしててわかりやすいとおもう.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>actions = [<span style="color: #ffa07a;">"surf"</span>,<span style="color: #ffa07a;">"ski"</span>]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span> act <span style="color: #20b2aa; font-weight: bold;">in</span> actions
<span class="linenr">3: </span>    println(<span style="color: #ffa07a;">"Chalie don't $act"</span>)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">5: </span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3
<span class="linenr">7: </span>    println(i)
<span class="linenr">8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
Chalie don't surf
Chalie don't ski
1
2
3
</pre>

<p>
Dictionary(hash) についての繰り返しもできる.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>d = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span>=&gt;<span style="color: #ffa07a;">"Frodo"</span>,<span style="color: #ffa07a;">"age"</span>=&gt;33)
<span class="linenr">2: </span>println(keys(d))
<span class="linenr">3: </span>println(typeof(keys(d)))
<span class="linenr">4: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">collect &#12391; Array &#12395;&#12377;&#12427;</span>
<span class="linenr">5: </span>println(collect(keys(d)))
<span class="linenr">6: </span>println(typeof(collect(keys(d))))
</pre>
</div>

<pre class="example">
String["name","age"]
Base.KeyIterator{Dict{String,Any}}
String["name","age"]
Array{String,1}
</pre>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>d = <span style="color: #9370db;">Dict</span>(<span style="color: #ffa07a;">"name"</span>=&gt;<span style="color: #ffa07a;">"hoge"</span>,<span style="color: #ffa07a;">"age"</span>=&gt;32)
<span class="linenr">2: </span>println(keys(d))
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> k <span style="color: #20b2aa; font-weight: bold;">in</span> keys(d)
<span class="linenr">4: </span>    <span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"key=%s value=%s\n"</span>,k,d[k])
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">6: </span>println(collect(keys(d)))
<span class="linenr">7: </span><span style="color: #20b2aa; font-weight: bold;">for</span> k <span style="color: #20b2aa; font-weight: bold;">in</span> collect(keys(d))
<span class="linenr">8: </span>    <span style="color: #6495ed;">@printf</span>(<span style="color: #ffa07a;">"key=%s value=%s\n"</span>,k,d[k])
<span class="linenr">9: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
String["name","age"]
key=name value=hoge
key=age value=32
String["name","age"]
key=name value=hoge
key=age value=32
</pre>

<p>
どっちもけっかは一緒のようだ.<br  />
</p>

<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>x_values=[1,2,3,4]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span> x <span style="color: #20b2aa; font-weight: bold;">in</span> x_values
<span class="linenr">3: </span>    println(x*x)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">5: </span>
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:length(x_values)
<span class="linenr">7: </span>    println(x_values[i] * x_values[i])
<span class="linenr">8: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
4
9
16
1
4
9
16
</pre>

<p>
二つの配列を同時に回すときは<br  />
zip という関数を使えばよいらしいです.<br  />
python の zip と同じ感じ.<br  />
便利.<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>countries=(<span style="color: #ffa07a;">"Japan"</span>,<span style="color: #ffa07a;">"Korea"</span>,<span style="color: #ffa07a;">"China"</span>)
<span class="linenr">2: </span>cities   =(<span style="color: #ffa07a;">"Tokyo"</span>,<span style="color: #ffa07a;">"Seoul"</span>,<span style="color: #ffa07a;">"Beijing"</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (cont,city) <span style="color: #20b2aa; font-weight: bold;">in</span> zip(countries,cities)
<span class="linenr">4: </span>    println(<span style="color: #ffa07a;">"The capital of $cont is $city"</span>)
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
The capital of Japan is Tokyo
The capital of Korea is Seoul
The capital of China is Beijing
</pre>

<p>
python enumerate と同様な感じでも書けるみたい<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span>countries=(<span style="color: #ffa07a;">"Japan"</span>,<span style="color: #ffa07a;">"Korea"</span>,<span style="color: #ffa07a;">"China"</span>)
<span class="linenr">2: </span>cities   =(<span style="color: #ffa07a;">"Tokyo"</span>,<span style="color: #ffa07a;">"Seoul"</span>,<span style="color: #ffa07a;">"Beijing"</span>)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (i,cont) <span style="color: #20b2aa; font-weight: bold;">in</span> enumerate(countries)
<span class="linenr">4: </span>    city = cities[i]
<span class="linenr">5: </span>    println(<span style="color: #ffa07a;">"The capital of $cont is $city"</span>)
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
The capital of Japan is Tokyo
The capital of Korea is Seoul
The capital of China is Beijing
</pre>

<p>
以下比較用のるーぷ<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9
<span class="linenr">2: </span>    println(i)
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> perl</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr">3: </span>
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ar</span>=(1..9);
<span class="linenr">5: </span><span style="color: #20b2aa; font-weight: bold;">for</span> (<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@ar</span>) {
<span class="linenr">6: </span>  <span style="color: #ff83fa;">print</span> $_.<span style="color: #ffa07a;">"\n"</span>;
<span class="linenr">7: </span>}
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> python</h3>
<div class="outline-text-3" id="text-3-3">
<p>
range(1,10) と書くと 1 から 9 までな点にちゅういする.<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,10):
<span class="linenr">2: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(i)
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> ruby</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1..9
<span class="linenr">2: </span>  <span style="color: #76ee00;">puts</span> i
<span class="linenr">3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
</pre>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5"><span class="section-number-3">3.5</span> R</h3>
<div class="outline-text-3" id="text-3-5">
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(x <span style="color: #20b2aa; font-weight: bold;">in</span> 1:9) {
<span class="linenr">2: </span>    print(x)
<span class="linenr">3: </span>}
</pre>
</div>

<pre class="example">
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
</pre>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6"><span class="section-number-3">3.6</span> js</h3>
<div class="outline-text-3" id="text-3-6">
<div class="org-src-container">

<pre class="src src-js"><span class="linenr">1: </span><span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">ar</span>=[]
<span class="linenr">2: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">i</span>=1;i&lt;10;i++) {
<span class="linenr">3: </span>  ar.push(i);
<span class="linenr">4: </span>  <span style="color: #cd853f;">// </span><span style="color: #cd853f;">console.log(i)</span>
<span class="linenr">5: </span>}
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">for</span>(<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">x</span> of ar) {
<span class="linenr">7: </span>  console.log(x);
<span class="linenr">8: </span>}
<span class="linenr">9: </span>console.log(Array.from(<span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">Array</span>(9),(val,index)=&gt;index+1));
</pre>
</div>

<pre class="example">
1
2
3
4
5
6
7
8
9
[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
</pre>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7"><span class="section-number-3">3.7</span> まとめ</h3>
<div class="outline-text-3" id="text-3-7">
<p>
for 文のかきかたまとめ.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">言語</th>
<th scope="col" class="left">for 文</th>
<th scope="col" class="right">range 1 から 9 まで</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">for x in ar &#x2026; end</td>
<td class="right">1:9</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">for (@ar) {}</td>
<td class="right">(1..9)</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">for x in ar:</td>
<td class="right">range(1,10)</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">for x in ar &#x2026; end</td>
<td class="right">1..9</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">for(x in ar) {}</td>
<td class="right">1:9</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">for(x of ar) {}</td>
<td class="right">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3-8" class="outline-3">
<h3 id="sec-3-8"><span class="section-number-3">3.8</span> 内包表記</h3>
<div class="outline-text-3" id="text-3-8">
</div><div id="outline-container-sec-3-8-1" class="outline-4">
<h4 id="sec-3-8-1"><span class="section-number-4">3.8.1</span> julia</h4>
<div class="outline-text-4" id="text-3-8-1">
<p>
julia でのリスト内包表記いろいろ<br  />
</p>
<div class="org-src-container">

<pre class="src src-julia">dbls = [2i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:4]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2x &#30340;&#12394;&#26360;&#12365;&#26041;&#12434;&#12388;&#12363;&#12387;&#12390;&#12414;&#12377;</span>
println(dbls)

anmls = [<span style="color: #ffa07a;">"dog"</span>,<span style="color: #ffa07a;">"cat"</span>,<span style="color: #ffa07a;">"bird"</span>]
pls   = [a * <span style="color: #ffa07a;">"s"</span> <span style="color: #20b2aa; font-weight: bold;">for</span> a <span style="color: #20b2aa; font-weight: bold;">in</span> anmls]  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">* &#12399;&#25991;&#23383;&#21015;&#36899;&#32080;&#12398;&#24847;&#21619;&#12391;&#12354;&#12427;&#12371;&#12392;&#12395;&#27880;&#24847;</span>
println(pls)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20869;&#21253;&#34920;&#35352;&#12391;&#20108;&#27425;&#20803;&#37197;&#21015;&#12418;&#20316;&#12428;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">python &#12391;&#12418;&#20986;&#26469;&#12427;&#12435;&#12384;&#12429;&#12540;&#12363;?</span>
p = [i+j <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3, j <span style="color: #20b2aa; font-weight: bold;">in</span> 4:6]
println(p)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36766;&#26360;(hash) &#12418;&#12371;&#12428;&#12391;&#20316;&#12428;&#12427;</span>
h = [<span style="color: #ffa07a;">"$i"</span> =&gt; i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> 1:3]
println(h)
</pre>
</div>

<pre class="example">
[2,4,6,8]
String["dogs","cats","birds"]
[5 6 7; 6 7 8; 7 8 9]
Dict("1"=&gt;1,"2"=&gt;2,"3"=&gt;3)
</pre>
</div>
</div>

<div id="outline-container-sec-3-8-2" class="outline-4">
<h4 id="sec-3-8-2"><span class="section-number-4">3.8.2</span> python</h4>
<div class="outline-text-4" id="text-3-8-2">
<p>
python でのかきかた<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #9acd32;">dbls</span>=[ 2*i <span style="color: #20b2aa; font-weight: bold;">for</span> i <span style="color: #20b2aa; font-weight: bold;">in</span> <span style="color: #76ee00;">range</span>(1,5)]
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(dbls)
<span class="linenr"> 3: </span>
<span class="linenr"> 4: </span><span style="color: #9acd32;">anmls</span> = [<span style="color: #ffa07a;">"dog"</span>,<span style="color: #ffa07a;">"cat"</span>,<span style="color: #ffa07a;">"bird"</span>]
<span class="linenr"> 5: </span><span style="color: #9acd32;">pls</span>   = [ a + <span style="color: #ffa07a;">"s"</span> <span style="color: #20b2aa; font-weight: bold;">for</span> a <span style="color: #20b2aa; font-weight: bold;">in</span> anmls]
<span class="linenr"> 6: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(pls)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12399;&#28961;&#29702;&#12387;&#12413;&#12356;</span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">p = [i+j for i in range(1,4), j in range(4,7)]</span>
<span class="linenr">10: </span>
<span class="linenr">11: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">hash &#12418;&#12381;&#12398;&#12414;&#12414;&#12391;&#12399;&#28961;&#29702;&#12387;&#12413;&#12356;</span>
<span class="linenr">12: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">h = [ i=&gt;i for i in range(1,4)]</span>
</pre>
</div>

<pre class="example">
[2, 4, 6, 8]
['dogs', 'cats', 'birds']
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 比較</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> julia</h3>
<div class="outline-text-3" id="text-4-1">
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span>x=1
<span class="linenr"> 2: </span>
<span class="linenr"> 3: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x==2 &#12391;&#12354;&#12427;&#12363;&#12393;&#12358;&#12363;. false</span>
<span class="linenr"> 4: </span>println(x==2)
<span class="linenr"> 5: </span>
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">x &#12364; 3 &#12376;&#12419;&#12394;&#12356;&#12363;&#12393;&#12358;&#12363;. true</span>
<span class="linenr"> 7: </span>println(x!=3)
<span class="linenr"> 8: </span>
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12418;&#26360;&#12369;&#12427;</span>
<span class="linenr">10: </span>println(1&lt;2&lt;3)
<span class="linenr">11: </span>println(1&lt;=2&lt;=3)
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19978;&#12391;&#12418;&#12363;&#12356;&#12383;&#12369;&#12393; 1 &#12399;&#33258;&#21205;&#12391; true &#12395;&#22793;&#25563;&#12375;&#12390;&#12367;&#12428;&#12394;&#12356;</span>
<span class="linenr">14: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(convert(<span style="color: #9370db;">Bool</span>,1))
<span class="linenr">15: </span>    println(<span style="color: #ffa07a;">"convert(Bool,1) is true"</span>)
<span class="linenr">16: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">17: </span>
<span class="linenr">18: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">and &#12392; or</span>
<span class="linenr">19: </span>println(<span style="color: #1e90ff;">true</span> &amp;&amp; <span style="color: #1e90ff;">false</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">false</span>
<span class="linenr">20: </span>println(<span style="color: #1e90ff;">true</span> || <span style="color: #1e90ff;">false</span>)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">true</span>
</pre>
</div>

<pre class="example">
false
true
true
true
convert(Bool,1) is true
false
true
</pre>

<p>
ごく簡単なれいでくらべてみよう.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> perl</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">

<pre class="src src-perl"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$x</span>=1;
<span class="linenr"> 4: </span><span style="color: #ff83fa;">print</span>($x==2); <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#12392;, &#20309;&#12418;&#26360;&#12365;&#20986;&#12373;&#12428;&#12394;&#12356;(undef &#12387;&#12390;&#12371;&#12392;?).</span>
<span class="linenr"> 5: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr"> 6: </span><span style="color: #ff83fa;">print</span>($x!=3); <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1</span>
<span class="linenr"> 7: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr"> 8: </span><span style="color: #20b2aa; font-weight: bold;">if</span>($x) {
<span class="linenr"> 9: </span>   <span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"1 is true in perl\n"</span>);
<span class="linenr">10: </span>}
<span class="linenr">11: </span><span style="color: #ff83fa;">print</span>(1 <span style="color: #9370db;">and</span> 0);   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">0</span>
<span class="linenr">12: </span><span style="color: #ff83fa;">print</span>(<span style="color: #ffa07a;">"\n"</span>);
<span class="linenr">13: </span><span style="color: #ff83fa;">print</span>(1 <span style="color: #9370db;">or</span>  0);   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1</span>
</pre>
</div>

<pre class="example">
1
1 is true in perl
0
1
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> python</h3>
<div class="outline-text-3" id="text-4-3">
<div class="org-src-container">

<pre class="src src-python"><span class="linenr"> 1: </span><span style="color: #9acd32;">x</span>=1
<span class="linenr"> 2: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(x==2)
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(x!=3)
<span class="linenr"> 4: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(1&lt;2&lt;3)
<span class="linenr"> 5: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(1&lt;=2&lt;=3)
<span class="linenr"> 6: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12399; true</span>
<span class="linenr"> 7: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(1):
<span class="linenr"> 8: </span>    <span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"1 is true in python"</span>)
<span class="linenr"> 9: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">and or &#12399;&#12381;&#12398;&#12414;&#12414;&#26360;&#12369;&#12400;&#12424;&#12356;.</span>
<span class="linenr">10: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #1e90ff;">True</span> <span style="color: #20b2aa; font-weight: bold;">and</span> <span style="color: #1e90ff;">False</span>)
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #1e90ff;">True</span> <span style="color: #20b2aa; font-weight: bold;">or</span>  <span style="color: #1e90ff;">False</span>)
</pre>
</div>

<pre class="example">
False
True
True
True
1 is true in python
False
True
</pre>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> ruby</h3>
<div class="outline-text-3" id="text-4-4">
<div class="org-src-container">

<pre class="src src-ruby"><span class="linenr">1: </span>x=1
<span class="linenr">2: </span><span style="color: #76ee00;">puts</span>(x==2)
<span class="linenr">3: </span><span style="color: #76ee00;">puts</span>(x!=3)
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(x)
<span class="linenr">5: </span>    <span style="color: #76ee00;">puts</span>(<span style="color: #ffa07a;">"1 is true in ruby"</span>)
<span class="linenr">6: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
</pre>
</div>

<pre class="example">
false
true
1 is true in ruby
</pre>
</div>
</div>

<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5"><span class="section-number-3">4.5</span> R</h3>
<div class="outline-text-3" id="text-4-5">
<div class="org-src-container">

<pre class="src src-R"><span class="linenr">1: </span>x <span style="color: #1e90ff;">&lt;-</span> 1
<span class="linenr">2: </span>x==2
<span class="linenr">3: </span>x!=3
<span class="linenr">4: </span><span style="color: #20b2aa; font-weight: bold;">if</span>(x) {
<span class="linenr">5: </span>    print(<span style="color: #ffa07a;">"1 is true in R"</span>)
<span class="linenr">6: </span>}
</pre>
</div>

<pre class="example">
[1] FALSE
[1] TRUE
[1] "1 is true in R"
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 関数</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> julia</h3>
<div class="outline-text-3" id="text-5-1">
<div class="org-src-container">

<pre class="src src-julia"><span class="linenr"> 1: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">func</span>(a,b)
<span class="linenr"> 2: </span>    <span style="color: #20b2aa; font-weight: bold;">return</span> a*b
<span class="linenr"> 3: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr"> 4: </span>
<span class="linenr"> 5: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#24863;&#12376;&#12391;&#12418;&#38306;&#25968;&#12434;&#23450;&#32681;&#12391;&#12365;&#12427;.</span>
<span class="linenr"> 6: </span><span style="color: #00ff7f;">f</span>(x) = sin(1/x)
<span class="linenr"> 7: </span>
<span class="linenr"> 8: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">default &#20516;&#12398;&#35373;&#23450;</span>
<span class="linenr"> 9: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">hoge</span>(x,a=1)
<span class="linenr">10: </span>     <span style="color: #20b2aa; font-weight: bold;">return</span> exp(cos(a*x))
<span class="linenr">11: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">12: </span>
<span class="linenr">13: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">keyword &#12391;&#12450;&#12463;&#12475;&#12473;&#12377;&#12427;&#24341;&#25968;&#12398;&#25351;&#23450;. ";"</span>
<span class="linenr">14: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">a,b &#12399;&#26222;&#36890;&#12395;&#12450;&#12463;&#12475;&#12473;</span>
<span class="linenr">15: </span><span style="color: #cd853f;"># </span><span style="color: #cd853f;">max, min &#12399; max=, min= &#12392;&#12375;&#12390;&#12450;&#12463;&#12475;&#12473;</span>
<span class="linenr">16: </span><span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">fuga</span>(a,b; max=5,min=2)
<span class="linenr">17: </span>    x = a + b
<span class="linenr">18: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span>(x&gt;max)
<span class="linenr">19: </span>       <span style="color: #20b2aa; font-weight: bold;">return</span> max
<span class="linenr">20: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">21: </span>    <span style="color: #20b2aa; font-weight: bold;">if</span>(x&lt;min)
<span class="linenr">22: </span>       <span style="color: #20b2aa; font-weight: bold;">return</span> min
<span class="linenr">23: </span>    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">24: </span>    <span style="color: #20b2aa; font-weight: bold;">return</span> x
<span class="linenr">25: </span><span style="color: #20b2aa; font-weight: bold;">end</span>
<span class="linenr">26: </span>
<span class="linenr">27: </span>k = func(2,5)
<span class="linenr">28: </span>p = f(1.0)
<span class="linenr">29: </span>q = hoge(pi)
<span class="linenr">30: </span>r = hoge(pi,2)
<span class="linenr">31: </span>c = fuga(2,4)
<span class="linenr">32: </span>d = fuga(2,4,max=10)
<span class="linenr">33: </span>println(k)
<span class="linenr">34: </span>println(p)
<span class="linenr">35: </span>println(q)
<span class="linenr">36: </span>println(r)
<span class="linenr">37: </span>println(c)
<span class="linenr">38: </span>println(d)
</pre>
</div>

<pre class="example">
10
0.8414709848078965
0.36787944117144233
2.718281828459045
5
6
</pre>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> まとめ</h3>
<div class="outline-text-3" id="text-5-2">
<p>
比較表だけかいてみる.<br  />
perl だけちょっとちがう感じ. 引数をかっこで渡さない.<br  />
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">関数定義のやり方</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">julia</td>
<td class="left">function hoge()  end</td>
</tr>

<tr>
<td class="left">perl</td>
<td class="left">sub hoge { }</td>
</tr>

<tr>
<td class="left">python</td>
<td class="left">def hoge()</td>
</tr>

<tr>
<td class="left">ruby</td>
<td class="left">def hoge()    end</td>
</tr>

<tr>
<td class="left">js</td>
<td class="left">function hoge() {  }</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite3 の様々な言語での利用]]></title>
    <link href="http://saito1369.github.io/blog/2017-02-09-SQLite3.html"/>
    <updated>2017-02-09T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/SQLite3</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. perl</a>
<ul>
<li><a href="#sec-1-1">1.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-1-2">1.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-1-3">1.3. 参考URL</a></li>
</ul>
</li>
<li><a href="#sec-2">2. python</a>
<ul>
<li><a href="#sec-2-1">2.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-2-2">2.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-2-3">2.3. 参考URL</a></li>
</ul>
</li>
<li><a href="#sec-3">3. ruby</a>
<ul>
<li><a href="#sec-3-1">3.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-3-2">3.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-3-3">3.3. 参考URL</a></li>
</ul>
</li>
<li><a href="#sec-4">4. julia</a>
<ul>
<li><a href="#sec-4-1">4.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-4-2">4.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-4-3">4.3. 参考URL</a></li>
</ul>
</li>
<li><a href="#sec-5">5. R</a>
<ul>
<li><a href="#sec-5-1">5.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-5-2">5.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-5-3">5.3. 参考URL</a></li>
</ul>
</li>
<li><a href="#sec-6">6. javascript(node.js)</a>
<ul>
<li><a href="#sec-6-1">6.1. database の作成とデータの挿入</a></li>
<li><a href="#sec-6-2">6.2. select 文とデータの取り出し</a></li>
<li><a href="#sec-6-3">6.3. 参考URL</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-02-09 Thu 13:42&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-11-21 Wed 20:51&gt;</span></span><br  />
</p>
<p>
SQLite3 の簡単な利用方法についてまとめておく.<br  />
いくつかの script 言語での書き方を比較する.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<p>
利用環境: OSX Yosemite 10.10.5<br  />
</p>

<div class="org-src-container">

<pre class="src src-sh">sqlite3 --version
</pre>
</div>

<pre class="example">
3.13.0 2016-05-18 10:57:30 fc49f556e48970561d7ab6a2f24fdd7d9eb81ff2
</pre>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> perl</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-sh">perl --version
</pre>
</div>

<pre class="example">
This is perl 5, version 18, subversion 2 (v5.18.2) built for darwin-thread-multi-2level
(with 2 registered patches, see perl -V for more detail)

Copyright 1987-2013, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
</pre>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-perl"><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">DBI</span>;

<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$db</span>=<span style="color: #ffa07a;">"test.db"</span>;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$dbh</span>=DBI-&gt;<span style="color: #9370db;">connect</span>(<span style="color: #ffa07a;">"dbi:SQLite:dbname=$db"</span>);

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12486;&#12540;&#12502;&#12523;&#20316;&#25104;</span>
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$sql</span>=<span style="color: #ffa07a;">"create table if not exists test_table_pl (id int, name, age int, gender)"</span>;
$dbh-&gt;<span style="color: #20b2aa; font-weight: bold;">do</span>($sql);  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25147;&#12426;&#20516;&#12364;&#12394;&#12356;&#22580;&#21512;&#12399; do &#12391;&#23455;&#34892;</span>
<span style="color: #cd853f;">#</span><span style="color: #cd853f;">my $kth=$dbh-&gt;prepare($sql);</span>
<span style="color: #cd853f;">#</span><span style="color: #cd853f;">$kth-&gt;execute();</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">placeholder &#12395;&#12424;&#12427;&#12487;&#12540;&#12479;&#12398;&#25407;&#20837;</span>
$sql    =<span style="color: #ffa07a;">"insert into test_table_pl values (?,?,?,?)"</span>;
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">placeholder &#12434;&#29992;&#12356;&#12427;&#22580;&#21512;&#21450;&#12403;&#25147;&#12426;&#20516;&#12364;&#12354;&#12427;&#22580;&#21512;&#12399;,</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">prepare -&gt; execute &#12391;&#23455;&#34892;</span>
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$sth</span> =$dbh-&gt;prepare($sql);
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@vls</span> =(1,<span style="color: #ffa07a;">'hoge'</span>,20,<span style="color: #ffa07a;">'m'</span>);
$sth-&gt;execute(<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@vls</span>);

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20999;&#26029;</span>
$dbh-&gt;disconnect;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-perl"><span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">strict</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">warnings</span>;
<span style="color: #20b2aa; font-weight: bold;">use</span> <span style="color: #00ff7f;">DBI</span>;

<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$db</span>=<span style="color: #ffa07a;">'test.db'</span>;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$dbh</span> = DBI-&gt;<span style="color: #9370db;">connect</span>(<span style="color: #ffa07a;">"dbi:SQLite:dbname=$db"</span>);

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">select &#25991;</span>
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$sql</span> = <span style="color: #ffa07a;">"select * from test_table_pl order by id"</span>;
<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$sth</span> = $dbh-&gt;prepare($sql);
$sth-&gt;execute();

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12487;&#12540;&#12479;&#12398;&#21462;&#12426;&#20986;&#12375;</span>
<span style="color: #20b2aa; font-weight: bold;">while</span>(<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">@row</span>=$sth-&gt;fetchrow_array) {
  <span style="color: #ff83fa;">print</span> <span style="color: #9370db;">join</span>(<span style="color: #ffa07a;">"\t"</span>,<span style="color: #ffff00; background-color: #000080; font-weight: bold;">@row</span>).<span style="color: #ffa07a;">"\n"</span>;
  <span style="color: #ff83fa;">print</span> <span style="color: #ffff00; background-color: #000080; font-weight: bold;">$row</span>[0].<span style="color: #ffa07a;">"\n"</span>;
}
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">hashref &#12391;&#21462;&#12426;&#20986;&#12379;&#12427;(&#12364;, &#19968;&#22238;&#12392;&#12427;&#12392;&#31354;&#12395;&#12394;&#12427;)</span>
<span style="color: #20b2aa; font-weight: bold;">while</span>(<span style="color: #20b2aa; font-weight: bold;">my</span> <span style="color: #9acd32;">$row</span>=$sth-&gt;fetchrow_hashref) {
  <span style="color: #ff83fa;">print</span> $row-&gt;{<span style="color: #ffa07a;">id</span>}.<span style="color: #ffa07a;">"\t"</span>.$row-&gt;{<span style="color: #ffa07a;">name</span>}.<span style="color: #ffa07a;">"\n"</span>;
}
</pre>
</div>

<pre class="example">
1 hoge  20  m
1
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<a href="http://program.station.ez-net.jp/special/perl/dbi/sqlite.asp">http://program.station.ez-net.jp/special/perl/dbi/sqlite.asp</a><br  />
<a href="http://d.hatena.ne.jp/perlcodesample/20091121/1246679588">http://d.hatena.ne.jp/perlcodesample/20091121/1246679588</a><br  />
<a href="http://www.kent-web.com/perl/sqlite/step03.html">http://www.kent-web.com/perl/sqlite/step03.html</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> python</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-sh">python --version
</pre>
</div>

<pre class="example">
Python 3.5.2 :: Anaconda custom (x86_64)
</pre>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> sqlite3
<span style="color: #9acd32;">con</span> = sqlite3.connect(<span style="color: #ffa07a;">"test.db"</span>)
<span style="color: #9acd32;">cur</span> = con.cursor()

<span style="color: #9acd32;">sql</span> = <span style="color: #ffa07a;">"create table if not exists test_table_py (id int, name varchar(64), age int, gender varchar(32))"</span>
cur.execute(sql)

<span style="color: #9acd32;">sql</span> = <span style="color: #ffa07a;">"insert into test_table_py values (?,?,?,?)"</span>
<span style="color: #9acd32;">vls</span> = (1,<span style="color: #ffa07a;">'hoge'</span>,20,<span style="color: #ffa07a;">'m'</span>)
cur.execute(sql,vls);

con.commit()  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#22793;&#26356;&#12398;&#20445;&#23384;</span>
con.close()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> sqlite3

<span style="color: #9acd32;">con</span> = sqlite3.connect(<span style="color: #ffa07a;">"test.db"</span>)
<span style="color: #9acd32;">cur</span> = con.cursor()

<span style="color: #9acd32;">sql</span> = <span style="color: #ffa07a;">"select * from test_table_py order by id"</span>;
cur.execute(sql)

<span style="color: #9acd32;">result</span> = cur.fetchall()
<span style="color: #20b2aa; font-weight: bold;">for</span> row <span style="color: #20b2aa; font-weight: bold;">in</span> result:
    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">tuple &#12391;&#36820;&#12387;&#12390;&#12367;&#12427;</span>
    <span style="color: #20b2aa; font-weight: bold;">print</span>(row)
    <span style="color: #20b2aa; font-weight: bold;">print</span>(row[0])
</pre>
</div>

<pre class="example">
(1, 'hoge', 20, 'm')
1
</pre>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-2-3">
<p>
<a href="http://qiita.com/mas9612/items/a881e9f14d20ee1c0703">http://qiita.com/mas9612/items/a881e9f14d20ee1c0703</a><br  />
<a href="http://www.python-izm.com/contents/external/sqlite.shtml">http://www.python-izm.com/contents/external/sqlite.shtml</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> ruby</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-ruby">ruby --version
</pre>
</div>

<pre class="example">
ruby 1.9.3p551 (2014-11-13 revision 48407) [x86_64-darwin14.3.0]
</pre>

<p>
require 'sqlite3' がエラーとなるときはインストールします.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">gem install sqlite3
</pre>
</div>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #76ee00;">require</span> <span style="color: #ffa07a;">'sqlite3'</span>

db = <span style="color: #9370db;">SQLite3</span>::<span style="color: #9370db;">Database</span>.new(<span style="color: #ffa07a;">"test.db"</span>)

sql = <span style="color: #ffa07a;">"create table if not exists test_table_rb (id int, name varchar(64), age int, gender varchar(32))"</span>
db.execute(sql)

sql = <span style="color: #ffa07a;">"insert into test_table_rb values (1,'hoge',20,'m')"</span>
db.execute(sql)

sql = <span style="color: #ffa07a;">"insert into test_table_rb values (?,?,?,?)"</span>
vls = [2,<span style="color: #ffa07a;">'fuga'</span>,30,<span style="color: #ffa07a;">'f'</span>]
db.execute(sql,vls)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">db.execute(sql,2,'fuga',30,'f')</span>
db.close
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #76ee00;">require</span> <span style="color: #ffa07a;">'sqlite3'</span>

db = <span style="color: #9370db;">SQLite3</span>::<span style="color: #9370db;">Database</span>.new(<span style="color: #ffa07a;">"test.db"</span>)
sql = <span style="color: #ffa07a;">"select * from test_table_rb order by id"</span>
db.execute(sql) { |id,name,age,gender|
  <span style="color: #76ee00;">print</span> <span style="color: #ffa07a;">"</span><span style="color: #9acd32;">#{id}</span><span style="color: #ffa07a;"> </span><span style="color: #9acd32;">#{name}</span><span style="color: #ffa07a;">\n"</span>
}
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12435;&#12394;&#12405;&#12358;&#12395;&#12418;&#26360;&#12369;&#12427;</span>
db.execute(sql) <span style="color: #20b2aa; font-weight: bold;">do</span> |row|
   <span style="color: #76ee00;">puts</span> row.join(<span style="color: #ffa07a;">"\t"</span>)
<span style="color: #20b2aa; font-weight: bold;">end</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#36984;&#25246;&#32080;&#26524;&#12434; hash &#12391;&#24471;&#12427;</span>
db.results_as_hash = <span style="color: #1e90ff;">true</span>
db.execute(sql) <span style="color: #20b2aa; font-weight: bold;">do</span> |row|
   <span style="color: #76ee00;">puts</span> row
   <span style="color: #76ee00;">puts</span> row[<span style="color: #ffa07a;">"name"</span>]
<span style="color: #20b2aa; font-weight: bold;">end</span>
db.close
</pre>
</div>

<pre class="example">
1 hoge
2 fuga
1 hoge  20  m
2 fuga  30  f
{"id"=&gt;1, "name"=&gt;"hoge", "age"=&gt;20, "gender"=&gt;"m", 0=&gt;1, 1=&gt;"hoge", 2=&gt;20, 3=&gt;"m"}
hoge
{"id"=&gt;2, "name"=&gt;"fuga", "age"=&gt;30, "gender"=&gt;"f", 0=&gt;2, 1=&gt;"fuga", 2=&gt;30, 3=&gt;"f"}
fuga
</pre>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-3-3">
<p>
<a href="http://shuzo-kino.hateblo.jp/entry/20120913/1347551619">http://shuzo-kino.hateblo.jp/entry/20120913/1347551619</a><br  />
<a href="https://sites.google.com/site/rubycocoamemo/Home/ruby-guan-lian/sqlite-wo--ruby-de-tsukau">https://sites.google.com/site/rubycocoamemo/Home/ruby-guan-lian/sqlite-wo--ruby-de-tsukau</a><br  />
<a href="http://d.hatena.ne.jp/pyopyopyo/20070325/p1">http://d.hatena.ne.jp/pyopyopyo/20070325/p1</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> julia</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-sh">julia --version
</pre>
</div>

<pre class="example">
julia version 0.5.0
</pre>

<p>
using SQLite でエラーとなる場合は Pkg.add("SQLite") でインストールします.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">julia
</pre>
</div>
<pre class="example">
   _       _ _(_)_     |  A fresh approach to technical computing
  (_)     | (_) (_)    |  Documentation: http://docs.julialang.org
   _ _   _| |_  __ _   |  Type "?help" for help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 0.5.0 (2016-09-19 18:14 UTC)
 _/ |\__'_|_|_|\__'_|  |
|__/                   |  x86_64-apple-darwin14.5.0

julia&gt; Pkg.add("SQLite")
</pre>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-4-1">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> SQLite

db  = SQLite.DB(<span style="color: #ffa07a;">"test.db"</span>)
sql =<span style="color: #ffa07a;">"create table if not exists test_table_jl (id int, name, age int, gender)"</span>
SQLite.query(db,sql)

sql = <span style="color: #ffa07a;">"insert into test_table_jl values (1,'hoge',20,'m')"</span>
SQLite.query(db,sql)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">SQLite.execute!(db,sql)  # &#12371;&#12428;&#12391;&#12418;&#33391;&#12356;</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">placeholder &#12434;&#20351;&#12387;&#12383;&#26360;&#12365;&#26041;</span>
sql = <span style="color: #ffa07a;">"insert into test_table_jl values (?,?,?,?)"</span>
stmt = SQLite.Stmt(db,sql)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">prepare &#12415;&#12383;&#12356;&#12394;&#12418;&#12435;</span>
vls=[2,<span style="color: #ffa07a;">"fuga"</span>,22,<span style="color: #ffa07a;">"f"</span>]
SQLite.bind!(stmt,vls)
SQLite.execute!(stmt)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> SQLite
db  = SQLite.DB(<span style="color: #ffa07a;">"test.db"</span>)
sql =<span style="color: #ffa07a;">"select * from test_table_jl order by id"</span>
ext = SQLite.query(db,sql)
println(ext)
</pre>
</div>

<pre class="example">
2×4 DataFrames.DataFrame
│ Row │ id │ name   │ age │ gender │
├─────┼────┼────────┼─────┼────────┤
│ 1   │ 1  │ "hoge" │ 20  │ "m"    │
│ 2   │ 2  │ "fuga" │ 22  │ "f"    │
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-4-3">
<p>
<a href="https://github.com/JuliaDB/SQLite.jl/tree/2610faaaeea7cd92c38c29221101727445f7ab25">https://github.com/JuliaDB/SQLite.jl/tree/2610faaaeea7cd92c38c29221101727445f7ab25</a><br  />
<a href="https://www.r-bloggers.com/julia-and-sqlite/">https://www.r-bloggers.com/julia-and-sqlite/</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> R</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-sh">R --version
</pre>
</div>

<pre class="example">
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.5.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under the terms of the
GNU General Public License versions 2 or 3.
For more information about these matters see
http://www.gnu.org/licenses/.
</pre>

<p>
library("RSQLite") が失敗する場合は install.packages("RSQLite") でインストールします.<br  />
</p>
<div class="org-src-container">

<pre class="src src-sh">R
</pre>
</div>
<pre class="example">
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin14.5.0 (64-bit)

R は、自由なソフトウェアであり、「完全に無保証」です。
一定の条件に従えば、自由にこれを再配布することができます。
配布条件の詳細に関しては、'license()' あるいは 'licence()' と入力してください。

R は多くの貢献者による共同プロジェクトです。
詳しくは 'contributors()' と入力してください。
また、R や R のパッケージを出版物で引用する際の形式については
'citation()' と入力してください。

'demo()' と入力すればデモをみることができます。
'help()' とすればオンラインヘルプが出ます。
'help.start()' で HTML ブラウザによるヘルプがみられます。
'q()' と入力すれば R を終了します。

&gt; install.packages("RSQLite")
</pre>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-5-1">
<div class="org-src-container">

<pre class="src src-R"><span style="color: #1e90ff;">library</span>(<span style="color: #ffa07a;">"RSQLite"</span>)

con <span style="color: #1e90ff;">&lt;-</span> dbConnect(SQLite(),<span style="color: #ffa07a;">"test.db"</span>,synchronous=<span style="color: #ffa07a;">"off"</span>)
sql <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"create table if not exists test_table_R (id int, name text, age int, gender text)"</span>
dbSendQuery(con, sql)

sql <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"insert into test_table_R values (1,'hoge',20,'m')"</span>
dbSendQuery(con,sql)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">placeholder &#12434;&#20351;&#12358;&#12392;&#12365;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">select &#12391;&#12418;&#21516;&#12376;&#24863;&#12376;&#12391;&#20986;&#26469;&#12427;&#12387;&#12413;&#12356;.</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">sql &lt;- "select * from ..." &#12395;&#12394;&#12427;&#12384;&#12369;. dbSendQuery &#12391;&#12356;&#12369;&#12427; see help(dbBind)</span>
sql <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"insert into test_table_R values (?,?,?,?)"</span>
res <span style="color: #1e90ff;">&lt;-</span> dbSendQuery(con,sql)
dbBind(res, c(1,<span style="color: #ffa07a;">'fuga'</span>,22,<span style="color: #ffa07a;">'f'</span>))
dbFetch(res)
dbDisconnect(con)
</pre>
</div>

<p>
R の場合, 組み込みのデータを使ってこれを SQLite に入れることがあるかも.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R"><span style="color: #1e90ff;">library</span>(<span style="color: #ffa07a;">"RSQLite"</span>)
con <span style="color: #1e90ff;">&lt;-</span> dbConnect(SQLite(), <span style="color: #ffa07a;">"testR.db"</span>, synchronous=<span style="color: #ffa07a;">"off"</span>)
dbWriteTable(con,<span style="color: #ffa07a;">"iris"</span>,iris)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris &#12398;&#12487;&#12540;&#12479;&#12434; "iris" table &#20869;&#12395;&#20837;&#12428;&#12427;</span>
sql <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"select * from iris order by 'Sepal.Length' limit 5"</span>
res <span style="color: #1e90ff;">&lt;-</span> dbGetQuery(con,sql)
res
</pre>
</div>

<pre class="example">
[1] TRUE
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
</pre>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-5-2">
<div class="org-src-container">

<pre class="src src-R"><span style="color: #1e90ff;">library</span>(<span style="color: #ffa07a;">"RSQLite"</span>)
con <span style="color: #1e90ff;">&lt;-</span> dbConnect(SQLite(), <span style="color: #ffa07a;">"test.db"</span>, synchronous=<span style="color: #ffa07a;">"off"</span>)
sql <span style="color: #1e90ff;">&lt;-</span> <span style="color: #ffa07a;">"select * from test_table_R order by id"</span>
res <span style="color: #1e90ff;">&lt;-</span> dbGetQuery(con,sql)
res
dbDisconnect(con)
</pre>
</div>

<pre class="example">
  id name age gender
1  1 hoge  20      m
2  1 fuga  22      f
[1] TRUE
</pre>
</div>
</div>
<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-5-3">
<p>
RからSQLiteを使う<br  />
<a href="https://oku.edu.mie-u.ac.jp/~okumura/stat/sqlite.html">https://oku.edu.mie-u.ac.jp/~okumura/stat/sqlite.html</a><br  />
DBI.pdf<br  />
<a href="https://cran.r-project.org/web/packages/DBI/DBI.pdf">https://cran.r-project.org/web/packages/DBI/DBI.pdf</a><br  />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> javascript(node.js)</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">

<pre class="src src-sh">node --version
</pre>
</div>

<pre class="example">
v7.4.0
</pre>
</div>

<div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1"><span class="section-number-3">6.1</span> database の作成とデータの挿入</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">sqlite3</span> = require(<span style="color: #ffa07a;">'sqlite3'</span>)
sqlite3.verbose();
<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">file</span>=<span style="color: #ffa07a;">'test.db'</span>;
<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">db</span> = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">sqlite3.Database</span>(file); <span style="color: #cd853f;">// </span><span style="color: #cd853f;">file &#12398;&#20195;&#12431;&#12426;&#12395; :memory: &#12384;&#12392;&#12513;&#12514;&#12522;&#19978;&#12395;&#20316;&#25104;</span>
db.serialize(); <span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#38750;&#21516;&#26399;&#12434;&#35299;&#38500;</span>
db.on(<span style="color: #ffa07a;">'error'</span>, <span style="color: #20b2aa; font-weight: bold;">function</span>(<span style="color: #9acd32;">err</span>) {console.error(err); process.exit(1); });
<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">sql</span>=<span style="color: #ffa07a;">'create table if not exists test_table_js (id int, name text, age int, gender text)'</span>;
db.run(sql);
sql = <span style="color: #ffa07a;">'insert into test_table_js values (?,?,?,?)'</span>;
db.run(sql,1,<span style="color: #ffa07a;">'hoge'</span>,20,<span style="color: #ffa07a;">'m'</span>);

<span style="color: #cd853f;">/* </span><span style="color: #cd853f;">&#20197;&#19979;&#12398;&#12424;&#12358;&#12395; hash &#12391;&#12450;&#12463;&#12475;&#12473;&#12418;&#12391;&#12365;&#12427;</span>
<span style="color: #cd853f;">var sql = 'insert or ignore into test_table_js (id,name) values ($i,$n)';</span>
<span style="color: #cd853f;">du.run(sql,{$i:3, $n:'fuga'});</span>
<span style="color: #cd853f;">*/</span>

<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">vls</span> = [2,<span style="color: #ffa07a;">'foo'</span>,22,<span style="color: #ffa07a;">'f'</span>];
db.run(sql,vls);
db.close();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2"><span class="section-number-3">6.2</span> select 文とデータの取り出し</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-js"><span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">sqlite3</span> = require(<span style="color: #ffa07a;">'sqlite3'</span>);
<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">file</span> = <span style="color: #ffa07a;">'test.db'</span>;
<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">db</span>   = <span style="color: #20b2aa; font-weight: bold;">new</span> <span style="color: #9370db;">sqlite3.Database</span>(file);
db.serialize();
db.on(<span style="color: #ffa07a;">'error'</span>,<span style="color: #20b2aa; font-weight: bold;">function</span>(<span style="color: #9acd32;">err</span>) {console.error(err); process.exit(1); });

<span style="color: #20b2aa; font-weight: bold;">var</span> <span style="color: #9acd32;">sql</span>  =<span style="color: #ffa07a;">'select * from test_table_js order by id'</span>;

<span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#12402;&#12392;&#12388;&#12378;&#12388;&#12420;&#12427;&#22580;&#21512;</span>
db.each(sql,clbk01);

<span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">clbk01</span>(<span style="color: #9acd32;">err</span>,<span style="color: #9acd32;">row</span>) {  <span style="color: #cd853f;">// </span><span style="color: #cd853f;">row: &#19968;&#12388;&#12398;&#32080;&#26524;&#34892;&#12364;&#36820;&#12427;</span>
    <span style="color: #cd853f;">//</span><span style="color: #cd853f;">console.log(row.id+"\t"+row.name+"\t"+row.age);</span>
    <span style="color: #20b2aa; font-weight: bold;">if</span> (err) <span style="color: #20b2aa; font-weight: bold;">throw</span> err;
    console.log(row)
}

<span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#20840;&#20214;&#12392;&#12426;&#12384;&#12375;&#12390;&#12363;&#12425;&#12394;&#12435;&#12363;&#12420;&#12427;&#22580;&#21512;</span>
<span style="color: #cd853f;">// </span><span style="color: #cd853f;">&#12503;&#12524;&#12540;&#12473;&#12507;&#12523;&#12480;&#20351;&#12360;&#12427;(&#19978;&#12398; each &#12391;&#12418;&#21516;&#27096;&#12395;&#20351;&#12360;&#12427;)</span>
sql =<span style="color: #ffa07a;">'select * from test_table_js order by ?'</span>;
db.all(sql,<span style="color: #ffa07a;">'id'</span>,clbk02);

<span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">clbk02</span>(<span style="color: #9acd32;">err</span>, <span style="color: #9acd32;">rows</span>) { <span style="color: #cd853f;">// </span><span style="color: #cd853f;">rows: &#32080;&#26524;&#20840;&#37096;&#12398;&#34892;&#12364;&#25147;&#12427;</span>
   <span style="color: #20b2aa; font-weight: bold;">if</span> (err) <span style="color: #20b2aa; font-weight: bold;">throw</span> err;
   rows.forEach(<span style="color: #20b2aa; font-weight: bold;">function</span>(<span style="color: #9acd32;">row</span>) { console.log(row); });
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3"><span class="section-number-3">6.3</span> 参考URL</h3>
<div class="outline-text-3" id="text-6-3">
<p>
Node.jsでSQLite3を使用する - 情報アイランド<br  />
<a href="http://info-i.net/sqlite3">http://info-i.net/sqlite3</a><br  />
Node.jsでsqlite3を使ってデータベースを操作する方法まとめ | Black Everyday Company<br  />
<a href="http://kuroeveryday.blogspot.jp/2016/05/nodejs-sqlite3.html">http://kuroeveryday.blogspot.jp/2016/05/nodejs-sqlite3.html</a><br  />
JavaScript | MDN<br  />
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript">https://developer.mozilla.org/ja/docs/Web/JavaScript</a><br  />
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dataframe のとりあつかい]]></title>
    <link href="http://saito1369.github.io/blog/2017-02-07-DataFrames.html"/>
    <updated>2017-02-07T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/DataFrames</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. file 読み込みと書き出し</a>
<ul>
<li><a href="#sec-1-1">1.1. python</a></li>
<li><a href="#sec-1-2">1.2. R</a></li>
<li><a href="#sec-1-3">1.3. julia</a></li>
<li><a href="#sec-1-4">1.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-2">2. head/tail</a>
<ul>
<li><a href="#sec-2-1">2.1. python</a></li>
<li><a href="#sec-2-2">2.2. R</a></li>
<li><a href="#sec-2-3">2.3. julia</a></li>
<li><a href="#sec-2-4">2.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-3">3. 行, 列の選択</a>
<ul>
<li><a href="#sec-3-1">3.1. python</a></li>
<li><a href="#sec-3-2">3.2. R</a></li>
<li><a href="#sec-3-3">3.3. julia</a></li>
<li><a href="#sec-3-4">3.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-4">4. 行, 列の追加と削除</a>
<ul>
<li><a href="#sec-4-1">4.1. python</a></li>
<li><a href="#sec-4-2">4.2. R</a></li>
<li><a href="#sec-4-3">4.3. julia</a></li>
<li><a href="#sec-4-4">4.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-5">5. 行, 列の結合</a>
<ul>
<li><a href="#sec-5-1">5.1. python</a></li>
<li><a href="#sec-5-2">5.2. R</a></li>
<li><a href="#sec-5-3">5.3. julia</a></li>
<li><a href="#sec-5-4">5.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-6">6. 行, 列のソート</a>
<ul>
<li><a href="#sec-6-1">6.1. python</a></li>
<li><a href="#sec-6-2">6.2. R</a></li>
<li><a href="#sec-6-3">6.3. julia</a></li>
<li><a href="#sec-6-4">6.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-7">7. 行, 列の集計</a>
<ul>
<li><a href="#sec-7-1">7.1. python</a></li>
<li><a href="#sec-7-2">7.2. R</a></li>
<li><a href="#sec-7-3">7.3. julia</a></li>
<li><a href="#sec-7-4">7.4. まとめ</a></li>
</ul>
</li>
<li><a href="#sec-8">8. 参考URL</a></li>
</ul>
</div>
</div>
<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-02-07 Tue 17:46&gt;</span></span><br  />
#+Last Updated: <span class="timestamp-wrapper"><span class="timestamp">&lt;2018-02-21 Wed 19:07&gt;</span></span><br  />
</p>
<p>
dataframe の取扱いについて, 各言語(python, R, julia)での違いを簡単にまとめておく.<br  />
環境は macOS X Yosemite 10.10.5, python3.5.2(Anaconda), R3.3.2, julia0.5.0(DataFrames v0.9.0) である.<br  />
</p>

<p>
<!-- more --><br  />
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> file 読み込みと書き出し</h2>
<div class="outline-text-2" id="text-1">
<p>
ファイルからの読み込みと書出し<br  />
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> python</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #9acd32;">df</span> = pd.read_csv(<span style="color: #ffa07a;">'hoge.csv'</span>,sep=<span style="color: #ffa07a;">','</span>,header=0)
<span style="color: #20b2aa; font-weight: bold;">print</span>(df)
df.to_csv(<span style="color: #ffa07a;">'fuga.tsv'</span>,sep=<span style="color: #ffa07a;">"\t"</span>,header=<span style="color: #1e90ff;">True</span>,index=<span style="color: #1e90ff;">False</span>)
</pre>
</div>

<pre class="example">
   id  leng  hei
0   1    10   20
1   2     5    7
2   3    15   22
3   4     3    5
</pre>

<p>
読み込み:<br  />
read_csv(file名, sep="区切り文字", header=None(列名が書いてある行数. 列名が無ければ None))<br  />
書き出し:<br  />
to_csv(file 名, sep=",",header=True, index=False)<br  />
  header を書き出すとき True<br  />
  index (行番号)を書き出すとき True<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> R</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-R">dat <span style="color: #1e90ff;">&lt;-</span> read.table(<span style="color: #ffa07a;">'hoge.csv'</span>,sep=<span style="color: #ffa07a;">','</span>,header=T)
dat
write.table(dat,file=<span style="color: #ffa07a;">'fugaR.tsv'</span>,dat,sep=<span style="color: #ffa07a;">'\t'</span>,quote=F,row.names=F,col.names=T)
</pre>
</div>

<pre class="example">
  id leng hei
1  1   10  20
2  2    5   7
3  3   15  22
4  4    3   5
x
fugaR.tsv
</pre>

<p>
読み込み:<br  />
read.table(file名, sep="区切り文字", header=T)<br  />
   header=T あるいは F: 1 行目が列名かどうか.<br  />
書き出し<br  />
write.table(データ, file=ファイル名, sep="区切り文字", quote=F, row.names=F,col.names=T)<br  />
   quote=F: 書出し要素に "" をつけるかどうか.<br  />
   row.names=F: 行名を書くかどうか<br  />
   col.names=T: 列名を書くかどうか<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> julia</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
dat = readtable(<span style="color: #ffa07a;">"hoge.csv"</span>,separator=<span style="color: #ffa07a;">','</span>)
print(dat)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">separator &#12399; file &#25313;&#24373;&#23376;&#12391;&#12354;&#12427;&#31243;&#24230;&#25512;&#28204;&#12375;&#12390;&#12367;&#12428;&#12427;&#12387;&#12413;&#12356;</span>
writetable(<span style="color: #ffa07a;">"fugaJ.dat"</span>, dat, quotemark = <span style="color: #ffa07a;">' '</span>, separator = <span style="color: #ffa07a;">'\t'</span>)
</pre>
</div>

<pre class="example">
4×3 DataFrames.DataFrame
│ Row │ id │ leng │ hei │
├─────┼────┼──────┼─────┤
│ 1   │ 1  │ 10   │ 20  │
│ 2   │ 2  │ 5    │ 7   │
│ 3   │ 3  │ 15   │ 22  │
│ 4   │ 4  │ 3    │ 5   │
</pre>

<p>
読み込み<br  />
readtable(ファイル名, separator="区切り文字")<br  />
書き出し:<br  />
writetable(ファイル名, データ, quotemark=' ', separator='\t')<br  />
  quotemark=' ': 書出し要素につける quote. quotemark='"' とすると "hoge" とかになる.<br  />
  separator='\t': 区切り文字<br  />
  注: quote 入れない場合, quotemark='' とやると何故かエラーとなる. Why?<br  />
何か julia は初動が遅いような感じ.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> まとめ</h3>
<div class="outline-text-3" id="text-1-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">読み込み</th>
<th scope="col" class="left">書き出し</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">pd.read_csv(file)</td>
<td class="left">df.to_csv(file)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">read.table(file)</td>
<td class="left">write.table(df,file)</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">readtable(file)</td>
<td class="left">writetable(file)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> head/tail</h2>
<div class="outline-text-2" id="text-2">
<p>
データをちら見する方法(head: 先頭, tail: 最後)<br  />
</p>

<p>
python:   df.head(5)<br  />
R, julia: head(df,5)<br  />
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> python</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">R &#12398;&#12469;&#12531;&#12503;&#12523;&#12487;&#12540;&#12479; iris &#12434; python &#12391;&#20351;&#12358;.</span>
<span style="color: #20b2aa; font-weight: bold;">import</span> pyper
<span style="color: #9acd32;">r</span> = pyper.R(use_pandas=<span style="color: #ffa07a;">'True'</span>)
<span style="color: #9acd32;">df</span> = pd.DataFrame(r.get(<span style="color: #ffa07a;">'iris'</span>))
pd.set_option(<span style="color: #ffa07a;">'display.width'</span>, 150) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19968;&#34892;&#12395;&#26360;&#12367;&#24133;&#12434;&#25351;&#23450;&#12377;&#12427;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">type</span>(df))
<span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
<span style="color: #20b2aa; font-weight: bold;">print</span>(df.tail(5))
</pre>
</div>

<pre class="example">
&lt;class 'pandas.core.frame.DataFrame'&gt;
    Sepal.Length    Sepal.Width    Petal.Length    Petal.Width     Species
0             5.1            3.5             1.4            0.2  b'setosa'
1             4.9            3.0             1.4            0.2  b'setosa'
2             4.7            3.2             1.3            0.2  b'setosa'
3             4.6            3.1             1.5            0.2  b'setosa'
4             5.0            3.6             1.4            0.2  b'setosa'
      Sepal.Length    Sepal.Width    Petal.Length    Petal.Width        Species
145             6.7            3.0             5.2            2.3  b'virginica'
146             6.3            2.5             5.0            1.9  b'virginica'
147             6.5            3.0             5.2            2.0  b'virginica'
148             6.2            3.4             5.4            2.3  b'virginica'
149             5.9            3.0             5.1            1.8  b'virginica'
</pre>

<p>
R のサンプルデータを python でつかう別の方法<br  />
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">from</span> sklearn <span style="color: #20b2aa; font-weight: bold;">import</span> datasets
<span style="color: #9acd32;">iris</span> = datasets.load_iris()
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">pandas object &#12408;&#22793;&#25563;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;&#12364;&#12394;&#12367;&#12394;&#12387;&#12385;&#12419;&#12358;&#12369;&#12393;.</span>
<span style="color: #9acd32;">df</span>   = pd.DataFrame(iris.data)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> R</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">

<pre class="src src-R"><span style="color: #1e90ff;">options</span>(width=150) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19968;&#34892;&#12398;&#24133;&#12434;&#25351;&#23450;&#12377;&#12427;(&#20170;&#22238;&#12399;&#28961;&#12367;&#12390;&#12418;&#12356;&#12356;&#12369;&#12393;&#27604;&#36611;&#12398;&#12383;&#12417;&#26360;&#12356;&#12390;&#12362;&#12367;)</span>
head(iris,5)
tail(iris,5)
</pre>
</div>

<pre class="example">
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
146          6.7         3.0          5.2         2.3 virginica
147          6.3         2.5          5.0         1.9 virginica
148          6.5         3.0          5.2         2.0 virginica
149          6.2         3.4          5.4         2.3 virginica
150          5.9         3.0          5.1         1.8 virginica
</pre>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> julia</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
<span style="color: #20b2aa; font-weight: bold;">using</span> RDatasets
iris = dataset(<span style="color: #ffa07a;">"datasets"</span>,<span style="color: #ffa07a;">"iris"</span>)
println(head(iris,5))
println(tail(iris,5))
</pre>
</div>

<pre class="example">
5×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species  │
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ "setosa" │
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ "setosa" │
│ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ "setosa" │
│ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ "setosa" │
│ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ "setosa" │
5×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species     │
├─────┼─────────────┼────────────┼─────────────┼────────────┼─────────────┤
│ 1   │ 6.7         │ 3.0        │ 5.2         │ 2.3        │ "virginica" │
│ 2   │ 6.3         │ 2.5        │ 5.0         │ 1.9        │ "virginica" │
│ 3   │ 6.5         │ 3.0        │ 5.2         │ 2.0        │ "virginica" │
│ 4   │ 6.2         │ 3.4        │ 5.4         │ 2.3        │ "virginica" │
│ 5   │ 5.9         │ 3.0        │ 5.1         │ 1.8        │ "virginica" │
</pre>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4"><span class="section-number-3">2.4</span> まとめ</h3>
<div class="outline-text-3" id="text-2-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">head</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">df.head(5)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">head(df,5)</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">head(df,5)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 行, 列の選択</h2>
<div class="outline-text-2" id="text-3">
<p>
領域の選択と書出し<br  />
</p>
</div>
<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> python</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12469;&#12531;&#12503;&#12523;&#12487;&#12540;&#12479;</span>
<span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> pyper
<span style="color: #9acd32;">r</span>=pyper.R(use_pandas=<span style="color: #ffa07a;">'True'</span>)
<span style="color: #9acd32;">iris</span> = pd.DataFrame(r.get(<span style="color: #ffa07a;">'iris'</span>))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12392;&#12426;&#12354;&#12360;&#12378;&#26368;&#21021;&#12398; 5 &#34892;&#12434;&#34920;&#31034;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.head(5))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.columns)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">(&#34892;&#25968;, &#21015;&#25968;)&#12434; tuple &#12391;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.shape)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#25968;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(iris.index))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#25968;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #76ee00;">len</span>(iris.columns))
</pre>
</div>

<pre class="example">
    Sepal.Length    Sepal.Width    Petal.Length    Petal.Width     Species
0             5.1            3.5             1.4            0.2  b'setosa'
1             4.9            3.0             1.4            0.2  b'setosa'
2             4.7            3.2             1.3            0.2  b'setosa'
3             4.6            3.1             1.5            0.2  b'setosa'
4             5.0            3.6             1.4            0.2  b'setosa'
Index([' Sepal.Length ', ' Sepal.Width ', ' Petal.Length ', ' Petal.Width ',
       'Species'],
      dtype='object')
(150, 5)
150
5
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12469;&#12531;&#12503;&#12523;&#12487;&#12540;&#12479;</span>
<span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> pyper
<span style="color: #9acd32;">r</span>=pyper.R(use_pandas=<span style="color: #ffa07a;">'True'</span>)
<span style="color: #9acd32;">iris</span> = pd.DataFrame(r.get(<span style="color: #ffa07a;">'iris'</span>))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21462;&#24471;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris[[0]]             # &#21015;(column)&#30058;&#21495;&#12434;&#20351;&#12387;&#12390;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris['Species']       # &#21015;&#12398;&#21517;&#21069;&#12434;&#20351;&#12387;&#12390;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris.iloc[:,0]        # &#21015;&#30058;&#21495;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris.loc[:,'Species'] # column index</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">iris.ix[:,0]          # 0 &#21015;&#30446;&#12398;&#12415;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"data[[column_number]]="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris[[0]].head(2))

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata['column_name']="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris[<span style="color: #ffa07a;">'Species'</span>].head(2))

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata.iloc[:,column_number]="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.iloc[:,0].head(2))

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata.loc[:,column_name]="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.loc[:,<span style="color: #ffa07a;">'Species'</span>].head(2))

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata.column_name="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.Species.head(2))

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata.ix[row_from:row_to, col_from:col_to]="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.ix[0:2,1:3])   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12398;&#31684;&#22258;</span>

<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"\ndata[row,col]="</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris.ix[0,0])       <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20516;&#12398;&#21462;&#12426;&#20986;&#12375;</span>
</pre>
</div>

<pre class="example">
data[[column_number]]=
    Sepal.Length 
0             5.1
1             4.9

data['column_name']=
0    b'setosa'
1    b'setosa'
Name: Species, dtype: object

data.iloc[:,column_number]=
0    5.1
1    4.9
Name:  Sepal.Length , dtype: float128

data.loc[:,column_name]=
0    b'setosa'
1    b'setosa'
Name: Species, dtype: object

data.column_name=
0    b'setosa'
1    b'setosa'
Name: Species, dtype: object

data.ix[row_from:row_to, col_from:col_to]=
    Sepal.Width    Petal.Length 
0            3.5             1.4
1            3.0             1.4
2            3.2             1.3

data[row,col]=
5.1
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12469;&#12531;&#12503;&#12523;&#12487;&#12540;&#12479;</span>
<span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> pyper
<span style="color: #9acd32;">r</span>=pyper.R(use_pandas=<span style="color: #ffa07a;">'True'</span>)
<span style="color: #9acd32;">iris</span> = pd.DataFrame(r.get(<span style="color: #ffa07a;">'iris'</span>))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26908;&#32034;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris[iris.ix[:,1]&gt;4.0])
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20309;&#25925;&#12363; column &#21517;&#12395;&#31354;&#30333;&#12364;&#12354;&#12356;&#12390;&#12427; 'Sepal.Width' &#12391;&#12399;&#12456;&#12521;&#12540;&#12392;&#12394;&#12387;&#12390;&#12375;&#12414;&#12358;</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(iris[iris.loc[:,<span style="color: #ffa07a;">' Sepal.Width '</span>]&gt;4.0])
</pre>
</div>

<pre class="example">
     Sepal.Length    Sepal.Width    Petal.Length    Petal.Width     Species
15             5.7            4.4             1.5            0.4  b'setosa'
32             5.2            4.1             1.5            0.1  b'setosa'
33             5.5            4.2             1.4            0.2  b'setosa'
     Sepal.Length    Sepal.Width    Petal.Length    Petal.Width     Species
15             5.7            4.4             1.5            0.4  b'setosa'
32             5.2            4.1             1.5            0.1  b'setosa'
33             5.5            4.2             1.4            0.2  b'setosa'
</pre>

<p>
R との違い:<br  />
</p>
<ol class="org-ol">
<li>制限が無い時に ":" を使う点と<br  />
</li>
<li>":" による範囲指定の端<br  />
python: iris.ix[:,1:3]   x:y =&gt; x から y-1<br  />
R:      iris[,2:3]       x:y =&gt; x から y<br  />
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> R</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-R">names(iris)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;</span>
dim(iris)    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#25968;, &#21015;&#25968;</span>
nrow(iris)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#25968;</span>
ncol(iris)   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#25968;</span>

head(iris[,1])           <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#30058;&#21495; R &#12399; 1-based &#34892;&#12434;&#36984;&#25246;&#12375;&#12394;&#12356;&#12392;&#12365;&#12399; ":" &#12434;&#26360;&#12363;&#12394;&#12356;</span>
head(iris$Sepal.Length)  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21517;&#21069;&#12434;&#20351;&#12387;&#12390;</span>
head(iris[1:3,2:3])      <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21015;&#12398;&#31684;&#22258;</span>
head(iris[,c(<span style="color: #ffa07a;">"Sepal.Width"</span>,<span style="color: #ffa07a;">"Species"</span>)])  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35079;&#25968;&#21015;&#12398;&#21462;&#24471;</span>
iris[1,1]    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20516;&#12398;&#21462;&#12426;&#20986;&#12375;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26908;&#32034; subset(data, &#26465;&#20214;)</span>
sel <span style="color: #1e90ff;">&lt;-</span> subset(iris,iris[<span style="color: #ffa07a;">"Sepal.Width"</span>]&gt;4.0)
sel
</pre>
</div>

<pre class="example">
[1] 5.1 4.9 4.7 4.6 5.0 5.4
[1] 5.1 4.9 4.7 4.6 5.0 5.4
  Sepal.Width Petal.Length
1         3.5          1.4
2         3.0          1.4
3         3.2          1.3
  Sepal.Width Species
1         3.5  setosa
2         3.0  setosa
3         3.2  setosa
4         3.1  setosa
5         3.6  setosa
6         3.9  setosa
[1] 150   5
[1] 150
[1] 5
[1] 5.1
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
16          5.7         4.4          1.5         0.4  setosa
33          5.2         4.1          1.5         0.1  setosa
34          5.5         4.2          1.4         0.2  setosa
</pre>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> julia</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
<span style="color: #20b2aa; font-weight: bold;">using</span> RDatasets
iris = dataset(<span style="color: #ffa07a;">"datasets"</span>,<span style="color: #ffa07a;">"iris"</span>)
println(size(iris))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">(&#34892;&#25968;, &#21015;&#25968;)</span>
println(names(iris))    <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;</span>
println(nrow(iris))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#25968;</span>
println(ncol(iris))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#25968; length(iris) &#12391;&#12418;&#21516;&#12376;</span>
</pre>
</div>

<pre class="example">
(150,5)
Symbol[:SepalLength,:SepalWidth,:PetalLength,:PetalWidth,:Species]
150
5
5
</pre>

<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
<span style="color: #20b2aa; font-weight: bold;">using</span> RDatasets
iris = dataset(<span style="color: #ffa07a;">"datasets"</span>,<span style="color: #ffa07a;">"iris"</span>)

println(head(iris))
println(head(iris[:,1:1]))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#21015;&#30446;&#12398;&#12415;&#21462;&#12426;&#20986;&#12377; julia &#12399; 1-based</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(head(iris[:,1]))  # &#12371;&#12428;&#12399;&#12480;&#12513;?</span>
println(head(iris[:,[<span style="color: #6495ed;">:Species</span>]]))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(head(iris[:,:Species]))  # &#12371;&#12428;&#12418;&#12480;&#12513;&#12415;&#12383;&#12356;</span>
println(iris[1:3,2:3])  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#34892;-3&#34892;&#30446;&#12414;&#12391; + 2&#21015;-3&#21015;&#30446;&#12414;&#12391;(R &#12392;&#21516;&#12376;!!)</span>
println(iris[1,1])  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20516;&#12398;&#21462;&#12426;&#20986;&#12375;</span>

println(head(iris[:,[1,3,5]])) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#35079;&#25968;&#12398;&#21015;&#12434;&#21462;&#12426;&#20986;&#12377;&#12392;&#12365;&#12399;&#37197;&#21015;&#12395;&#12377;&#12427;</span>
println(head(iris[:,2:3]))     <span style="color: #cd853f;"># </span><span style="color: #cd853f;">2-3 &#21015;&#30446;&#12398;&#25277;&#20986;</span>
println(head(iris[1:1,])) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12428;&#12391; 1 &#21015;&#30446;&#12434;&#21462;&#12426;&#20986;&#12379;&#12390;&#12427;&#12424;&#12358;&#12384;&#12364;&#12424;&#12367;&#12431;&#12363;&#12425;&#12394;&#12356;.</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#26908;&#32034;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#19981;&#31561;&#21495;&#12398;&#21069;&#12395;&#20309;&#25925;&#12363; . &#12364;&#12388;&#12356;&#12390;&#12427;&#28857;&#12395;&#27880;&#24847;&#12377;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">element-wise &#12395;&#25805;&#20316;&#12375;&#12383;&#12356;&#22580;&#21512;&#12399; . &#12391;&#22987;&#12414;&#12427;&#28436;&#31639;&#23376;&#12434;&#20351;&#12358;</span>
println(iris[iris[:, <span style="color: #6495ed;">:SepalWidth</span>] .&gt; 4.0,:])
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4"><span class="section-number-3">3.4</span> まとめ</h3>
<div class="outline-text-3" id="text-3-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">tuple</th>
<th scope="col" class="left">列名</th>
<th scope="col" class="left">行数</th>
<th scope="col" class="left">列数</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">iris.shape</td>
<td class="left">iris.columns</td>
<td class="left">iris.index</td>
<td class="left">isis.columns</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">dim(iris)</td>
<td class="left">names(iris)</td>
<td class="left">nrow(iris)</td>
<td class="left">ncol(iris)</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">size(iris)</td>
<td class="left">names(iris)</td>
<td class="left">nrow(iris)</td>
<td class="left">ncol(iris)</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">列番号</th>
<th scope="col" class="left">列名</th>
<th scope="col" class="left">範囲</th>
<th scope="col" class="left">値抽出</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">iris.iloc[:,0]</td>
<td class="left">iris.loc[:,name]</td>
<td class="left">iris.ix[0:2,1:3]</td>
<td class="left">iris.ix[0,0]</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">iris[,1]</td>
<td class="left">iris$name</td>
<td class="left">iris[1:3,2:3]</td>
<td class="left">iris[1,1]</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">iris[:,1:1]</td>
<td class="left">iris[:[:name]]</td>
<td class="left">iris[1:3,2:3]</td>
<td class="left">iris[1,1]</td>
</tr>
</tbody>
</table>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">検索</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">iris.[iris.lloc[:,"name"] &gt; value]</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">subset(iris,iris["name"] &gt; value)</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">iris[iris[:,:name] .&gt; value,:]</td>
</tr>
</tbody>
</table>


<p>
python と R, julia でのデータアクセスの方法のちがい.<br  />
</p>
<ol class="org-ol">
<li>python は 0-based, R, julia は 1-based<br  />
配列の添字の始まり数が違う<br  />
</li>
<li>最初の列の取得<br  />
python: iris.ix[:,0]<br  />
R:      iris[,1]<br  />
制限が無いときに, python 及び julia では ":" を使う. R は何も書かない.<br  />
</li>
<li>":" を使った範囲指定<br  />
python: iris.ix[:,1:3]  = 1 列目(0-based) から 2(=3-1, 0-based)列目まで<br  />
R:      iris[,2:3]      = 2 列目(1-based) から 3列目(1-based)まで<br  />
julia:  iris[:,2:3]     = 2 列目(1-based) から 3列目(1-based)まで<br  />
</li>
</ol>

<p>
そのほかのちゅうい点:<br  />
julia では column名は :column名 でアクセスするらしい.<br  />
何かいちいちめんどくさいなぁ&#x2026;<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 行, 列の追加と削除</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> python</h3>
<div class="outline-text-3" id="text-4-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> numpy  <span style="color: #20b2aa; font-weight: bold;">as</span> np

<span style="color: #9acd32;">df</span> = pd.DataFrame([[1,2],[3,4]],columns=<span style="color: #76ee00;">list</span>(<span style="color: #ffa07a;">'AB'</span>))
<span style="color: #20b2aa; font-weight: bold;">print</span>(df)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1. &#36861;&#21152;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#26041;&#21521;&#12395;&#36861;&#21152;</span>
<span style="color: #9acd32;">dfa</span>= pd.DataFrame([[5,6],[7,8],[9,10],[11,12]],columns=<span style="color: #76ee00;">list</span>(<span style="color: #ffa07a;">'AB'</span>))
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfa)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">ignore_index=True &#12391;&#34892;&#30058;&#21495;&#12434;&#20184;&#12369;&#30452;&#12375;</span>
<span style="color: #9acd32;">dfl</span>=df.append(dfa,ignore_index=<span style="color: #1e90ff;">True</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfl)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#26041;&#21521;&#12395;&#36861;&#21152;</span>
<span style="color: #9acd32;">dfl</span>[<span style="color: #ffa07a;">'C'</span>]=np.array([1,2,3,4,5,6])
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfl)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2. &#21066;&#38500;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12398;&#21066;&#38500;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">drop &#12434;&#20351;&#12358;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">cud = cun.drop([3,4])  # &#35079;&#25968;&#12398;&#34892;&#12434;&#21066;&#38500;&#12377;&#12427;&#12392;&#12365;</span>
<span style="color: #9acd32;">dfl2</span>=dfl.drop(3)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfl2)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21066;&#38500;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">drop(&#21015;&#21517;, axis=1)   # axis=1 &#12434;&#20351;&#12358;</span>
<span style="color: #9acd32;">dfl3</span>=dfl.drop(<span style="color: #ffa07a;">'A'</span>,axis=1)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfl3)
</pre>
</div>

<pre class="example">
   A  B
0  1  2
1  3  4

    A   B
0   5   6
1   7   8
2   9  10
3  11  12

    A   B
0   1   2
1   3   4
2   5   6
3   7   8
4   9  10
5  11  12

    A   B  C
0   1   2  1
1   3   4  2
2   5   6  3
3   7   8  4
4   9  10  5
5  11  12  6

    A   B  C
0   1   2  1
1   3   4  2
2   5   6  3
4   9  10  5
5  11  12  6

    B  C
0   2  1
1   4  2
2   6  3
3   8  4
4  10  5
5  12  6
</pre>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> R</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">

<pre class="src src-R">colA <span style="color: #1e90ff;">&lt;-</span> c(1,3)
colB <span style="color: #1e90ff;">&lt;-</span> c(2,4)
df <span style="color: #1e90ff;">&lt;-</span> data.frame(A=colA,B=colB)
df
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1. &#36861;&#21152;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#26041;&#21521;&#12395;&#36861;&#21152; rbind</span>
colAadd <span style="color: #1e90ff;">&lt;-</span> c(5,7,9,11)
colBadd <span style="color: #1e90ff;">&lt;-</span> c(6,8,10,12)
dfa <span style="color: #1e90ff;">&lt;-</span> data.frame(A=colAadd,B=colBadd)
print(<span style="color: #ffa07a;">"added:"</span>)
dfa
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">rbind</span>
dfl <span style="color: #1e90ff;">&lt;-</span> rbind(df,dfa)
print(<span style="color: #ffa07a;">"rbind:"</span>)
dfl

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#26041;&#21521;&#12395;&#36861;&#21152; cbind</span>
colC <span style="color: #1e90ff;">&lt;-</span> c(12,13,14,15,16,17)
dfc <span style="color: #1e90ff;">&lt;-</span> data.frame(C=colC)
print(<span style="color: #ffa07a;">"added:"</span>)
dfc
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">cbind</span>
dfk <span style="color: #1e90ff;">&lt;-</span> cbind(dfl,dfc)
print(<span style="color: #ffa07a;">"cbind:"</span>)
dfk

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2. &#21066;&#38500;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12398;&#21066;&#38500; "-" &#12434;&#20351;&#12358;</span>
dfl2 <span style="color: #1e90ff;">&lt;-</span> dfk[c(-1,-2),]
print(<span style="color: #ffa07a;">"drop row:"</span>)
dfl2
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21066;&#38500;</span>
dfl3 <span style="color: #1e90ff;">&lt;-</span> dfl2[,-1]
print(<span style="color: #ffa07a;">"drop col:"</span>)
dfl3
</pre>
</div>

<pre class="example">
  A B
1 1 2
2 3 4
[1] "added:"
   A  B
1  5  6
2  7  8
3  9 10
4 11 12
[1] "rbind:"
   A  B
1  1  2
2  3  4
3  5  6
4  7  8
5  9 10
6 11 12
[1] "added:"
   C
1 12
2 13
3 14
4 15
5 16
6 17
[1] "cbind:"
   A  B  C
1  1  2 12
2  3  4 13
3  5  6 14
4  7  8 15
5  9 10 16
6 11 12 17
[1] "drop row:"
   A  B  C
3  5  6 14
4  7  8 15
5  9 10 16
6 11 12 17
[1] "drop col:"
   B  C
3  6 14
4  8 15
5 10 16
6 12 17
</pre>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3"><span class="section-number-3">4.3</span> julia</h3>
<div class="outline-text-3" id="text-4-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
df  = DataFrame(A=[1,3],B=[2,4])
dfa = DataFrame(A=[5,7,9,11],B=[6,8,10,12])

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1. &#36861;&#21152;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#26041;&#21521;&#12395;&#36861;&#21152; vcat</span>
dfl = vcat(df,dfa)
println(<span style="color: #ffa07a;">"vcat:"</span>)
println(dfl)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#26041;&#21521;&#12395;&#36861;&#21152; hcat</span>
dfc = DataFrame(C=[12,13,14,15,16,17])
dfk = hcat(dfl,dfc)
println(<span style="color: #ffa07a;">"hcat:"</span>)
println(dfk)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2. &#21066;&#38500;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#12398;&#21066;&#38500;</span>
dfl2 = dfk[setdiff(collect(1:1:nrow(dfk)),[3,4]),:]
println(collect(1:1:6))   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12363;&#12425; 1 step &#12391; 6 &#12414;&#12391;&#12398;&#37197;&#21015;&#12434;&#20316;&#25104;</span>
println(setdiff(collect(1:1:6),[3,4]))
println(<span style="color: #ffa07a;">"delete row 3,4"</span>)
println(dfl2)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12398;&#21066;&#38500;</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#30772;&#22730;&#30340; method &#12391;&#21066;&#38500;&#12377;&#12427;&#22580;&#21512;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">delete!(dfk,[:C,:B])</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">setdiff(names(dfk),[:C]) =&gt; [:A,:B]</span>
<span style="color: #cd853f;">#</span><span style="color: #cd853f;">dfl3 = dfk[setdiff(names(dfk),[:C])]</span>
dfl3 = dfk[setdiff(names(dfk),[<span style="color: #6495ed;">:C</span>,<span style="color: #6495ed;">:B</span>])]
println(<span style="color: #ffa07a;">"delete column C"</span>)
println(setdiff(names(dfk),[<span style="color: #6495ed;">:C</span>]))  <span style="color: #cd853f;"># </span><span style="color: #cd853f;">Symbol[:A, :B]</span>
println(dfl3)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfl3 = dfk[(x in [:C]) for x in names(df)] # &#20869;&#21253;&#27161;&#35352;: &#21205;&#12363;&#12394;&#12356;... Why?</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfl3 = dfk[:,1:2]   # &#12371;&#12428;&#12399;&#21205;&#12367;&#12369;&#12393;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">dfl3 = dfk[: [1:2]] # &#12371;&#12428;&#12399;&#21205;&#12363;&#12394;&#12356;</span>

dfl3 = dfk[:,[<span style="color: #1e90ff;">true</span>,<span style="color: #1e90ff;">true</span>,<span style="color: #1e90ff;">false</span>]]   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12428;&#12399;&#21205;&#12367;</span>
println(<span style="color: #ffa07a;">"delete column C"</span>)
println(dfl3)
</pre>
</div>

<pre class="example">
vcat:
6×2 DataFrames.DataFrame
│ Row │ A  │ B  │
├─────┼────┼────┤
│ 1   │ 1  │ 2  │
│ 2   │ 3  │ 4  │
│ 3   │ 5  │ 6  │
│ 4   │ 7  │ 8  │
│ 5   │ 9  │ 10 │
│ 6   │ 11 │ 12 │
hcat:
6×3 DataFrames.DataFrame
│ Row │ A  │ B  │ C  │
├─────┼────┼────┼────┤
│ 1   │ 1  │ 2  │ 12 │
│ 2   │ 3  │ 4  │ 13 │
│ 3   │ 5  │ 6  │ 14 │
│ 4   │ 7  │ 8  │ 15 │
│ 5   │ 9  │ 10 │ 16 │
│ 6   │ 11 │ 12 │ 17 │
[1,2,3,4,5,6]
[1,2,5,6]
delete row 3,4
4×3 DataFrames.DataFrame
│ Row │ A  │ B  │ C  │
├─────┼────┼────┼────┤
│ 1   │ 1  │ 2  │ 12 │
│ 2   │ 3  │ 4  │ 13 │
│ 3   │ 9  │ 10 │ 16 │
│ 4   │ 11 │ 12 │ 17 │
delete column C
Symbol[:A,:B]
6×1 DataFrames.DataFrame
│ Row │ A  │
├─────┼────┤
│ 1   │ 1  │
│ 2   │ 3  │
│ 3   │ 5  │
│ 4   │ 7  │
│ 5   │ 9  │
│ 6   │ 11 │
delete column C
6×2 DataFrames.DataFrame
│ Row │ A  │ B  │
├─────┼────┼────┤
│ 1   │ 1  │ 2  │
│ 2   │ 3  │ 4  │
│ 3   │ 5  │ 6  │
│ 4   │ 7  │ 8  │
│ 5   │ 9  │ 10 │
│ 6   │ 11 │ 12 │
</pre>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4"><span class="section-number-3">4.4</span> まとめ</h3>
<div class="outline-text-3" id="text-4-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">行方向追加</th>
<th scope="col" class="left">列方向追加</th>
<th scope="col" class="left">行削除</th>
<th scope="col" class="left">列削除</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">df1.append(df2)</td>
<td class="left">df1[new_col]=df2</td>
<td class="left">df1.drop([row1,row2])</td>
<td class="left">df1.drop([col1,col2],axis=1)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">rbind(df1,df2)</td>
<td class="left">cbind(df1,df2)</td>
<td class="left">df1[c(-row1, -row2),]</td>
<td class="left">df1[,c(-col1,-col2)]</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">vcat(df1,df2)</td>
<td class="left">hcat(df1,dv2)</td>
<td class="left">df1[setdiff(collect(1:1:nrow(df1)),[row1,row2]),:]</td>
<td class="left">df1[setdiff(names(df1),[:col1,:col2])]</td>
</tr>
</tbody>
</table>

<p>
julia の削除が異様にめんどくさいが何か別の方法あるんだろーか&#x2026;<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> 行, 列の結合</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> python</h3>
<div class="outline-text-3" id="text-5-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> numpy  <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#27178;&#26041;&#21521;&#12395;&#32080;&#21512;&#12377;&#12427;&#22580;&#21512;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">pd.merge(left,right, on='key', how="inner)</span>
<span style="color: #9acd32;">cu1</span> = pd.DataFrame([[1,<span style="color: #ffa07a;">"John"</span>],[2,<span style="color: #ffa07a;">"Mark"</span>]],columns=[<span style="color: #ffa07a;">'id'</span>,<span style="color: #ffa07a;">'name'</span>])
<span style="color: #9acd32;">cu2</span> = pd.DataFrame([[1,<span style="color: #ffa07a;">'ok'</span>,<span style="color: #ffa07a;">'mut'</span>],[2,<span style="color: #ffa07a;">'not ok'</span>,<span style="color: #ffa07a;">'wild'</span>]],columns=[<span style="color: #ffa07a;">'id'</span>,<span style="color: #ffa07a;">'OK'</span>,<span style="color: #ffa07a;">'m/w'</span>])
<span style="color: #20b2aa; font-weight: bold;">print</span>(cu1)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(cu2)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">id &#12434;&#12461;&#12540;&#12395;&#12375;&#12390;&#32080;&#21512;&#12377;&#12427;.</span>
<span style="color: #9acd32;">cum</span> = pd.merge(cu1,cu2,on=<span style="color: #ffa07a;">'id'</span>,how=<span style="color: #ffa07a;">'inner'</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(cum)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#32294;&#26041;&#21521;&#12395;&#32080;&#21512;&#12377;&#12427;&#22580;&#21512;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">pd.concat([table1, table2],ignore_index=True)</span>
<span style="color: #9acd32;">cu3</span> = pd.DataFrame([[3,<span style="color: #ffa07a;">"hoge"</span>,<span style="color: #ffa07a;">'not ok'</span>,<span style="color: #ffa07a;">'wild'</span>],
                    [4,<span style="color: #ffa07a;">"fuga"</span>,<span style="color: #ffa07a;">'ok'</span>,<span style="color: #ffa07a;">'wild'</span>]], columns=[<span style="color: #ffa07a;">'id'</span>,<span style="color: #ffa07a;">'name'</span>,<span style="color: #ffa07a;">'OK'</span>,<span style="color: #ffa07a;">'m/w'</span>])

<span style="color: #9acd32;">cun</span>=pd.concat([cum,cu3],ignore_index=<span style="color: #1e90ff;">True</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>()
<span style="color: #20b2aa; font-weight: bold;">print</span>(cun)
</pre>
</div>

<pre class="example">
   id  name
0   1  John
1   2  Mark

   id      OK   m/w
0   1      ok   mut
1   2  not ok  wild

   id  name      OK   m/w
0   1  John      ok   mut
1   2  Mark  not ok  wild

   id  name      OK   m/w
0   1  John      ok   mut
1   2  Mark  not ok  wild
2   3  hoge  not ok  wild
3   4  fuga      ok  wild
</pre>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> R</h3>
<div class="outline-text-3" id="text-5-2">
<div class="org-src-container">

<pre class="src src-R">cu1 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(1,2),name=c(<span style="color: #ffa07a;">'John'</span>,<span style="color: #ffa07a;">'Mark'</span>))
print(<span style="color: #ffa07a;">"cu1"</span>)
cu1
cu2 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(1,2),OK=c(<span style="color: #ffa07a;">'ok'</span>,<span style="color: #ffa07a;">'not ok'</span>),mut=c(<span style="color: #ffa07a;">'mut'</span>,<span style="color: #ffa07a;">'wild'</span>))
print(<span style="color: #ffa07a;">"cu2"</span>)
cu2
cum <span style="color: #1e90ff;">&lt;-</span> merge(cu1,cu2,by=<span style="color: #ffa07a;">'id'</span>,all=T)
print(<span style="color: #ffa07a;">"merge"</span>)
cum
</pre>
</div>

<pre class="example">
[1] "cu1"
  id name
1  1 John
2  2 Mark
[1] "cu2"
  id     OK  mut
1  1     ok  mut
2  2 not ok wild
[1] "merge"
  id name     OK  mut
1  1 John     ok  mut
2  2 Mark not ok wild
</pre>

<p>
cbind = column bind: 列で結合する.<br  />
</p>
<div class="org-src-container">

<pre class="src src-R">cu1 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(1,2),name=c(<span style="color: #ffa07a;">'John'</span>,<span style="color: #ffa07a;">'Mark'</span>))
print(<span style="color: #ffa07a;">"cu1"</span>)
cu1
cu2 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(1,2),OK=c(<span style="color: #ffa07a;">'ok'</span>,<span style="color: #ffa07a;">'not ok'</span>),mut=c(<span style="color: #ffa07a;">'mut'</span>,<span style="color: #ffa07a;">'wild'</span>))
print(<span style="color: #ffa07a;">"cu2"</span>)
cu2
cum <span style="color: #1e90ff;">&lt;-</span> cbind(cu1,cu2,by=<span style="color: #ffa07a;">'id'</span>,all=T)
print(<span style="color: #ffa07a;">"cbind"</span>)
cum
</pre>
</div>

<pre class="example">
[1] "cu1"
  id name
1  1 John
2  2 Mark
[1] "cu2"
  id     OK  mut
1  1     ok  mut
2  2 not ok wild
[1] "cbind"
  id name id     OK  mut by  all
1  1 John  1     ok  mut id TRUE
2  2 Mark  2 not ok wild id TRUE
</pre>

<p>
縦方向の結合: rbind<br  />
</p>
<div class="org-src-container">

<pre class="src src-R">cu1 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(1,2),name=c(<span style="color: #ffa07a;">'John'</span>,<span style="color: #ffa07a;">'Mark'</span>))
print(<span style="color: #ffa07a;">"cu1"</span>)
cu1
cu2 <span style="color: #1e90ff;">&lt;-</span> data.frame(id=c(3,4),name=c(<span style="color: #ffa07a;">'hoge'</span>,<span style="color: #ffa07a;">'fuga'</span>))
print(<span style="color: #ffa07a;">"cu2"</span>)
cu2
cum <span style="color: #1e90ff;">&lt;-</span> rbind(cu1,cu2)
print(<span style="color: #ffa07a;">"rbind"</span>)
cum
</pre>
</div>

<pre class="example">
[1] "cu1"
  id name
1  1 John
2  2 Mark
[1] "cu2"
  id name
1  3 hoge
2  4 fuga
[1] "rbind"
  id name
1  1 John
2  2 Mark
3  3 hoge
4  4 fuga
</pre>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> julia</h3>
<div class="outline-text-3" id="text-5-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
cu1 = DataFrame(id=[1,2],name=[<span style="color: #ffa07a;">"John"</span>,<span style="color: #ffa07a;">"Mark"</span>])
println(<span style="color: #ffa07a;">"cu1:"</span>)
println(cu1)
cu2 = DataFrame(id=[1,2],OK=[<span style="color: #ffa07a;">"ok"</span>,<span style="color: #ffa07a;">"not ok"</span>],mut=[<span style="color: #ffa07a;">"mut"</span>,<span style="color: #ffa07a;">"wild"</span>])
println(<span style="color: #ffa07a;">"cu2:"</span>)
println(cu2)
cum = join(cu1,cu2,on=<span style="color: #6495ed;">:id</span>, kind=<span style="color: #6495ed;">:inner</span>)
println(<span style="color: #ffa07a;">"merged:"</span>)
println(cum)
</pre>
</div>

<pre class="example">
cu1:
2×2 DataFrames.DataFrame
│ Row │ id │ name   │
├─────┼────┼────────┤
│ 1   │ 1  │ "John" │
│ 2   │ 2  │ "Mark" │
cu2:
2×3 DataFrames.DataFrame
│ Row │ id │ OK       │ mut    │
├─────┼────┼──────────┼────────┤
│ 1   │ 1  │ "ok"     │ "mut"  │
│ 2   │ 2  │ "not ok" │ "wild" │
merged:
2×4 DataFrames.DataFrame
│ Row │ id │ name   │ OK       │ mut    │
├─────┼────┼────────┼──────────┼────────┤
│ 1   │ 1  │ "John" │ "ok"     │ "mut"  │
│ 2   │ 2  │ "Mark" │ "not ok" │ "wild" │
</pre>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> まとめ</h3>
<div class="outline-text-3" id="text-5-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">横方向結合</th>
<th scope="col" class="left">縦方向結合</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">pd.merge(df1,df2, on=key_col_name,how='inner')</td>
<td class="left">pd.concat([df1,df2])</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">merge(df1,df2,by=key_col_name,all=T), cbind</td>
<td class="left">rbind(df1,df2)</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">join(df1,df2,on=:key_col_name,kind=:innter)</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> 行, 列のソート</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1"><span class="section-number-3">6.1</span> python</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12477;&#12540;&#12488;</span>
<span style="color: #9acd32;">df2</span>= pd.DataFrame([[1,3,<span style="color: #ffa07a;">'hokkaido'</span>],[4,5,<span style="color: #ffa07a;">'tokyo'</span>],[3,5,<span style="color: #ffa07a;">'saitama'</span>],
                   [6,9,<span style="color: #ffa07a;">'oosaka'</span>],  [1,1,<span style="color: #ffa07a;">'aomori'</span>]]);
<span style="color: #9acd32;">df2.index</span>=[<span style="color: #ffa07a;">'suzuki'</span>,<span style="color: #ffa07a;">'tanaka'</span>,<span style="color: #ffa07a;">'kimura'</span>,<span style="color: #ffa07a;">'endo'</span>,<span style="color: #ffa07a;">'yoshida'</span>];
<span style="color: #9acd32;">df2.columns</span>=[<span style="color: #ffa07a;">'col1'</span>,<span style="color: #ffa07a;">'col2'</span>,<span style="color: #ffa07a;">'col3'</span>]
<span style="color: #20b2aa; font-weight: bold;">print</span>(df2)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#25968;&#20516;&#12391;&#12477;&#12540;&#12488;&#12377;&#12427;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">sort_values(by=[&#21015;],ascending=True)</span>
<span style="color: #9acd32;">dfs1</span> = df2.sort_values(by=[<span style="color: #ffa07a;">'col1'</span>],ascending=<span style="color: #1e90ff;">True</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"sorted by col1:"</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfs1)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#21517;(index)&#12395;&#22522;&#12356;&#12390;&#12477;&#12540;&#12488;</span>
<span style="color: #9acd32;">dfs2</span> = df2.sort_index(ascending=<span style="color: #1e90ff;">False</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"sorted by index:"</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfs2)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#21517;&#12395;&#22522;&#12356;&#12390;&#12477;&#12540;&#12488;</span>
<span style="color: #9acd32;">dfs3</span> = df2.sort_index(axis=1, ascending=<span style="color: #1e90ff;">False</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"sorted by col names:"</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(dfs3)
</pre>
</div>

<pre class="example">
         col1  col2      col3
suzuki      1     3  hokkaido
tanaka      4     5     tokyo
kimura      3     5   saitama
endo        6     9    oosaka
yoshida     1     1    aomori
sorted by col1:
         col1  col2      col3
suzuki      1     3  hokkaido
yoshida     1     1    aomori
kimura      3     5   saitama
tanaka      4     5     tokyo
endo        6     9    oosaka
sorted by index:
         col1  col2      col3
yoshida     1     1    aomori
tanaka      4     5     tokyo
suzuki      1     3  hokkaido
kimura      3     5   saitama
endo        6     9    oosaka
sorted by col names:
             col3  col2  col1
suzuki   hokkaido     3     1
tanaka      tokyo     5     4
kimura    saitama     5     3
endo       oosaka     9     6
yoshida    aomori     1     1
</pre>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2"><span class="section-number-3">6.2</span> R</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-R">df2 <span style="color: #1e90ff;">&lt;-</span> data.frame(<span style="color: #ffa07a;">'col2'</span>=c(1,4,3,6,1), <span style="color: #ffa07a;">'col1'</span>=c(3,5,5,9,1),
                  <span style="color: #ffa07a;">'col3'</span>=c(<span style="color: #ffa07a;">'hokkaido'</span>,<span style="color: #ffa07a;">'tokyo'</span>,<span style="color: #ffa07a;">'saitama'</span>,<span style="color: #ffa07a;">'oosaka'</span>,<span style="color: #ffa07a;">'aomori'</span>),
                  <span style="color: #ffa07a;">'name'</span>=c(<span style="color: #ffa07a;">'suzuki'</span>,<span style="color: #ffa07a;">'tanaka'</span>,<span style="color: #ffa07a;">'kimura'</span>,<span style="color: #ffa07a;">'endo'</span>,<span style="color: #ffa07a;">'yoshida'</span>))
df2
print(<span style="color: #ffa07a;">"col1 &#12398;&#20516;&#12391; sort"</span>)
dfs1 <span style="color: #1e90ff;">&lt;-</span> df2[order(df2$col1),]
dfs1
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12371;&#12428;&#12391;&#12418;&#12424;&#12356;</span>
dfs2 <span style="color: #1e90ff;">&lt;-</span> df2[sort.list(df2$col1,decreasing=<span style="color: #9370db;">TRUE</span>),]
rownames(dfs2) <span style="color: #1e90ff;">&lt;-</span> c(1:nrow(dfs2))
print(<span style="color: #ffa07a;">"col1 &#12398;&#20516;&#12391; sort (2)"</span>)
dfs2

print(<span style="color: #ffa07a;">"&#34892;&#21517;&#12391; sort"</span>)
dfsr <span style="color: #1e90ff;">&lt;-</span> dfs1[order(row.names(dfs1)),]
dfsr

print(<span style="color: #ffa07a;">"&#21015;&#21517;&#12391; sort"</span>)
dfsc <span style="color: #1e90ff;">&lt;-</span> dfs1[,order(names(dfs1))]
dfsc
</pre>
</div>

<pre class="example">
  col2 col1     col3    name
1    1    3 hokkaido  suzuki
2    4    5    tokyo  tanaka
3    3    5  saitama  kimura
4    6    9   oosaka    endo
5    1    1   aomori yoshida
[1] "col1 の値で sort"
  col2 col1     col3    name
5    1    1   aomori yoshida
1    1    3 hokkaido  suzuki
2    4    5    tokyo  tanaka
3    3    5  saitama  kimura
4    6    9   oosaka    endo
[1] "col1 の値で sort (2)"
  col2 col1     col3    name
1    6    9   oosaka    endo
2    4    5    tokyo  tanaka
3    3    5  saitama  kimura
4    1    3 hokkaido  suzuki
5    1    1   aomori yoshida
[1] "行名で sort"
  col2 col1     col3    name
1    1    3 hokkaido  suzuki
2    4    5    tokyo  tanaka
3    3    5  saitama  kimura
4    6    9   oosaka    endo
5    1    1   aomori yoshida
[1] "列名で sort"
  col1 col2     col3    name
5    1    1   aomori yoshida
1    3    1 hokkaido  suzuki
2    5    4    tokyo  tanaka
3    5    3  saitama  kimura
4    9    6   oosaka    endo
</pre>
</div>
</div>

<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3"><span class="section-number-3">6.3</span> julia</h3>
<div class="outline-text-3" id="text-6-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames
df2 = DataFrame(col1=[1,4,3,6,1],col2=[3,5,5,9,1],
                col3=[<span style="color: #ffa07a;">"hokkaido"</span>,<span style="color: #ffa07a;">"tokyo"</span>,<span style="color: #ffa07a;">"saitama"</span>,<span style="color: #ffa07a;">"oosaka"</span>,<span style="color: #ffa07a;">"aomori"</span>],
                name=[<span style="color: #ffa07a;">"suzuki"</span>,<span style="color: #ffa07a;">"tanaka"</span>,<span style="color: #ffa07a;">"kimura"</span>,<span style="color: #ffa07a;">"endo"</span>,<span style="color: #ffa07a;">"yoshida"</span>])
println(df2)
dfs1 = sort(df2, cols=[<span style="color: #6495ed;">:col1</span>,<span style="color: #6495ed;">:col2</span>],rev=<span style="color: #1e90ff;">true</span>) <span style="color: #cd853f;"># </span><span style="color: #cd853f;">array &#12398;&#22580;&#21512;&#12399; by= &#12384;&#12364; DataFrame &#12398;&#22580;&#21512;&#12399; cols=</span>
println(<span style="color: #ffa07a;">"sorted:"</span>)
println(dfs1)
</pre>
</div>

<pre class="example">
5×4 DataFrames.DataFrame
│ Row │ col1 │ col2 │ col3       │ name      │
├─────┼──────┼──────┼────────────┼───────────┤
│ 1   │ 1    │ 3    │ "hokkaido" │ "suzuki"  │
│ 2   │ 4    │ 5    │ "tokyo"    │ "tanaka"  │
│ 3   │ 3    │ 5    │ "saitama"  │ "kimura"  │
│ 4   │ 6    │ 9    │ "oosaka"   │ "endo"    │
│ 5   │ 1    │ 1    │ "aomori"   │ "yoshida" │
sorted:
5×4 DataFrames.DataFrame
│ Row │ col1 │ col2 │ col3       │ name      │
├─────┼──────┼──────┼────────────┼───────────┤
│ 1   │ 6    │ 9    │ "oosaka"   │ "endo"    │
│ 2   │ 4    │ 5    │ "tokyo"    │ "tanaka"  │
│ 3   │ 3    │ 5    │ "saitama"  │ "kimura"  │
│ 4   │ 1    │ 3    │ "hokkaido" │ "suzuki"  │
│ 5   │ 1    │ 1    │ "aomori"   │ "yoshida" │
</pre>
</div>
</div>

<div id="outline-container-sec-6-4" class="outline-3">
<h3 id="sec-6-4"><span class="section-number-3">6.4</span> まとめ</h3>
<div class="outline-text-3" id="text-6-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">数値</th>
<th scope="col" class="left">行名</th>
<th scope="col" class="left">列名</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">df.sort_values(by=[col_name])</td>
<td class="left">df.sort_index()</td>
<td class="left">df.sort_index(axis=1)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">df[order(df$col_name)]</td>
<td class="left">df[order(row.names(df)),]</td>
<td class="left">df[,order(names(df))]</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">sort(df,cols=[:col_name])</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
julia のは調べるの力尽きたのでまたこんど.<br  />
</p>
</div>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> 行, 列の集計</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-sec-7-1" class="outline-3">
<h3 id="sec-7-1"><span class="section-number-3">7.1</span> python</h3>
<div class="outline-text-3" id="text-7-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #20b2aa; font-weight: bold;">import</span> pandas <span style="color: #20b2aa; font-weight: bold;">as</span> pd
<span style="color: #20b2aa; font-weight: bold;">import</span> numpy  <span style="color: #20b2aa; font-weight: bold;">as</span> np
<span style="color: #9acd32;">df</span> = pd.DataFrame({<span style="color: #ffa07a;">'col1'</span>:[8,9,10],
                   <span style="color: #ffa07a;">'col2'</span>:[1,2,3],
                   <span style="color: #ffa07a;">'col3'</span>:[4,5,6],
                   <span style="color: #ffa07a;">'col4'</span>:[9,1,2]
                   })
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">apply</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#27598;&#12395;&#38306;&#25968;&#12434;&#36969;&#29992;</span>
<span style="color: #9acd32;">ca</span> = df.<span style="color: #76ee00;">apply</span>(<span style="color: #20b2aa; font-weight: bold;">lambda</span> x: np.<span style="color: #76ee00;">sum</span>(x))
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"apply each col"</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(ca)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#27598;&#12395;&#38306;&#25968;&#12434;&#36969;&#29992;</span>
<span style="color: #9acd32;">cr</span> = df.<span style="color: #76ee00;">apply</span>(<span style="color: #20b2aa; font-weight: bold;">lambda</span> x: np.<span style="color: #76ee00;">sum</span>(x),axis=1)
<span style="color: #20b2aa; font-weight: bold;">print</span>(<span style="color: #ffa07a;">"apply each row"</span>)
<span style="color: #20b2aa; font-weight: bold;">print</span>(cr)

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12463;&#12525;&#12473;&#38598;&#35336;</span>
<span style="color: #20b2aa; font-weight: bold;">import</span> pyper
<span style="color: #9acd32;">r</span> = pyper.R(use_pandas=<span style="color: #ffa07a;">'True'</span>)
<span style="color: #9acd32;">df</span> = pd.DataFrame(r.get(<span style="color: #ffa07a;">'iris'</span>))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">df['C']=[1 if x&gt;3.0 else 0 for x in df.loc[:,' Sepal.Length ']]</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#20869;&#21253;&#27161;&#35352;&#12391;&#26360;&#12356;&#12390;&#12415;&#12383;!!</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#21015;&#30446;&#12398;&#20516;&#12364; 3 &#12424;&#12426;&#22823;&#12365;&#12369;&#12428;&#12400; 1 &#12381;&#12358;&#12391;&#12394;&#12369;&#12428;&#12400; 0 &#12434; 'C' &#21015;&#12395;&#20837;&#12428;&#12427;.</span>
<span style="color: #9acd32;">df</span>[<span style="color: #ffa07a;">'C'</span>]=[1 <span style="color: #20b2aa; font-weight: bold;">if</span> x&gt;3.0 <span style="color: #20b2aa; font-weight: bold;">else</span> 0 <span style="color: #20b2aa; font-weight: bold;">for</span> x <span style="color: #20b2aa; font-weight: bold;">in</span> df.ix[:,1]]
<span style="color: #cd853f;">#</span><span style="color: #cd853f;">print(df.loc[:,' Sepal.Length '].head(2))</span>
<span style="color: #20b2aa; font-weight: bold;">print</span>(df.head(5))
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">pd.crosstab(y&#36600;&#26041;&#21521;, x&#36600;&#26041;&#21521;)</span>
<span style="color: #9acd32;">cross</span> = pd.crosstab(df.C,df.Species)
<span style="color: #20b2aa; font-weight: bold;">print</span>(cross)
</pre>
</div>

<pre class="example">
apply each col
col1    27
col2     6
col3    15
col4    12
dtype: int64
apply each row
0    22
1    17
2    21
dtype: int64
    Sepal.Length    Sepal.Width    Petal.Length    Petal.Width     Species  C
0             5.1            3.5             1.4            0.2  b'setosa'  1
1             4.9            3.0             1.4            0.2  b'setosa'  0
2             4.7            3.2             1.3            0.2  b'setosa'  1
3             4.6            3.1             1.5            0.2  b'setosa'  1
4             5.0            3.6             1.4            0.2  b'setosa'  1
Species  b'setosa'  b'versicolor'  b'virginica'
C                                              
0                8             42            33
1               42              8            17
</pre>
</div>
</div>

<div id="outline-container-sec-7-2" class="outline-3">
<h3 id="sec-7-2"><span class="section-number-3">7.2</span> R</h3>
<div class="outline-text-3" id="text-7-2">
<div class="org-src-container">

<pre class="src src-R"><span style="color: #cd853f;"># </span><span style="color: #cd853f;">apply</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#12395;&#23550;&#12375;&#12390;&#36969;&#29992;</span>
means <span style="color: #1e90ff;">&lt;-</span> sapply(iris,mean)
means

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">1 &#12384;&#12392;&#34892;&#12395;&#23550;&#12375;&#38306;&#25968;&#36969;&#29992;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">2 &#12384;&#12392;&#21015;&#12395;&#23550;&#12375;&#38306;&#25968;&#36969;&#29992;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">c(1,2) &#12384;&#12392;&#21508;&#35201;&#32032;&#12395;&#23550;&#12375;&#38306;&#25968;&#36969;&#29992;</span>
max <span style="color: #1e90ff;">&lt;-</span> apply(iris,2,max)
max

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12463;&#12525;&#12473;&#38598;&#35336;</span>
head(iris)
hoge   <span style="color: #1e90ff;">&lt;-</span> sapply(iris$Sepal.Width, <span style="color: #20b2aa; font-weight: bold;">function</span>(p) { <span style="color: #20b2aa; font-weight: bold;">if</span>(p&gt;3.0) {<span style="color: #20b2aa; font-weight: bold;">return</span>(1); }<span style="color: #20b2aa; font-weight: bold;">else</span>{ <span style="color: #20b2aa; font-weight: bold;">return</span>(0); }})
iris$C <span style="color: #1e90ff;">&lt;-</span> hoge
cross  <span style="color: #1e90ff;">&lt;-</span> table(iris$C, iris$Species)
cross
</pre>
</div>

<pre class="example">
Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
    5.843333     3.057333     3.758000     1.199333           NA 
Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
       "7.9"        "4.4"        "6.9"        "2.5"  "virginica" 
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa

    setosa versicolor virginica
  0      8         42        33
  1     42          8        17
</pre>
</div>
</div>

<div id="outline-container-sec-7-3" class="outline-3">
<h3 id="sec-7-3"><span class="section-number-3">7.3</span> julia</h3>
<div class="outline-text-3" id="text-7-3">
<div class="org-src-container">

<pre class="src src-julia"><span style="color: #20b2aa; font-weight: bold;">using</span> DataFrames

<span style="color: #20b2aa; font-weight: bold;">function</span> <span style="color: #00ff7f;">ret01</span>(x,thr)
    <span style="color: #20b2aa; font-weight: bold;">if</span>(x &gt; thr)
        <span style="color: #20b2aa; font-weight: bold;">return</span> 1
    <span style="color: #20b2aa; font-weight: bold;">else</span>
        <span style="color: #20b2aa; font-weight: bold;">return</span> 0
    <span style="color: #20b2aa; font-weight: bold;">end</span>
<span style="color: #20b2aa; font-weight: bold;">end</span>

df = DataFrame(col1=[8,9,10],
               col2=[1,2,3],
               col3=[4,5,6],
               col4=[9,1,2])
println(df)
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">apply</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#21015;&#27598;&#12395;&#38306;&#25968;&#12434;&#36969;&#29992;</span>
co = colwise(sum,df)
println(co)
<span style="color: #20b2aa; font-weight: bold;">for</span> col <span style="color: #20b2aa; font-weight: bold;">in</span> eachcol(df)
   println(mean(col[2]))
<span style="color: #20b2aa; font-weight: bold;">end</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#27598;&#12395;&#38306;&#25968;&#12434;&#36969;&#29992;</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#34892;&#27598;&#12391;&#12356;&#12387;&#12410;&#12435;&#12395;&#12399;&#20986;&#26469;&#12394;&#12356;&#12387;&#12413;&#12356;.</span>
<span style="color: #20b2aa; font-weight: bold;">for</span> row <span style="color: #20b2aa; font-weight: bold;">in</span> eachrow(df)
   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">mean(Array)</span>
   <span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12356;&#12385;&#12356;&#12385;&#22793;&#25563;&#12375;&#12394;&#12356;&#12392;&#12356;&#12369;&#12394;&#12356;&#12398;&#12363;...</span>
   println(mean(convert(<span style="color: #9370db;">Array</span>,row)))
<span style="color: #20b2aa; font-weight: bold;">end</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">&#12463;&#12525;&#12473;&#38598;&#35336;</span>
<span style="color: #20b2aa; font-weight: bold;">using</span> RDatasets
df = dataset(<span style="color: #ffa07a;">"datasets"</span>,<span style="color: #ffa07a;">"iris"</span>)
println(head(df,5))

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(df[Symbol("SepalLength")])</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">julia &#12399; if else &#25991;&#20837;&#12426;&#12398;&#20869;&#21253;&#34920;&#35352;&#12391;&#12365;&#12427;&#12398;&#12363;?</span>
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">SepalWIdth 3 &#20197;&#19979;&#12434; 0, &#12381;&#12428;&#20197;&#22806;&#12399; 1 &#12434;&#20837;&#12428;&#12427;.</span>
selct = [ ret01(x,3.0) <span style="color: #20b2aa; font-weight: bold;">for</span> x <span style="color: #20b2aa; font-weight: bold;">in</span> df[<span style="color: #9370db;">Symbol</span>(<span style="color: #ffa07a;">"SepalWidth"</span>)]]
<span style="color: #cd853f;"># </span><span style="color: #cd853f;">println(selct)</span>

<span style="color: #cd853f;"># </span><span style="color: #cd853f;">C &#21015;&#12395;&#12487;&#12540;&#12479;&#12434;&#20837;&#12428;&#12427;</span>
df[<span style="color: #6495ed;">:C</span>]=selct
println(head(df,5))

<span style="color: #20b2aa; font-weight: bold;">using</span> FreqTables
cross = freqtable(df, <span style="color: #6495ed;">:C</span>, <span style="color: #6495ed;">:Species</span>)
println(cross)
</pre>
</div>

<pre class="example">
3×4 DataFrames.DataFrame
│ Row │ col1 │ col2 │ col3 │ col4 │
├─────┼──────┼──────┼──────┼──────┤
│ 1   │ 8    │ 1    │ 4    │ 9    │
│ 2   │ 9    │ 2    │ 5    │ 1    │
│ 3   │ 10   │ 3    │ 6    │ 2    │
Any[[27],[6],[15],[12]]
9.0
2.0
5.0
4.0
5.5
4.25
5.25
5×5 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species  │
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ "setosa" │
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ "setosa" │
│ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ "setosa" │
│ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ "setosa" │
│ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ "setosa" │
5×6 DataFrames.DataFrame
│ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species  │ C │
├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────┼───┤
│ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ "setosa" │ 1 │
│ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ "setosa" │ 0 │
│ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ "setosa" │ 1 │
│ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ "setosa" │ 1 │
│ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ "setosa" │ 1 │
2×3 Named Array{Int64,2}
C ╲ Species │     setosa  versicolor   virginica
────────────┼───────────────────────────────────
0           │          8          42          33
1           │         42           8          17
</pre>
</div>
</div>

<div id="outline-container-sec-7-4" class="outline-3">
<h3 id="sec-7-4"><span class="section-number-3">7.4</span> まとめ</h3>
<div class="outline-text-3" id="text-7-4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">&#xa0;</th>
<th scope="col" class="left">列毎関数適用</th>
<th scope="col" class="left">行毎関数適用</th>
<th scope="col" class="left">クロス集計</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">python</td>
<td class="left">df.apply(func)</td>
<td class="left">df.apply(func,axis=1)</td>
<td class="left">pd.crosstab(df.col1, df.col2)</td>
</tr>

<tr>
<td class="left">R</td>
<td class="left">sapply(df,func)</td>
<td class="left">apply(df,1,func)</td>
<td class="left">table(df$col1,df$col2)</td>
</tr>

<tr>
<td class="left">&#xa0;</td>
<td class="left">apply(df,2,func)</td>
<td class="left">&#xa0;</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">julia</td>
<td class="left">colwise(func,df)</td>
<td class="left">&#xa0;</td>
<td class="left">freqtable(df,:col1, :col2)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> 参考URL</h2>
<div class="outline-text-2" id="text-8">
<p>
主なものを以下に示す.<br  />
</p>

<p>
Introducing Julia/DataFrames - Wikibooks, open books for an open world:<br  />
<a href="http://bit.ly/2kRXXQC">http://bit.ly/2kRXXQC</a><br  />
DataFrames : Apply a function by rows - Google グループ:<br  />
<a href="https://groups.google.com/forum/#!topic/julia-users/q52Sxff5lME">https://groups.google.com/forum/#!topic/julia-users/q52Sxff5lME</a><br  />
Learn Julia in Y Minutes:<br  />
<a href="https://learnxinyminutes.com/docs/ja-jp/julia-jp/">https://learnxinyminutes.com/docs/ja-jp/julia-jp/</a><br  />
データフレーム | Julia の DataFrames:<br  />
<a href="http://stat.biopapyrus.net/julia/dataframes.html">http://stat.biopapyrus.net/julia/dataframes.html</a><br  />
10 Minutes to DataFrames.jl - StatsFragments:<br  />
<a href="http://sinhrks.hatenablog.com/entry/2015/12/23/003321">http://sinhrks.hatenablog.com/entry/2015/12/23/003321</a><br  />
Vectors, Arrays and Matrices – Quantitative Economics:<br  />
<a href="https://lectures.quantecon.org/jl/julia_arrays.html">https://lectures.quantecon.org/jl/julia_arrays.html</a><br  />
Database-Style Joins and Indexing — dataframesjl 0.6.0 documentation<br  />
<a href="http://dataframesjl.readthedocs.io/en/latest/joins_and_indexing.html">http://dataframesjl.readthedocs.io/en/latest/joins_and_indexing.html</a><br  />
sort by column doesn't work · Issue #660 · JuliaStats/DataFrames.jl:<br  />
<a href="https://github.com/JuliaStats/DataFrames.jl/issues/660">https://github.com/JuliaStats/DataFrames.jl/issues/660</a><br  />
</p>

<p>
Python(+Pandas), R, Julia(+DataFrames) でのテキストファイルおよび SQLite からの読み込み - Qiita:<br  />
<a href="http://qiita.com/ngr_t/items/57867de223f741f735b8">http://qiita.com/ngr_t/items/57867de223f741f735b8</a><br  />
データ分析ライブラリPandasの使い方 - Librabuch:<br  />
<a href="https://librabuch.jp/blog/2013/12/pandas_python_advent_calendar_2013/">https://librabuch.jp/blog/2013/12/pandas_python_advent_calendar_2013/</a><br  />
Python pandas の算術演算 / 集約関数 / 統計関数まとめ - StatsFragments:<br  />
<a href="http://sinhrks.hatenablog.com/entry/2014/11/27/232150">http://sinhrks.hatenablog.com/entry/2014/11/27/232150</a><br  />
Python pandas データのイテレーションと関数適用、pipe - StatsFragments:<br  />
<a href="http://sinhrks.hatenablog.com/entry/2015/06/18/221747">http://sinhrks.hatenablog.com/entry/2015/06/18/221747</a><br  />
python:データ処理tips その3 クロス集計したものをヒートマップで可視化する - MATHGRAM:<br  />
<a href="http://www.mathgram.xyz/entry/2016/02/28/141510">http://www.mathgram.xyz/entry/2016/02/28/141510</a><br  />
</p>

<p>
apply() ファミリー:<br  />
<a href="http://cse.naro.affrc.go.jp/takezawa/r-tips/r/24.html">http://cse.naro.affrc.go.jp/takezawa/r-tips/r/24.html</a><br  />
How can I use the row.names attribute to order the rows of my dataframe in R? - Stack Overflow<br  />
<a href="http://stackoverflow.com/questions/20295787/how-can-i-use-the-row-names-attribute-to-order-the-rows-of-my-dataframe-in-r">http://stackoverflow.com/questions/20295787/how-can-i-use-the-row-names-attribute-to-order-the-rows-of-my-dataframe-in-r</a><br  />
r - Sort columns of a dataframe by column name - Stack Overflow<br  />
<a href="http://stackoverflow.com/questions/7334644/sort-columns-of-a-dataframe-by-column-name">http://stackoverflow.com/questions/7334644/sort-columns-of-a-dataframe-by-column-name</a><br  />
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[はじめに]]></title>
    <link href="http://saito1369.github.io/blog/2017-01-01-first.html"/>
    <updated>2017-01-01T00:00:00+09:00</updated>
    <id>http://saito1369.github.io/blog/first</id>
    <content type="html"><![CDATA[<p>
#+File Created: <span class="timestamp-wrapper"><span class="timestamp">&lt;2017-01-01 Sun 12:50&gt;</span></span><br  />
#+Last Updated: <2021-09-21 Tue 12:59><span class="timestamp">&lt;2018-02-21 Wed 18:56&gt;</span></span><br  />
</p>
<p>
以前から自分が困った時用に応急処置的につくっていた学習記録などを,<br  />
まとめてここに置いておく.<br  />
学習をきろくした日が File Created の日時で,<br  />
まとめ用に色々修正した最終日が Last Updated の日時になっている.<br  />
</p>
]]></content>
  </entry>
  
</feed>
